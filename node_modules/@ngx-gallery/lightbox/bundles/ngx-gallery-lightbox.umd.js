(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations'), require('@angular/core'), require('@angular/platform-browser'), require('@angular/common'), require('rxjs'), require('@angular/cdk/portal'), require('@angular/cdk/overlay'), require('@angular/cdk/keycodes'), require('@ngx-gallery/core'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngx-gallery/lightbox', ['exports', '@angular/animations', '@angular/core', '@angular/platform-browser', '@angular/common', 'rxjs', '@angular/cdk/portal', '@angular/cdk/overlay', '@angular/cdk/keycodes', '@ngx-gallery/core', 'rxjs/operators'], factory) :
    (factory((global['ngx-gallery'] = global['ngx-gallery'] || {}, global['ngx-gallery'].lightbox = {}),global.ng.animations,global.ng.core,global.ng.platformBrowser,global.ng.common,global.rxjs,global.ng.cdk.portal,global.ng.cdk.overlay,global.ng.cdk.keycodes,null,global.rxjs.operators));
}(this, (function (exports,animations,core,platformBrowser,common,rxjs,portal,overlay,keycodes,core$1,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var lightboxAnimations = {
        slideLightbox: animations.trigger('slideLightbox', [
            animations.state('enter', animations.style({ transform: 'none', opacity: 1 })),
            animations.state('void', animations.style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),
            animations.state('exit', animations.style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),
            animations.transition('* => *', animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
        ])
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LightboxComponent = /** @class */ (function () {
        function LightboxComponent(sanitizer, location) {
            var _this = this;
            this.sanitizer = sanitizer;
            /**
             * Subscription to changes in the user's location.
             */
            this._locationChange$ = rxjs.Subscription.EMPTY;
            // Close the Lightbox when the location changes
            if (location) {
                this._locationChange$ = location.subscribe(function () { return _this.overlayRef.detach(); });
            }
        }
        /** Dispose the overlay when exit animation is done */
        /**
         * Dispose the overlay when exit animation is done
         * @param {?} e
         * @return {?}
         */
        LightboxComponent.prototype.onMouseLeave = /**
         * Dispose the overlay when exit animation is done
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.toState === 'void') {
                    this.overlayRef.dispose();
                }
            };
        /**
         * @return {?}
         */
        LightboxComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._locationChange$.unsubscribe();
            };
        LightboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lightbox',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [lightboxAnimations.slideLightbox],
                        styles: ["::ng-deep lightbox{position:relative;display:block;width:1100px;height:800px;max-width:94vw;max-height:90vh}::ng-deep lightbox gallery{overflow:hidden;margin:0;display:block;width:100%;height:100%;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}::ng-deep .g-backdrop{background-color:rgba(0,0,0,.9)}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep lightbox{max-width:unset;max-height:unset;position:fixed;top:0;left:0;bottom:0;right:0;height:100%;width:100%}::ng-deep .g-overlay{margin:auto}@media only screen and (max-width:480px){::ng-deep .g-overlay{width:100%}::ng-deep .g-overlay ::ng-deep lightbox{max-width:unset;max-height:unset;position:fixed;top:0;left:0;bottom:0;right:0;height:100%;width:100%}}::ng-deep .cdk-global-overlay-wrapper,::ng-deep .cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}::ng-deep .cdk-overlay-container{position:fixed;z-index:1000}::ng-deep .cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}::ng-deep .cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000}::ng-deep .cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}::ng-deep .cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.48}::ng-deep .cdk-overlay-dark-backdrop{background:rgba(0,0,0,.6)}::ng-deep .cdk-overlay-transparent-backdrop{background:0 0}::ng-deep .cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}::ng-deep .g-btn-close{position:absolute;right:.9em;top:.9em;z-index:60;cursor:pointer;width:20px;height:20px}@media only screen and (max-width:480px){::ng-deep .g-btn-close{right:.7em;top:.7em}}"],
                        template: "\n    <gallery [id]=\"id\" [destroyRef]=\"false\" [skipInitConfig]=\"true\">\n      <i class=\"g-btn-close\" aria-label=\"Close\" (click)=\"overlayRef.detach()\"\n         [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(closeIcon)\"></i>\n    </gallery>\n  "
                    },] },
        ];
        /** @nocollapse */
        LightboxComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: common.Location, decorators: [{ type: core.Optional }] }
            ];
        };
        LightboxComponent.propDecorators = {
            slideAnimation: [{ type: core.HostBinding, args: ['@slideLightbox',] }],
            onMouseLeave: [{ type: core.HostListener, args: ['@slideLightbox.done', ['$event'],] }]
        };
        return LightboxComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LIGHTBOX_CONFIG = new core.InjectionToken('lightboxConfig');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultConfig = {
        backdropClass: 'g-backdrop',
        panelClass: 'g-overlay',
        hasBackdrop: true,
        keyboardShortcuts: true,
        closeIcon: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"512px\" height=\"512px\" enable-background=\"new 0 0 47.971 47.971\" version=\"1.1\" viewBox=\"0 0 47.971 47.971\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\" fill=\"#fff\"/>\n</svg>\n"
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Lightbox = /** @class */ (function () {
        function Lightbox(config, _gallery, _overlay) {
            this._gallery = _gallery;
            this._overlay = _overlay;
            /**
             * Stream that emits when lightbox is opened
             */
            this.opened = new rxjs.Subject();
            /**
             * Stream that emits when lightbox is closed
             */
            this.closed = new rxjs.Subject();
            this._config = __assign({}, defaultConfig, config);
        }
        /**
         * Set Lightbox Config
         * @param config - LightboxConfig
         */
        /**
         * Set Lightbox Config
         * @param {?} config - LightboxConfig
         * @return {?}
         */
        Lightbox.prototype.setConfig = /**
         * Set Lightbox Config
         * @param {?} config - LightboxConfig
         * @return {?}
         */
            function (config) {
                this._config = __assign({}, this._config, config);
            };
        /**
         * Open Lightbox Overlay
         * @param i - Current Index
         * @param id - Gallery ID
         * @param config - Lightbox Config
         */
        /**
         * Open Lightbox Overlay
         * @param {?=} i - Current Index
         * @param {?=} id - Gallery ID
         * @param {?=} config - Lightbox Config
         * @return {?}
         */
        Lightbox.prototype.open = /**
         * Open Lightbox Overlay
         * @param {?=} i - Current Index
         * @param {?=} id - Gallery ID
         * @param {?=} config - Lightbox Config
         * @return {?}
         */
            function (i, id, config) {
                var _this = this;
                if (i === void 0) {
                    i = 0;
                }
                if (id === void 0) {
                    id = 'lightbox';
                }
                /** @type {?} */
                var _config = config ? __assign({}, this._config, config) : this._config;
                /** @type {?} */
                var overlayConfig = {
                    backdropClass: _config.backdropClass,
                    panelClass: _config.panelClass,
                    hasBackdrop: _config.hasBackdrop,
                    positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                    scrollStrategy: this._overlay.scrollStrategies.block()
                };
                /** @type {?} */
                var galleryRef = this._gallery.ref(id);
                galleryRef.set(i);
                this._overlayRef = this._overlay.create(overlayConfig);
                // overlay opened event
                this._overlayRef.attachments().subscribe(function () { return _this.opened.next(id); });
                // overlay closed event
                this._overlayRef.detachments().subscribe(function () { return _this.closed.next(id); });
                /** @type {?} */
                var galleryPortal = new portal.ComponentPortal(LightboxComponent);
                /** @type {?} */
                var lightboxRef = this._overlayRef.attach(galleryPortal);
                lightboxRef.instance.id = id;
                lightboxRef.instance.overlayRef = this._overlayRef;
                lightboxRef.instance.closeIcon = this._config.closeIcon;
                if (_config.hasBackdrop) {
                    this._overlayRef.backdropClick().subscribe(function () { return _this.close(); });
                }
                // Add keyboard shortcuts
                if (_config.keyboardShortcuts) {
                    this._overlayRef.keydownEvents().subscribe(function (event) {
                        switch (event.keyCode) {
                            case keycodes.LEFT_ARROW:
                                galleryRef.prev();
                                break;
                            case keycodes.RIGHT_ARROW:
                                galleryRef.next();
                                break;
                            case keycodes.ESCAPE:
                                _this.close();
                        }
                    });
                }
            };
        /**
         * Close Lightbox Overlay
         */
        /**
         * Close Lightbox Overlay
         * @return {?}
         */
        Lightbox.prototype.close = /**
         * Close Lightbox Overlay
         * @return {?}
         */
            function () {
                if (this._overlayRef.hasAttached()) {
                    this._overlayRef.detach();
                }
            };
        Lightbox.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        Lightbox.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [LIGHTBOX_CONFIG,] }] },
                { type: core$1.Gallery },
                { type: overlay.Overlay }
            ];
        };
        return Lightbox;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LightboxDirective = /** @class */ (function () {
        function LightboxDirective(_lightbox, _el, _renderer) {
            this._lightbox = _lightbox;
            this._el = _el;
            this._renderer = _renderer;
            this.clickEvent = rxjs.Subscription.EMPTY;
            this.index = 0;
            this.id = 'root';
        }
        /**
         * @return {?}
         */
        LightboxDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');
                this.clickEvent = rxjs.fromEvent(this._el.nativeElement, 'click').pipe(operators.tap(function () { return _this._lightbox.open(_this.index, _this.id); })).subscribe();
            };
        /**
         * @return {?}
         */
        LightboxDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clickEvent.unsubscribe();
            };
        LightboxDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lightbox]'
                    },] },
        ];
        /** @nocollapse */
        LightboxDirective.ctorParameters = function () {
            return [
                { type: Lightbox },
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        LightboxDirective.propDecorators = {
            index: [{ type: core.Input, args: ['lightbox',] }],
            id: [{ type: core.Input, args: ['gallery',] }]
        };
        return LightboxDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} config
     * @param {?} gallery
     * @param {?} overlay
     * @return {?}
     */
    function lightboxFactory(config, gallery, overlay$$1) {
        return new Lightbox(config, gallery, overlay$$1);
    }
    var LightboxModule = /** @class */ (function () {
        function LightboxModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        LightboxModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: LightboxModule,
                    providers: [
                        {
                            provide: LIGHTBOX_CONFIG,
                            useValue: config
                        },
                        {
                            provide: Lightbox,
                            useFactory: lightboxFactory,
                            deps: [LIGHTBOX_CONFIG, core$1.Gallery, overlay.Overlay]
                        }
                    ]
                };
            };
        LightboxModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            overlay.OverlayModule,
                            core$1.GalleryModule
                        ],
                        declarations: [
                            LightboxComponent,
                            LightboxDirective
                        ],
                        exports: [
                            LightboxDirective
                        ],
                        entryComponents: [
                            LightboxComponent
                        ]
                    },] },
        ];
        return LightboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.LightboxComponent = LightboxComponent;
    exports.Lightbox = Lightbox;
    exports.lightboxFactory = lightboxFactory;
    exports.LightboxModule = LightboxModule;
    exports.ɵa = lightboxAnimations;
    exports.ɵc = LightboxDirective;
    exports.ɵb = LIGHTBOX_CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,