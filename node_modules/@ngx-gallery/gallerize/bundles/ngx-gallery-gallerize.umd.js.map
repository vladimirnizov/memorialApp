{"version":3,"file":"ngx-gallery-gallerize.umd.js.map","sources":["ng://@ngx-gallery/gallerize/lib/gallerize.directive.ts","ng://@ngx-gallery/gallerize/lib/gallerize.module.ts"],"sourcesContent":["import { Directive, Input, OnInit, OnDestroy, Inject, Optional, Self, Host, ElementRef, Renderer2, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from '@ngx-gallery/core';\r\nimport { Lightbox } from '@ngx-gallery/lightbox';\r\n\r\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\r\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * This directive has 2 modes:\r\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\r\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\r\n */\r\n\r\nconst enum GallerizeMode {\r\n  Detector = 'detector',\r\n  Gallery = 'gallery'\r\n}\r\n\r\n@Directive({\r\n  selector: '[gallerize]'\r\n})\r\nexport class GallerizeDirective implements OnInit, OnDestroy {\r\n\r\n  /** Default gallery id */\r\n  private _galleryId = 'lightbox';\r\n\r\n  /** Gallerize mode */\r\n  private readonly _mode: GallerizeMode;\r\n\r\n  /** If host element is a HTMLElement, will use the following variables: */\r\n\r\n  /** Stream that emits to fire the detection stream the image elements has changed */\r\n  private _observer$: any;\r\n\r\n  /** Stream that emits to discover the images */\r\n  private _detector$: Subject<any>;\r\n\r\n  /** If host element is a GalleryComponent, will use the following variables: */\r\n\r\n  /** Gallery events (if used on a gallery component) */\r\n  private _itemClick$: Subscription;\r\n  private _itemChange$: Subscription;\r\n\r\n  // ======================================================\r\n\r\n  /** If set, it will become the gallery id */\r\n  @Input() gallerize: string;\r\n\r\n  /** The selector used to query images elements */\r\n  @Input() selector = 'img';\r\n\r\n  constructor(private _el: ElementRef,\r\n              private _gallery: Gallery,\r\n              private _lightbox: Lightbox,\r\n              private _renderer: Renderer2,\r\n              @Inject(PLATFORM_ID) platform: Object,\r\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\r\n\r\n    // Set gallerize mode\r\n    if (isPlatformBrowser(platform)) {\r\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._galleryId = this.gallerize || this._galleryId;\r\n    const ref = this._gallery.ref(this._galleryId);\r\n\r\n    switch (this._mode) {\r\n      case GallerizeMode.Detector:\r\n        this.detectorMode(ref);\r\n        break;\r\n      case GallerizeMode.Gallery:\r\n        this.galleryMode(ref);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    switch (this._mode) {\r\n      case GallerizeMode.Detector:\r\n        this._detector$.complete();\r\n        this._observer$.disconnect();\r\n        break;\r\n      case GallerizeMode.Gallery:\r\n        this._itemClick$.unsubscribe();\r\n        this._itemChange$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /** Adds a click event to each gallery items to make it opens in in lightbox */\r\n  private galleryMode(galleryRef: GalleryRef) {\r\n    // Clone its items to the new gallery instance\r\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\r\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\r\n  }\r\n\r\n  /** Detects images and adds a click event to each image to make it opens in the lightbox */\r\n  private detectorMode(galleryRef: GalleryRef) {\r\n    this._detector$ = new Subject();\r\n    // Query image elements\r\n    this._detector$.pipe(\r\n      debounceTime(300),\r\n      switchMap(() => {\r\n\r\n        /** get all img elements from content */\r\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\r\n\r\n        if (imageElements && imageElements.length) {\r\n\r\n          const images: GalleryItem[] = [];\r\n\r\n          return from(imageElements).pipe(\r\n            map((el: any, i) => {\r\n              // Add click event to the image\r\n              this._renderer.setStyle(el, 'cursor', 'pointer');\r\n              this._renderer.setProperty(el, 'onclick', () => this._lightbox.open(i, this._galleryId));\r\n\r\n              if (el instanceof HTMLImageElement) {\r\n                // If element is type of img use the src property\r\n                return {\r\n                  src: el.src,\r\n                  thumb: el.src\r\n                };\r\n              } else {\r\n                // Otherwise, use element background-image url\r\n                const elStyle = el.currentStyle || window.getComputedStyle(el, null);\r\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\r\n                return {\r\n                  src: background,\r\n                  thumb: background\r\n                };\r\n              }\r\n            }),\r\n            tap((data: any) => images.push(new ImageItem(data))),\r\n            finalize(() => galleryRef.load(images))\r\n          );\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      })\r\n    ).subscribe();\r\n\r\n    // Observe content changes\r\n    this._observer$ = new MutationObserver(() => this._detector$.next());\r\n    this._observer$.observe(this._el.nativeElement, {childList: true, subtree: true});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { GalleryModule } from '@ngx-gallery/core';\r\nimport { LightboxModule } from '@ngx-gallery/lightbox';\r\nimport { GallerizeDirective } from './gallerize.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    GalleryModule,\r\n    LightboxModule\r\n  ],\r\n  declarations: [GallerizeDirective],\r\n  exports: [GallerizeDirective]\r\n})\r\nexport class GallerizeModule {\r\n\r\n}\r\n"],"names":["isPlatformBrowser","Subject","debounceTime","switchMap","from","map","tap","ImageItem","finalize","EMPTY","Directive","ElementRef","Gallery","Lightbox","Renderer2","Inject","PLATFORM_ID","GalleryComponent","Host","Self","Optional","Input","NgModule","GalleryModule","LightboxModule"],"mappings":"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"}
