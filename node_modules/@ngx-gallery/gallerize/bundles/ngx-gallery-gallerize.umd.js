(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@ngx-gallery/core'), require('@ngx-gallery/lightbox'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngx-gallery/gallerize', ['exports', '@angular/core', '@angular/common', '@ngx-gallery/core', '@ngx-gallery/lightbox', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-gallery'] = global['ngx-gallery'] || {}, global['ngx-gallery'].gallerize = {}),global.ng.core,global.ng.common,null,null,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,common,core$1,lightbox,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GallerizeDirective = /** @class */ (function () {
        function GallerizeDirective(_el, _gallery, _lightbox, _renderer, platform, _galleryCmp) {
            this._el = _el;
            this._gallery = _gallery;
            this._lightbox = _lightbox;
            this._renderer = _renderer;
            this._galleryCmp = _galleryCmp;
            /**
             * Default gallery id
             */
            this._galleryId = 'lightbox';
            /**
             * The selector used to query images elements
             */
            this.selector = 'img';
            // Set gallerize mode
            if (common.isPlatformBrowser(platform)) {
                this._mode = _galleryCmp ? "gallery" /* Gallery */ : "detector" /* Detector */;
            }
        }
        /**
         * @return {?}
         */
        GallerizeDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._galleryId = this.gallerize || this._galleryId;
                /** @type {?} */
                var ref = this._gallery.ref(this._galleryId);
                switch (this._mode) {
                    case "detector" /* Detector */:
                        this.detectorMode(ref);
                        break;
                    case "gallery" /* Gallery */:
                        this.galleryMode(ref);
                }
            };
        /**
         * @return {?}
         */
        GallerizeDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                switch (this._mode) {
                    case "detector" /* Detector */:
                        this._detector$.complete();
                        this._observer$.disconnect();
                        break;
                    case "gallery" /* Gallery */:
                        this._itemClick$.unsubscribe();
                        this._itemChange$.unsubscribe();
                }
            };
        /**
         * Adds a click event to each gallery items to make it opens in in lightbox
         * @param {?} galleryRef
         * @return {?}
         */
        GallerizeDirective.prototype.galleryMode = /**
         * Adds a click event to each gallery items to make it opens in in lightbox
         * @param {?} galleryRef
         * @return {?}
         */
            function (galleryRef) {
                var _this = this;
                // Clone its items to the new gallery instance
                this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe(function (i) { return _this._lightbox.open(i, _this._galleryId); });
                this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe(function (state) { return galleryRef.load(state.items); });
            };
        /**
         * Detects images and adds a click event to each image to make it opens in the lightbox
         * @param {?} galleryRef
         * @return {?}
         */
        GallerizeDirective.prototype.detectorMode = /**
         * Detects images and adds a click event to each image to make it opens in the lightbox
         * @param {?} galleryRef
         * @return {?}
         */
            function (galleryRef) {
                var _this = this;
                this._detector$ = new rxjs.Subject();
                // Query image elements
                this._detector$.pipe(operators.debounceTime(300), operators.switchMap(function () {
                    /** *
                     * get all img elements from content
                      @type {?} */
                    var imageElements = _this._el.nativeElement.querySelectorAll(_this.selector);
                    if (imageElements && imageElements.length) {
                        /** @type {?} */
                        var images_1 = [];
                        return rxjs.from(imageElements).pipe(operators.map(function (el, i) {
                            // Add click event to the image
                            // Add click event to the image
                            _this._renderer.setStyle(el, 'cursor', 'pointer');
                            _this._renderer.setProperty(el, 'onclick', function () { return _this._lightbox.open(i, _this._galleryId); });
                            if (el instanceof HTMLImageElement) {
                                // If element is type of img use the src property
                                return {
                                    src: el.src,
                                    thumb: el.src
                                };
                            }
                            else {
                                /** @type {?} */
                                var elStyle = el.currentStyle || window.getComputedStyle(el, null);
                                /** @type {?} */
                                var background = elStyle.backgroundImage.slice(4, -1).replace(/"/g, '');
                                return {
                                    src: background,
                                    thumb: background
                                };
                            }
                        }), operators.tap(function (data) { return images_1.push(new core$1.ImageItem(data)); }), operators.finalize(function () { return galleryRef.load(images_1); }));
                    }
                    else {
                        return rxjs.EMPTY;
                    }
                })).subscribe();
                // Observe content changes
                this._observer$ = new MutationObserver(function () { return _this._detector$.next(); });
                this._observer$.observe(this._el.nativeElement, { childList: true, subtree: true });
            };
        GallerizeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[gallerize]'
                    },] },
        ];
        /** @nocollapse */
        GallerizeDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core$1.Gallery },
                { type: lightbox.Lightbox },
                { type: core.Renderer2 },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
                { type: core$1.GalleryComponent, decorators: [{ type: core.Host }, { type: core.Self }, { type: core.Optional }] }
            ];
        };
        GallerizeDirective.propDecorators = {
            gallerize: [{ type: core.Input }],
            selector: [{ type: core.Input }]
        };
        return GallerizeDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GallerizeModule = /** @class */ (function () {
        function GallerizeModule() {
        }
        GallerizeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            core$1.GalleryModule,
                            lightbox.LightboxModule
                        ],
                        declarations: [GallerizeDirective],
                        exports: [GallerizeDirective]
                    },] },
        ];
        return GallerizeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.GallerizeDirective = GallerizeDirective;
    exports.GallerizeModule = GallerizeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktZ2FsbGVyaXplLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1nYWxsZXJ5L2dhbGxlcml6ZS9saWIvZ2FsbGVyaXplLmRpcmVjdGl2ZS50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2dhbGxlcml6ZS9saWIvZ2FsbGVyaXplLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSwgSW5qZWN0LCBPcHRpb25hbCwgU2VsZiwgSG9zdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBHYWxsZXJ5LCBHYWxsZXJ5UmVmLCBJbWFnZUl0ZW0sIEdhbGxlcnlDb21wb25lbnQsIEdhbGxlcnlTdGF0ZSwgR2FsbGVyeUl0ZW0gfSBmcm9tICdAbmd4LWdhbGxlcnkvY29yZSc7XHJcbmltcG9ydCB7IExpZ2h0Ym94IH0gZnJvbSAnQG5neC1nYWxsZXJ5L2xpZ2h0Ym94JztcclxuXHJcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiwgZnJvbSwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwLCBtYXAsIHN3aXRjaE1hcCwgZmluYWxpemUsIGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSBoYXMgMiBtb2RlczpcclxuICogMSAtIElmIGhvc3QgZWxlbWVudCBpcyBhIEhUTUxFbGVtZW50LCBpdCBkZXRlY3RzIHRoZSBpbWFnZXMgYW5kIGhvb2tzIHRoZWlyIGNsaWNrcyB0byBsaWdodGJveFxyXG4gKiAyIC0gSWYgaG9zdCBlbGVtZW50IGlzIGEgR2FsbGVyeUNvbXBvbmVudCwgaXQgaG9va3MgdGhlIGltYWdlcyBjbGljayB0byB0aGUgbGlnaHRib3hcclxuICovXHJcblxyXG5jb25zdCBlbnVtIEdhbGxlcml6ZU1vZGUge1xyXG4gIERldGVjdG9yID0gJ2RldGVjdG9yJyxcclxuICBHYWxsZXJ5ID0gJ2dhbGxlcnknXHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2dhbGxlcml6ZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJpemVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKiBEZWZhdWx0IGdhbGxlcnkgaWQgKi9cclxuICBwcml2YXRlIF9nYWxsZXJ5SWQgPSAnbGlnaHRib3gnO1xyXG5cclxuICAvKiogR2FsbGVyaXplIG1vZGUgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9tb2RlOiBHYWxsZXJpemVNb2RlO1xyXG5cclxuICAvKiogSWYgaG9zdCBlbGVtZW50IGlzIGEgSFRNTEVsZW1lbnQsIHdpbGwgdXNlIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOiAqL1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgdG8gZmlyZSB0aGUgZGV0ZWN0aW9uIHN0cmVhbSB0aGUgaW1hZ2UgZWxlbWVudHMgaGFzIGNoYW5nZWQgKi9cclxuICBwcml2YXRlIF9vYnNlcnZlciQ6IGFueTtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHRvIGRpc2NvdmVyIHRoZSBpbWFnZXMgKi9cclxuICBwcml2YXRlIF9kZXRlY3RvciQ6IFN1YmplY3Q8YW55PjtcclxuXHJcbiAgLyoqIElmIGhvc3QgZWxlbWVudCBpcyBhIEdhbGxlcnlDb21wb25lbnQsIHdpbGwgdXNlIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOiAqL1xyXG5cclxuICAvKiogR2FsbGVyeSBldmVudHMgKGlmIHVzZWQgb24gYSBnYWxsZXJ5IGNvbXBvbmVudCkgKi9cclxuICBwcml2YXRlIF9pdGVtQ2xpY2skOiBTdWJzY3JpcHRpb247XHJcbiAgcHJpdmF0ZSBfaXRlbUNoYW5nZSQ6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIC8qKiBJZiBzZXQsIGl0IHdpbGwgYmVjb21lIHRoZSBnYWxsZXJ5IGlkICovXHJcbiAgQElucHV0KCkgZ2FsbGVyaXplOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgc2VsZWN0b3IgdXNlZCB0byBxdWVyeSBpbWFnZXMgZWxlbWVudHMgKi9cclxuICBASW5wdXQoKSBzZWxlY3RvciA9ICdpbWcnO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBwcml2YXRlIF9nYWxsZXJ5OiBHYWxsZXJ5LFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgX2xpZ2h0Ym94OiBMaWdodGJveCxcclxuICAgICAgICAgICAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtOiBPYmplY3QsXHJcbiAgICAgICAgICAgICAgQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHByaXZhdGUgX2dhbGxlcnlDbXA6IEdhbGxlcnlDb21wb25lbnQpIHtcclxuXHJcbiAgICAvLyBTZXQgZ2FsbGVyaXplIG1vZGVcclxuICAgIGlmIChpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybSkpIHtcclxuICAgICAgdGhpcy5fbW9kZSA9IF9nYWxsZXJ5Q21wID8gR2FsbGVyaXplTW9kZS5HYWxsZXJ5IDogR2FsbGVyaXplTW9kZS5EZXRlY3RvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5fZ2FsbGVyeUlkID0gdGhpcy5nYWxsZXJpemUgfHwgdGhpcy5fZ2FsbGVyeUlkO1xyXG4gICAgY29uc3QgcmVmID0gdGhpcy5fZ2FsbGVyeS5yZWYodGhpcy5fZ2FsbGVyeUlkKTtcclxuXHJcbiAgICBzd2l0Y2ggKHRoaXMuX21vZGUpIHtcclxuICAgICAgY2FzZSBHYWxsZXJpemVNb2RlLkRldGVjdG9yOlxyXG4gICAgICAgIHRoaXMuZGV0ZWN0b3JNb2RlKHJlZik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgR2FsbGVyaXplTW9kZS5HYWxsZXJ5OlxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeU1vZGUocmVmKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgc3dpdGNoICh0aGlzLl9tb2RlKSB7XHJcbiAgICAgIGNhc2UgR2FsbGVyaXplTW9kZS5EZXRlY3RvcjpcclxuICAgICAgICB0aGlzLl9kZXRlY3RvciQuY29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLl9vYnNlcnZlciQuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEdhbGxlcml6ZU1vZGUuR2FsbGVyeTpcclxuICAgICAgICB0aGlzLl9pdGVtQ2xpY2skLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5faXRlbUNoYW5nZSQudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBBZGRzIGEgY2xpY2sgZXZlbnQgdG8gZWFjaCBnYWxsZXJ5IGl0ZW1zIHRvIG1ha2UgaXQgb3BlbnMgaW4gaW4gbGlnaHRib3ggKi9cclxuICBwcml2YXRlIGdhbGxlcnlNb2RlKGdhbGxlcnlSZWY6IEdhbGxlcnlSZWYpIHtcclxuICAgIC8vIENsb25lIGl0cyBpdGVtcyB0byB0aGUgbmV3IGdhbGxlcnkgaW5zdGFuY2VcclxuICAgIHRoaXMuX2l0ZW1DbGljayQgPSB0aGlzLl9nYWxsZXJ5Q21wLmdhbGxlcnlSZWYuaXRlbUNsaWNrLnN1YnNjcmliZSgoaTogbnVtYmVyKSA9PiB0aGlzLl9saWdodGJveC5vcGVuKGksIHRoaXMuX2dhbGxlcnlJZCkpO1xyXG4gICAgdGhpcy5faXRlbUNoYW5nZSQgPSB0aGlzLl9nYWxsZXJ5Q21wLmdhbGxlcnlSZWYuaXRlbXNDaGFuZ2VkLnN1YnNjcmliZSgoc3RhdGU6IEdhbGxlcnlTdGF0ZSkgPT4gZ2FsbGVyeVJlZi5sb2FkKHN0YXRlLml0ZW1zKSk7XHJcbiAgfVxyXG5cclxuICAvKiogRGV0ZWN0cyBpbWFnZXMgYW5kIGFkZHMgYSBjbGljayBldmVudCB0byBlYWNoIGltYWdlIHRvIG1ha2UgaXQgb3BlbnMgaW4gdGhlIGxpZ2h0Ym94ICovXHJcbiAgcHJpdmF0ZSBkZXRlY3Rvck1vZGUoZ2FsbGVyeVJlZjogR2FsbGVyeVJlZikge1xyXG4gICAgdGhpcy5fZGV0ZWN0b3IkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIC8vIFF1ZXJ5IGltYWdlIGVsZW1lbnRzXHJcbiAgICB0aGlzLl9kZXRlY3RvciQucGlwZShcclxuICAgICAgZGVib3VuY2VUaW1lKDMwMCksXHJcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcblxyXG4gICAgICAgIC8qKiBnZXQgYWxsIGltZyBlbGVtZW50cyBmcm9tIGNvbnRlbnQgKi9cclxuICAgICAgICBjb25zdCBpbWFnZUVsZW1lbnRzID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2VsZWN0b3IpO1xyXG5cclxuICAgICAgICBpZiAoaW1hZ2VFbGVtZW50cyAmJiBpbWFnZUVsZW1lbnRzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgIGNvbnN0IGltYWdlczogR2FsbGVyeUl0ZW1bXSA9IFtdO1xyXG5cclxuICAgICAgICAgIHJldHVybiBmcm9tKGltYWdlRWxlbWVudHMpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoZWw6IGFueSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIEFkZCBjbGljayBldmVudCB0byB0aGUgaW1hZ2VcclxuICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShlbCwgJ2N1cnNvcicsICdwb2ludGVyJyk7XHJcbiAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0UHJvcGVydHkoZWwsICdvbmNsaWNrJywgKCkgPT4gdGhpcy5fbGlnaHRib3gub3BlbihpLCB0aGlzLl9nYWxsZXJ5SWQpKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgZWxlbWVudCBpcyB0eXBlIG9mIGltZyB1c2UgdGhlIHNyYyBwcm9wZXJ0eVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgc3JjOiBlbC5zcmMsXHJcbiAgICAgICAgICAgICAgICAgIHRodW1iOiBlbC5zcmNcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdXNlIGVsZW1lbnQgYmFja2dyb3VuZC1pbWFnZSB1cmxcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsU3R5bGUgPSBlbC5jdXJyZW50U3R5bGUgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZCA9IGVsU3R5bGUuYmFja2dyb3VuZEltYWdlLnNsaWNlKDQsIC0xKS5yZXBsYWNlKC9cIi9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICBzcmM6IGJhY2tncm91bmQsXHJcbiAgICAgICAgICAgICAgICAgIHRodW1iOiBiYWNrZ3JvdW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHRhcCgoZGF0YTogYW55KSA9PiBpbWFnZXMucHVzaChuZXcgSW1hZ2VJdGVtKGRhdGEpKSksXHJcbiAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IGdhbGxlcnlSZWYubG9hZChpbWFnZXMpKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcblxyXG4gICAgLy8gT2JzZXJ2ZSBjb250ZW50IGNoYW5nZXNcclxuICAgIHRoaXMuX29ic2VydmVyJCA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuX2RldGVjdG9yJC5uZXh0KCkpO1xyXG4gICAgdGhpcy5fb2JzZXJ2ZXIkLm9ic2VydmUodGhpcy5fZWwubmF0aXZlRWxlbWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5TW9kdWxlIH0gZnJvbSAnQG5neC1nYWxsZXJ5L2NvcmUnO1xyXG5pbXBvcnQgeyBMaWdodGJveE1vZHVsZSB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9saWdodGJveCc7XHJcbmltcG9ydCB7IEdhbGxlcml6ZURpcmVjdGl2ZSB9IGZyb20gJy4vZ2FsbGVyaXplLmRpcmVjdGl2ZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIEdhbGxlcnlNb2R1bGUsXHJcbiAgICBMaWdodGJveE1vZHVsZVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbR2FsbGVyaXplRGlyZWN0aXZlXSxcclxuICBleHBvcnRzOiBbR2FsbGVyaXplRGlyZWN0aXZlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyaXplTW9kdWxlIHtcclxuXHJcbn1cclxuIl0sIm5hbWVzIjpbImlzUGxhdGZvcm1Ccm93c2VyIiwiU3ViamVjdCIsImRlYm91bmNlVGltZSIsInN3aXRjaE1hcCIsImZyb20iLCJtYXAiLCJ0YXAiLCJJbWFnZUl0ZW0iLCJmaW5hbGl6ZSIsIkVNUFRZIiwiRGlyZWN0aXZlIiwiRWxlbWVudFJlZiIsIkdhbGxlcnkiLCJMaWdodGJveCIsIlJlbmRlcmVyMiIsIkluamVjdCIsIlBMQVRGT1JNX0lEIiwiR2FsbGVyeUNvbXBvbmVudCIsIkhvc3QiLCJTZWxmIiwiT3B0aW9uYWwiLCJJbnB1dCIsIk5nTW9kdWxlIiwiR2FsbGVyeU1vZHVsZSIsIkxpZ2h0Ym94TW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFxREUsNEJBQW9CLEdBQWUsRUFDZixVQUNBLFdBQ0EsV0FDYSxRQUFnQixFQUNELFdBQTZCO1lBTHpELFFBQUcsR0FBSCxHQUFHLENBQVk7WUFDZixhQUFRLEdBQVIsUUFBUTtZQUNSLGNBQVMsR0FBVCxTQUFTO1lBQ1QsY0FBUyxHQUFULFNBQVM7WUFFbUIsZ0JBQVcsR0FBWCxXQUFXLENBQWtCOzs7OzhCQWhDeEQsVUFBVTs7Ozs0QkF5QlgsS0FBSzs7WUFVdkIsSUFBSUEsd0JBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyx1REFBa0Q7YUFDM0U7U0FDRjs7OztRQUVELHFDQUFROzs7WUFBUjtnQkFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQzs7Z0JBQ3BELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFL0MsUUFBUSxJQUFJLENBQUMsS0FBSztvQkFDaEI7d0JBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDdkIsTUFBTTtvQkFDUjt3QkFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN6QjthQUNGOzs7O1FBRUQsd0NBQVc7OztZQUFYO2dCQUNFLFFBQVEsSUFBSSxDQUFDLEtBQUs7b0JBQ2hCO3dCQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7d0JBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUM7d0JBQzdCLE1BQU07b0JBQ1I7d0JBQ0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt3QkFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDbkM7YUFDRjs7Ozs7O1FBR08sd0NBQVc7Ozs7O3NCQUFDLFVBQXNCOzs7Z0JBRXhDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFDLENBQVMsSUFBSyxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUEsQ0FBQyxDQUFDO2dCQUMzSCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBQyxLQUFtQixJQUFLLE9BQUEsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUEsQ0FBQyxDQUFDOzs7Ozs7O1FBSXhILHlDQUFZOzs7OztzQkFBQyxVQUFzQjs7Z0JBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSUMsWUFBTyxFQUFFLENBQUM7O2dCQUVoQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDbEJDLHNCQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCQyxtQkFBUyxDQUFDOzs7O29CQUdSLElBQU0sYUFBYSxHQUFHLEtBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFFN0UsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE1BQU0sRUFBRTs7d0JBRXpDLElBQU0sUUFBTSxHQUFrQixFQUFFLENBQUM7d0JBRWpDLE9BQU9DLFNBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQzdCQyxhQUFHLENBQUMsVUFBQyxFQUFPLEVBQUUsQ0FBQzs7OzRCQUViLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7NEJBQ2pELEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUEsQ0FBQyxDQUFDOzRCQUV6RixJQUFJLEVBQUUsWUFBWSxnQkFBZ0IsRUFBRTs7Z0NBRWxDLE9BQU87b0NBQ0wsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHO29DQUNYLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRztpQ0FDZCxDQUFDOzZCQUNIO2lDQUFNOztnQ0FFTCxJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7O2dDQUNyRSxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dDQUMxRSxPQUFPO29DQUNMLEdBQUcsRUFBRSxVQUFVO29DQUNmLEtBQUssRUFBRSxVQUFVO2lDQUNsQixDQUFDOzZCQUNIO3lCQUNGLENBQUMsRUFDRkMsYUFBRyxDQUFDLFVBQUMsSUFBUyxJQUFLLE9BQUEsUUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJQyxnQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUEsQ0FBQyxFQUNwREMsa0JBQVEsQ0FBQyxjQUFNLE9BQUEsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFNLENBQUMsR0FBQSxDQUFDLENBQ3hDLENBQUM7cUJBQ0g7eUJBQU07d0JBQ0wsT0FBT0MsVUFBSyxDQUFDO3FCQUNkO2lCQUNGLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDOztnQkFHZCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUEsQ0FBQyxDQUFDO2dCQUNyRSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7OztvQkE5SHJGQyxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLGFBQWE7cUJBQ3hCOzs7Ozt3QkF0QjJFQyxlQUFVO3dCQUc3RUMsY0FBTzt3QkFDUEMsaUJBQVE7d0JBSnVFQyxjQUFTO3dCQXlEcEQsTUFBTSx1QkFBcENDLFdBQU0sU0FBQ0MsZ0JBQVc7d0JBdERRQyx1QkFBZ0IsdUJBdUQxQ0MsU0FBSSxZQUFJQyxTQUFJLFlBQUlDLGFBQVE7Ozs7Z0NBVnBDQyxVQUFLOytCQUdMQSxVQUFLOztpQ0FuRFI7Ozs7Ozs7QUNBQTs7OztvQkFLQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRTs0QkFDUEMsb0JBQWE7NEJBQ2JDLHVCQUFjO3lCQUNmO3dCQUNELFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDO3dCQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztxQkFDOUI7OzhCQVpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=