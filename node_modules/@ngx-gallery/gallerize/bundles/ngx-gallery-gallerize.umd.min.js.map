{"version":3,"sources":["ng://@ngx-gallery/gallerize/lib/gallerize.directive.ts","ng://@ngx-gallery/gallerize/lib/gallerize.module.ts"],"names":["GallerizeDirective","_el","_gallery","_lightbox","_renderer","platform","_galleryCmp","this","isPlatformBrowser","_mode","prototype","ngOnInit","_galleryId","gallerize","ref","detectorMode","galleryMode","ngOnDestroy","_detector$","complete","_observer$","disconnect","_itemClick$","unsubscribe","_itemChange$","galleryRef","itemClick","subscribe","i","_this","open","itemsChanged","state","load","items","Subject","pipe","debounceTime","switchMap","imageElements","nativeElement","querySelectorAll","selector","length","images_1","from","map","el","setStyle","setProperty","HTMLImageElement","src","thumb","background","currentStyle","window","getComputedStyle","backgroundImage","slice","replace","tap","data","push","ImageItem","finalize","EMPTY","MutationObserver","next","observe","childList","subtree","Directive","args","ElementRef","Gallery","Lightbox","Renderer2","Object","decorators","type","Inject","PLATFORM_ID","GalleryComponent","Host","Self","Optional","Input","GallerizeModule","NgModule","imports","GalleryModule","LightboxModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, OnInit, OnDestroy, Inject, Optional, Self, Host, ElementRef, Renderer2, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from '@ngx-gallery/core';\r\nimport { Lightbox } from '@ngx-gallery/lightbox';\r\n\r\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\r\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * This directive has 2 modes:\r\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\r\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\r\n */\r\n\r\nconst enum GallerizeMode {\r\n  Detector = 'detector',\r\n  Gallery = 'gallery'\r\n}\r\n\r\n@Directive({\r\n  selector: '[gallerize]'\r\n})\r\nexport class GallerizeDirective implements OnInit, OnDestroy {\r\n\r\n  /** Default gallery id */\r\n  private _galleryId = 'lightbox';\r\n\r\n  /** Gallerize mode */\r\n  private readonly _mode: GallerizeMode;\r\n\r\n  /** If host element is a HTMLElement, will use the following variables: */\r\n\r\n  /** Stream that emits to fire the detection stream the image elements has changed */\r\n  private _observer$: any;\r\n\r\n  /** Stream that emits to discover the images */\r\n  private _detector$: Subject<any>;\r\n\r\n  /** If host element is a GalleryComponent, will use the following variables: */\r\n\r\n  /** Gallery events (if used on a gallery component) */\r\n  private _itemClick$: Subscription;\r\n  private _itemChange$: Subscription;\r\n\r\n  // ======================================================\r\n\r\n  /** If set, it will become the gallery id */\r\n  @Input() gallerize: string;\r\n\r\n  /** The selector used to query images elements */\r\n  @Input() selector = 'img';\r\n\r\n  constructor(private _el: ElementRef,\r\n              private _gallery: Gallery,\r\n              private _lightbox: Lightbox,\r\n              private _renderer: Renderer2,\r\n              @Inject(PLATFORM_ID) platform: Object,\r\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\r\n\r\n    // Set gallerize mode\r\n    if (isPlatformBrowser(platform)) {\r\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._galleryId = this.gallerize || this._galleryId;\r\n    const ref = this._gallery.ref(this._galleryId);\r\n\r\n    switch (this._mode) {\r\n      case GallerizeMode.Detector:\r\n        this.detectorMode(ref);\r\n        break;\r\n      case GallerizeMode.Gallery:\r\n        this.galleryMode(ref);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    switch (this._mode) {\r\n      case GallerizeMode.Detector:\r\n        this._detector$.complete();\r\n        this._observer$.disconnect();\r\n        break;\r\n      case GallerizeMode.Gallery:\r\n        this._itemClick$.unsubscribe();\r\n        this._itemChange$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /** Adds a click event to each gallery items to make it opens in in lightbox */\r\n  private galleryMode(galleryRef: GalleryRef) {\r\n    // Clone its items to the new gallery instance\r\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\r\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\r\n  }\r\n\r\n  /** Detects images and adds a click event to each image to make it opens in the lightbox */\r\n  private detectorMode(galleryRef: GalleryRef) {\r\n    this._detector$ = new Subject();\r\n    // Query image elements\r\n    this._detector$.pipe(\r\n      debounceTime(300),\r\n      switchMap(() => {\r\n\r\n        /** get all img elements from content */\r\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\r\n\r\n        if (imageElements && imageElements.length) {\r\n\r\n          const images: GalleryItem[] = [];\r\n\r\n          return from(imageElements).pipe(\r\n            map((el: any, i) => {\r\n              // Add click event to the image\r\n              this._renderer.setStyle(el, 'cursor', 'pointer');\r\n              this._renderer.setProperty(el, 'onclick', () => this._lightbox.open(i, this._galleryId));\r\n\r\n              if (el instanceof HTMLImageElement) {\r\n                // If element is type of img use the src property\r\n                return {\r\n                  src: el.src,\r\n                  thumb: el.src\r\n                };\r\n              } else {\r\n                // Otherwise, use element background-image url\r\n                const elStyle = el.currentStyle || window.getComputedStyle(el, null);\r\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\r\n                return {\r\n                  src: background,\r\n                  thumb: background\r\n                };\r\n              }\r\n            }),\r\n            tap((data: any) => images.push(new ImageItem(data))),\r\n            finalize(() => galleryRef.load(images))\r\n          );\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      })\r\n    ).subscribe();\r\n\r\n    // Observe content changes\r\n    this._observer$ = new MutationObserver(() => this._detector$.next());\r\n    this._observer$.observe(this._el.nativeElement, {childList: true, subtree: true});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { GalleryModule } from '@ngx-gallery/core';\r\nimport { LightboxModule } from '@ngx-gallery/lightbox';\r\nimport { GallerizeDirective } from './gallerize.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    GalleryModule,\r\n    LightboxModule\r\n  ],\r\n  declarations: [GallerizeDirective],\r\n  exports: [GallerizeDirective]\r\n})\r\nexport class GallerizeModule {\r\n\r\n}\r\n"]}