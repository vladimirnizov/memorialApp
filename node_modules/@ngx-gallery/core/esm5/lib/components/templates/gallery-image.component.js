/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var GalleryImageComponent = /** @class */ (function () {
    function GalleryImageComponent(_sanitizer) {
        this._sanitizer = _sanitizer;
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryImageComponent.prototype, "imageLoaded", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.loadedImage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GalleryImageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.loadingIcon) {
            this.loadingSvg = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
    };
    GalleryImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-image',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <ng-container [lazyImage]=\"src\" (loaded)=\"loadedImage = $event\" (error)=\"error.emit($event)\">\n      <div *ngIf=\"loadedImage; else loading\"\n           class=\"g-image-item\"\n           [style.backgroundImage]=\"loadedImage\"></div>\n    </ng-container>\n\n    <ng-template #loading>\n      <i *ngIf=\"loadingSvg; else thumbLoading\" class=\"g-loading\" [innerHTML]=\"loadingSvg\"></i>\n      <ng-template #thumbLoading>\n        <div class=\"g-thumb-loading\"></div>\n      </ng-template>\n    </ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryImageComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    GalleryImageComponent.propDecorators = {
        src: [{ type: Input }],
        loadingIcon: [{ type: Input }],
        error: [{ type: Output }],
        imageLoaded: [{ type: HostBinding, args: ['class.g-image-loaded',] }]
    };
    return GalleryImageComponent;
}());
export { GalleryImageComponent };
if (false) {
    /** @type {?} */
    GalleryImageComponent.prototype.loadedImage;
    /** @type {?} */
    GalleryImageComponent.prototype.loadingSvg;
    /** @type {?} */
    GalleryImageComponent.prototype.src;
    /** @type {?} */
    GalleryImageComponent.prototype.loadingIcon;
    /**
     * Stream that emits when an error occurs
     * @type {?}
     */
    GalleryImageComponent.prototype.error;
    /** @type {?} */
    GalleryImageComponent.prototype._sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RlbXBsYXRlcy9nYWxsZXJ5LWltYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDOztJQW1DakUsK0JBQW9CLFVBQXdCO1FBQXhCLGVBQVUsR0FBVixVQUFVLENBQWM7Ozs7cUJBTjFCLElBQUksWUFBWSxFQUFTO0tBTzFDO0lBTEQsc0JBQXlDLDhDQUFXOzs7O1FBQXBEO1lBQ0UsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUMzQjs7O09BQUE7Ozs7SUFLRCx3Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM3RTtLQUNGOztnQkF4Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLGtoQkFhVDtpQkFDRjs7OztnQkFuQlEsWUFBWTs7O3NCQXlCbEIsS0FBSzs4QkFDTCxLQUFLO3dCQUdMLE1BQU07OEJBRU4sV0FBVyxTQUFDLHNCQUFzQjs7Z0NBaENyQzs7U0FxQmEscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1pbWFnZScsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250YWluZXIgW2xhenlJbWFnZV09XCJzcmNcIiAobG9hZGVkKT1cImxvYWRlZEltYWdlID0gJGV2ZW50XCIgKGVycm9yKT1cImVycm9yLmVtaXQoJGV2ZW50KVwiPlxyXG4gICAgICA8ZGl2ICpuZ0lmPVwibG9hZGVkSW1hZ2U7IGVsc2UgbG9hZGluZ1wiXHJcbiAgICAgICAgICAgY2xhc3M9XCJnLWltYWdlLWl0ZW1cIlxyXG4gICAgICAgICAgIFtzdHlsZS5iYWNrZ3JvdW5kSW1hZ2VdPVwibG9hZGVkSW1hZ2VcIj48L2Rpdj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG5cclxuICAgIDxuZy10ZW1wbGF0ZSAjbG9hZGluZz5cclxuICAgICAgPGkgKm5nSWY9XCJsb2FkaW5nU3ZnOyBlbHNlIHRodW1iTG9hZGluZ1wiIGNsYXNzPVwiZy1sb2FkaW5nXCIgW2lubmVySFRNTF09XCJsb2FkaW5nU3ZnXCI+PC9pPlxyXG4gICAgICA8bmctdGVtcGxhdGUgI3RodW1iTG9hZGluZz5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZy10aHVtYi1sb2FkaW5nXCI+PC9kaXY+XHJcbiAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICA8L25nLXRlbXBsYXRlPlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlJbWFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIGxvYWRlZEltYWdlOiBzdHJpbmc7XHJcbiAgbG9hZGluZ1N2ZzogU2FmZUh0bWw7XHJcblxyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGxvYWRpbmdJY29uOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3I+KCk7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZy1pbWFnZS1sb2FkZWQnKSBnZXQgaW1hZ2VMb2FkZWQoKSB7XHJcbiAgICByZXR1cm4gISF0aGlzLmxvYWRlZEltYWdlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMubG9hZGluZ0ljb24pIHtcclxuICAgICAgdGhpcy5sb2FkaW5nU3ZnID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHRoaXMubG9hZGluZ0ljb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19