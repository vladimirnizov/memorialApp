/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
var GalleryCoreComponent = /** @class */ (function () {
    function GalleryCoreComponent() {
        this.action = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.thumbClick = new EventEmitter();
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryCoreComponent.prototype, "thumbPosition", {
        /** Set thumbnails position */
        get: /**
         * Set thumbnails position
         * @return {?}
         */
        function () {
            return this.config.thumbPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "slidingDirection", {
        /** Set sliding direction */
        get: /**
         * Set sliding direction
         * @return {?}
         */
        function () {
            return this.config.slidingDirection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "disableThumb", {
        /** Disable thumbnails clicks */
        get: /**
         * Disable thumbnails clicks
         * @return {?}
         */
        function () {
            return this.config.disableThumb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "imageSize", {
        /** Set gallery image size */
        get: /**
         * Set gallery image size
         * @return {?}
         */
        function () {
            return this.config.imageSize;
        },
        enumerable: true,
        configurable: true
    });
    GalleryCoreComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-core',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <gallery-thumbs *ngIf=\"config.thumb\"\n                    [state]=\"state\"\n                    [config]=\"config\"\n                    (action)=\"action.emit($event)\"\n                    (thumbClick)=\"thumbClick.emit($event)\">\n    </gallery-thumbs>\n    <div class=\"g-box\">\n      <gallery-slider [state]=\"state\"\n                      [config]=\"config\"\n                      (action)=\"action.emit($event)\"\n                      (itemClick)=\"itemClick.emit($event)\"\n                      (error)=\"error.emit($event)\">\n\n        <gallery-nav *ngIf=\"config.nav && state.items.length > 1\"\n                     [state]=\"state\"\n                     [config]=\"config\"\n                     (action)=\"action.emit($event)\">\n        </gallery-nav>\n\n      </gallery-slider>\n\n      <gallery-dots *ngIf=\"config.dots\"\n                    [state]=\"state\"\n                    (action)=\"action.emit($event)\">\n      </gallery-dots>\n\n      <gallery-counter *ngIf=\"config.counter\"\n                       [state]=\"state\">\n      </gallery-counter>\n    </div>\n  "
                },] },
    ];
    GalleryCoreComponent.propDecorators = {
        state: [{ type: Input }],
        config: [{ type: Input }],
        action: [{ type: Output }],
        itemClick: [{ type: Output }],
        thumbClick: [{ type: Output }],
        error: [{ type: Output }],
        thumbPosition: [{ type: HostBinding, args: ['attr.thumbPosition',] }],
        slidingDirection: [{ type: HostBinding, args: ['attr.slidingDirection',] }],
        disableThumb: [{ type: HostBinding, args: ['attr.disableThumb',] }],
        imageSize: [{ type: HostBinding, args: ['attr.imageSize',] }]
    };
    return GalleryCoreComponent;
}());
export { GalleryCoreComponent };
if (false) {
    /** @type {?} */
    GalleryCoreComponent.prototype.state;
    /** @type {?} */
    GalleryCoreComponent.prototype.config;
    /** @type {?} */
    GalleryCoreComponent.prototype.action;
    /** @type {?} */
    GalleryCoreComponent.prototype.itemClick;
    /** @type {?} */
    GalleryCoreComponent.prototype.thumbClick;
    /** @type {?} */
    GalleryCoreComponent.prototype.error;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1jb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZ2FsbGVyeS1jb3JlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7OztzQkE0Q3hGLElBQUksWUFBWSxFQUFtQjt5QkFDaEMsSUFBSSxZQUFZLEVBQVU7MEJBQ3pCLElBQUksWUFBWSxFQUFVO3FCQUMvQixJQUFJLFlBQVksRUFBZ0I7O0lBR2xELHNCQUF1QywrQ0FBYTtRQURwRCw4QkFBOEI7Ozs7O1FBQzlCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztTQUNsQzs7O09BQUE7SUFHRCxzQkFBMEMsa0RBQWdCO1FBRDFELDRCQUE0Qjs7Ozs7UUFDNUI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7U0FDckM7OztPQUFBO0lBR0Qsc0JBQXNDLDhDQUFZO1FBRGxELGdDQUFnQzs7Ozs7UUFDaEM7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1NBQ2pDOzs7T0FBQTtJQUdELHNCQUFtQywyQ0FBUztRQUQ1Qyw2QkFBNkI7Ozs7O1FBQzdCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUM5Qjs7O09BQUE7O2dCQWhFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxtQkFBbUIsRUFBRSxLQUFLO29CQUMxQixRQUFRLEVBQUUsb2xDQStCVDtpQkFDRjs7O3dCQUdFLEtBQUs7eUJBQ0wsS0FBSzt5QkFDTCxNQUFNOzRCQUNOLE1BQU07NkJBQ04sTUFBTTt3QkFDTixNQUFNO2dDQUdOLFdBQVcsU0FBQyxvQkFBb0I7bUNBS2hDLFdBQVcsU0FBQyx1QkFBdUI7K0JBS25DLFdBQVcsU0FBQyxtQkFBbUI7NEJBSy9CLFdBQVcsU0FBQyxnQkFBZ0I7OytCQWpFL0I7O1NBd0NhLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZywgR2FsbGVyeUVycm9yLCBHYWxsZXJ5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LWNvcmUnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8Z2FsbGVyeS10aHVtYnMgKm5nSWY9XCJjb25maWcudGh1bWJcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgIChhY3Rpb24pPVwiYWN0aW9uLmVtaXQoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgKHRodW1iQ2xpY2spPVwidGh1bWJDbGljay5lbWl0KCRldmVudClcIj5cclxuICAgIDwvZ2FsbGVyeS10aHVtYnM+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZy1ib3hcIj5cclxuICAgICAgPGdhbGxlcnktc2xpZGVyIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBbY29uZmlnXT1cImNvbmZpZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAoYWN0aW9uKT1cImFjdGlvbi5lbWl0KCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgKGl0ZW1DbGljayk9XCJpdGVtQ2xpY2suZW1pdCgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgICAgICAgIChlcnJvcik9XCJlcnJvci5lbWl0KCRldmVudClcIj5cclxuXHJcbiAgICAgICAgPGdhbGxlcnktbmF2ICpuZ0lmPVwiY29uZmlnLm5hdiAmJiBzdGF0ZS5pdGVtcy5sZW5ndGggPiAxXCJcclxuICAgICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAoYWN0aW9uKT1cImFjdGlvbi5lbWl0KCRldmVudClcIj5cclxuICAgICAgICA8L2dhbGxlcnktbmF2PlxyXG5cclxuICAgICAgPC9nYWxsZXJ5LXNsaWRlcj5cclxuXHJcbiAgICAgIDxnYWxsZXJ5LWRvdHMgKm5nSWY9XCJjb25maWcuZG90c1wiXHJcbiAgICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAoYWN0aW9uKT1cImFjdGlvbi5lbWl0KCRldmVudClcIj5cclxuICAgICAgPC9nYWxsZXJ5LWRvdHM+XHJcblxyXG4gICAgICA8Z2FsbGVyeS1jb3VudGVyICpuZ0lmPVwiY29uZmlnLmNvdW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiPlxyXG4gICAgICA8L2dhbGxlcnktY291bnRlcj5cclxuICAgIDwvZGl2PlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlDb3JlQ29tcG9uZW50IHtcclxuXHJcbiAgQElucHV0KCkgc3RhdGU6IEdhbGxlcnlTdGF0ZTtcclxuICBASW5wdXQoKSBjb25maWc6IEdhbGxlcnlDb25maWc7XHJcbiAgQE91dHB1dCgpIGFjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyPigpO1xyXG4gIEBPdXRwdXQoKSBpdGVtQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuICBAT3V0cHV0KCkgdGh1bWJDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8R2FsbGVyeUVycm9yPigpO1xyXG5cclxuICAvKiogU2V0IHRodW1ibmFpbHMgcG9zaXRpb24gKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIudGh1bWJQb3NpdGlvbicpIGdldCB0aHVtYlBvc2l0aW9uKCk6ICd0b3AnIHwgJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdib3R0b20nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy50aHVtYlBvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqIFNldCBzbGlkaW5nIGRpcmVjdGlvbiAqL1xyXG4gIEBIb3N0QmluZGluZygnYXR0ci5zbGlkaW5nRGlyZWN0aW9uJykgZ2V0IHNsaWRpbmdEaXJlY3Rpb24oKTogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJyB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcuc2xpZGluZ0RpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKiBEaXNhYmxlIHRodW1ibmFpbHMgY2xpY2tzICovXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmRpc2FibGVUaHVtYicpIGdldCBkaXNhYmxlVGh1bWIoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZGlzYWJsZVRodW1iO1xyXG4gIH1cclxuXHJcbiAgLyoqIFNldCBnYWxsZXJ5IGltYWdlIHNpemUgKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIuaW1hZ2VTaXplJykgZ2V0IGltYWdlU2l6ZSgpOiAnY292ZXInIHwgJ2NvbnRhaW4nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5pbWFnZVNpemU7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=