/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
var TapClickDirective = /** @class */ (function () {
    function TapClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tapClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setTapEvent();
    };
    /** Enable gestures if hammer is loaded */
    /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    TapClickDirective.prototype.setTapEvent = /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    function () {
        var _this = this;
        if (typeof Hammer !== 'undefined') {
            // Use hammer.js tap event
            this.mc = new Hammer(this.el.nativeElement);
            this.mc.on('tap', function () {
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
        else {
            // Use normal click event
            this.clickListener = this.renderer.listen(this.el.nativeElement, 'click', function (e) {
                e.stopPropagation();
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
        else {
            this.clickListener();
        }
    };
    TapClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tapClick]'
                },] },
    ];
    /** @nocollapse */
    TapClickDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TapClickDirective.propDecorators = {
        tapClickDisabled: [{ type: Input }],
        tapClick: [{ type: Output }]
    };
    return TapClickDirective;
}());
export { TapClickDirective };
if (false) {
    /** @type {?} */
    TapClickDirective.prototype.mc;
    /** @type {?} */
    TapClickDirective.prototype.clickListener;
    /** @type {?} */
    TapClickDirective.prototype.tapClickDisabled;
    /** @type {?} */
    TapClickDirective.prototype.tapClick;
    /** @type {?} */
    TapClickDirective.prototype.el;
    /** @type {?} */
    TapClickDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLWNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdGFwLWNsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFjL0csMkJBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVzt3QkFGMUMsSUFBSSxZQUFZLEVBQUU7S0FHdEM7Ozs7SUFFRCxvQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDcEI7SUFFRCwwQ0FBMEM7Ozs7O0lBQzFDLHVDQUFXOzs7O0lBQVg7UUFBQSxpQkFvQkM7UUFsQkMsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7O1lBR2pDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxLQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMxQjthQUNGLENBQUMsQ0FBQztTQUNKO2FBQU07O1lBRUwsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsVUFBQyxDQUFDO2dCQUMxRSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxLQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMxQjthQUNGLENBQUMsQ0FBQztTQUNKO0tBQ0Y7Ozs7SUFFRCx1Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ25CO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7S0FDRjs7Z0JBOUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTtpQkFDdkI7Ozs7Z0JBTm1CLFVBQVU7Z0JBQWtELFNBQVM7OzttQ0FXdEYsS0FBSzsyQkFDTCxNQUFNOzs0QkFmVDs7U0FVYSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVGhpcyBkaXJlY3RpdmUgZW5hYmxlIHRhcCBpZiBIYW1tZXJKUyBpcyBsb2FkZWQsIG90aGVyd2lzZSBpdCBmYWxscyBiYWNrIHRvIG5vcm1hbCBjbGljayBldmVudFxyXG4gKi9cclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmRlY2xhcmUgY29uc3QgSGFtbWVyOiBhbnk7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1t0YXBDbGlja10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYXBDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgbWM6IGFueTtcclxuICBjbGlja0xpc3RlbmVyOiBhbnk7XHJcbiAgQElucHV0KCkgdGFwQ2xpY2tEaXNhYmxlZDogYm9vbGVhbjtcclxuICBAT3V0cHV0KCkgdGFwQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnNldFRhcEV2ZW50KCk7XHJcbiAgfVxyXG5cclxuICAvKiogRW5hYmxlIGdlc3R1cmVzIGlmIGhhbW1lciBpcyBsb2FkZWQgKi9cclxuICBzZXRUYXBFdmVudCgpIHtcclxuXHJcbiAgICBpZiAodHlwZW9mIEhhbW1lciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcbiAgICAgIC8vIFVzZSBoYW1tZXIuanMgdGFwIGV2ZW50XHJcbiAgICAgIHRoaXMubWMgPSBuZXcgSGFtbWVyKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMubWMub24oJ3RhcCcsICgpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMudGFwQ2xpY2tEaXNhYmxlZCkge1xyXG4gICAgICAgICAgdGhpcy50YXBDbGljay5lbWl0KG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBVc2Ugbm9ybWFsIGNsaWNrIGV2ZW50XHJcbiAgICAgIHRoaXMuY2xpY2tMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmICghdGhpcy50YXBDbGlja0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICB0aGlzLnRhcENsaWNrLmVtaXQobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMubWMpIHtcclxuICAgICAgdGhpcy5tYy5kZXN0cm95KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsaWNrTGlzdGVuZXIoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19