/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { Subject, zip, fromEvent } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
var LazyDirective = /** @class */ (function () {
    function LazyDirective() {
        var _this = this;
        this._worker$ = new Subject();
        this.loaded = new EventEmitter();
        this.error = new EventEmitter();
        /** @type {?} */
        var img = new Image();
        this._worker$.pipe(switchMap(function (imageSrc) {
            // Image is loading
            // Image is loading
            _this.loaded.emit(null);
            // Stop previously loading
            img.src = imageSrc;
            /** @type {?} */
            var loadSuccess = fromEvent(img, 'load').pipe(tap(function () {
                _this.loaded.emit("url(" + imageSrc + ")");
            }));
            /** @type {?} */
            var loadError = fromEvent(img, 'error').pipe(tap(function () {
                _this.error.emit(new Error("[lazyImage]: The image " + imageSrc + " did not load"));
                _this.loaded.emit(null);
            }));
            return zip(loadSuccess, loadError);
        })).subscribe();
    }
    Object.defineProperty(LazyDirective.prototype, "lazyImage", {
        set: /**
         * @param {?} imagePath
         * @return {?}
         */
        function (imagePath) {
            this.loadImage(imagePath);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} imagePath
     * @return {?}
     */
    LazyDirective.prototype.loadImage = /**
     * @param {?} imagePath
     * @return {?}
     */
    function (imagePath) {
        this._worker$.next(imagePath);
    };
    /**
     * @return {?}
     */
    LazyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._worker$.complete();
    };
    LazyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyImage]'
                },] },
    ];
    /** @nocollapse */
    LazyDirective.ctorParameters = function () { return []; };
    LazyDirective.propDecorators = {
        lazyImage: [{ type: Input, args: ['lazyImage',] }],
        loaded: [{ type: Output }],
        error: [{ type: Output }]
    };
    return LazyDirective;
}());
export { LazyDirective };
if (false) {
    /** @type {?} */
    LazyDirective.prototype._worker$;
    /** @type {?} */
    LazyDirective.prototype.loaded;
    /** @type {?} */
    LazyDirective.prototype.error;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2xhenkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWEsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztJQWtCOUM7UUFBQSxpQkE4QkM7d0JBeENrQixJQUFJLE9BQU8sRUFBRTtzQkFPYixJQUFJLFlBQVksRUFBVTtxQkFDM0IsSUFBSSxZQUFZLEVBQVM7O1FBR3pDLElBQU0sR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLFNBQVMsQ0FBQyxVQUFDLFFBQWdCOztZQUd6QixBQURBLG1CQUFtQjtZQUNuQixLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7WUFHdkIsR0FBRyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7O1lBR25CLElBQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUM3QyxHQUFHLENBQUM7Z0JBQ0YsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBTyxRQUFRLE1BQUcsQ0FBQyxDQUFDO2FBQ3RDLENBQUMsQ0FDSCxDQUFDOztZQUdGLElBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUM7Z0JBQ0YsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsNEJBQTBCLFFBQVEsa0JBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBQzlFLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hCLENBQUMsQ0FDSCxDQUFDO1lBRUYsT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3BDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ2Y7SUF0Q0Qsc0JBQ0ksb0NBQVM7Ozs7O1FBRGIsVUFDYyxTQUFpQjtZQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzNCOzs7T0FBQTs7Ozs7SUFxQ0QsaUNBQVM7Ozs7SUFBVCxVQUFVLFNBQWlCO1FBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQy9COzs7O0lBRUQsbUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMxQjs7Z0JBdERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7Ozs7OzRCQU1FLEtBQUssU0FBQyxXQUFXO3lCQUtqQixNQUFNO3dCQUNOLE1BQU07O3dCQWxCVDs7U0FPYSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCB6aXAsIGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2xhenlJbWFnZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMYXp5RGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuXHJcbiAgLy8gTGF6eSBsb2FkIHdvcmtlclxyXG4gIHByaXZhdGUgX3dvcmtlciQgPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICBASW5wdXQoJ2xhenlJbWFnZScpXHJcbiAgc2V0IGxhenlJbWFnZShpbWFnZVBhdGg6IHN0cmluZykge1xyXG4gICAgdGhpcy5sb2FkSW1hZ2UoaW1hZ2VQYXRoKTtcclxuICB9XHJcblxyXG4gIEBPdXRwdXQoKSBsb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yPigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgIHRoaXMuX3dvcmtlciQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChpbWFnZVNyYzogc3RyaW5nKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIEltYWdlIGlzIGxvYWRpbmdcclxuICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KG51bGwpO1xyXG5cclxuICAgICAgICAvLyBTdG9wIHByZXZpb3VzbHkgbG9hZGluZ1xyXG4gICAgICAgIGltZy5zcmMgPSBpbWFnZVNyYztcclxuXHJcbiAgICAgICAgLy8gSW1hZ2UgbG9hZCBzdWNjZXNzXHJcbiAgICAgICAgY29uc3QgbG9hZFN1Y2Nlc3MgPSBmcm9tRXZlbnQoaW1nLCAnbG9hZCcpLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KGB1cmwoJHtpbWFnZVNyY30pYCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEltYWdlIGxvYWQgZmFpbGVkXHJcbiAgICAgICAgY29uc3QgbG9hZEVycm9yID0gZnJvbUV2ZW50KGltZywgJ2Vycm9yJykucGlwZShcclxuICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChuZXcgRXJyb3IoYFtsYXp5SW1hZ2VdOiBUaGUgaW1hZ2UgJHtpbWFnZVNyY30gZGlkIG5vdCBsb2FkYCkpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KG51bGwpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gemlwKGxvYWRTdWNjZXNzLCBsb2FkRXJyb3IpO1xyXG4gICAgICB9KVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIGxvYWRJbWFnZShpbWFnZVBhdGg6IHN0cmluZykge1xyXG4gICAgdGhpcy5fd29ya2VyJC5uZXh0KGltYWdlUGF0aCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX3dvcmtlciQuY29tcGxldGUoKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==