/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { Subject, zip, fromEvent } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
export class LazyDirective {
    constructor() {
        this._worker$ = new Subject();
        this.loaded = new EventEmitter();
        this.error = new EventEmitter();
        /** @type {?} */
        const img = new Image();
        this._worker$.pipe(switchMap((imageSrc) => {
            // Image is loading
            this.loaded.emit(null);
            // Stop previously loading
            img.src = imageSrc;
            /** @type {?} */
            const loadSuccess = fromEvent(img, 'load').pipe(tap(() => {
                this.loaded.emit(`url(${imageSrc})`);
            }));
            /** @type {?} */
            const loadError = fromEvent(img, 'error').pipe(tap(() => {
                this.error.emit(new Error(`[lazyImage]: The image ${imageSrc} did not load`));
                this.loaded.emit(null);
            }));
            return zip(loadSuccess, loadError);
        })).subscribe();
    }
    /**
     * @param {?} imagePath
     * @return {?}
     */
    set lazyImage(imagePath) {
        this.loadImage(imagePath);
    }
    /**
     * @param {?} imagePath
     * @return {?}
     */
    loadImage(imagePath) {
        this._worker$.next(imagePath);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._worker$.complete();
    }
}
LazyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lazyImage]'
            },] },
];
/** @nocollapse */
LazyDirective.ctorParameters = () => [];
LazyDirective.propDecorators = {
    lazyImage: [{ type: Input, args: ['lazyImage',] }],
    loaded: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LazyDirective.prototype._worker$;
    /** @type {?} */
    LazyDirective.prototype.loaded;
    /** @type {?} */
    LazyDirective.prototype.error;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2xhenkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWEsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS2hELE1BQU07SUFhSjt3QkFWbUIsSUFBSSxPQUFPLEVBQUU7c0JBT2IsSUFBSSxZQUFZLEVBQVU7cUJBQzNCLElBQUksWUFBWSxFQUFTOztRQUd6QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixTQUFTLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7O1lBRzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztZQUd2QixHQUFHLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQzs7WUFHbkIsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQzdDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2FBQ3RDLENBQUMsQ0FDSCxDQUFDOztZQUdGLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLDBCQUEwQixRQUFRLGVBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBQzlFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hCLENBQUMsQ0FDSCxDQUFDO1lBRUYsT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3BDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ2Y7Ozs7O0lBdENELElBQ0ksU0FBUyxDQUFDLFNBQWlCO1FBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDM0I7Ozs7O0lBcUNELFNBQVMsQ0FBQyxTQUFpQjtRQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUMvQjs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzFCOzs7WUF0REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2FBQ3hCOzs7Ozt3QkFNRSxLQUFLLFNBQUMsV0FBVztxQkFLakIsTUFBTTtvQkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCB6aXAsIGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2xhenlJbWFnZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMYXp5RGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuXHJcbiAgLy8gTGF6eSBsb2FkIHdvcmtlclxyXG4gIHByaXZhdGUgX3dvcmtlciQgPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICBASW5wdXQoJ2xhenlJbWFnZScpXHJcbiAgc2V0IGxhenlJbWFnZShpbWFnZVBhdGg6IHN0cmluZykge1xyXG4gICAgdGhpcy5sb2FkSW1hZ2UoaW1hZ2VQYXRoKTtcclxuICB9XHJcblxyXG4gIEBPdXRwdXQoKSBsb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yPigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgIHRoaXMuX3dvcmtlciQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChpbWFnZVNyYzogc3RyaW5nKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIEltYWdlIGlzIGxvYWRpbmdcclxuICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KG51bGwpO1xyXG5cclxuICAgICAgICAvLyBTdG9wIHByZXZpb3VzbHkgbG9hZGluZ1xyXG4gICAgICAgIGltZy5zcmMgPSBpbWFnZVNyYztcclxuXHJcbiAgICAgICAgLy8gSW1hZ2UgbG9hZCBzdWNjZXNzXHJcbiAgICAgICAgY29uc3QgbG9hZFN1Y2Nlc3MgPSBmcm9tRXZlbnQoaW1nLCAnbG9hZCcpLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KGB1cmwoJHtpbWFnZVNyY30pYCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEltYWdlIGxvYWQgZmFpbGVkXHJcbiAgICAgICAgY29uc3QgbG9hZEVycm9yID0gZnJvbUV2ZW50KGltZywgJ2Vycm9yJykucGlwZShcclxuICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChuZXcgRXJyb3IoYFtsYXp5SW1hZ2VdOiBUaGUgaW1hZ2UgJHtpbWFnZVNyY30gZGlkIG5vdCBsb2FkYCkpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KG51bGwpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gemlwKGxvYWRTdWNjZXNzLCBsb2FkRXJyb3IpO1xyXG4gICAgICB9KVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIGxvYWRJbWFnZShpbWFnZVBhdGg6IHN0cmluZykge1xyXG4gICAgdGhpcy5fd29ya2VyJC5uZXh0KGltYWdlUGF0aCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX3dvcmtlciQuY29tcGxldGUoKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==