/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { GalleryRef } from './gallery-ref';
import { GALLERY_CONFIG } from '../utils/gallery.token';
import { defaultConfig } from '../utils/gallery.default';
import * as i0 from "@angular/core";
import * as i1 from "../utils/gallery.token";
export class Gallery {
    /**
     * @param {?} config
     */
    constructor(config) {
        /**
         * Store gallery instances
         */
        this._instances = new Map();
        this.config = Object.assign({}, defaultConfig, config);
    }
    /**
     * Get or create gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    ref(id = 'root', config) {
        if (this._instances.has(id)) {
            /** @type {?} */
            const galleryRef = this._instances.get(id);
            if (config) {
                galleryRef.setConfig(Object.assign({}, this.config, config));
            }
            return galleryRef;
        }
        else {
            return this._instances.set(id, new GalleryRef(Object.assign({}, this.config, config), this.deleteInstance(id))).get(id);
        }
    }
    /**
     * Destroy all gallery instances
     * @return {?}
     */
    destroyAll() {
        this._instances.forEach((ref) => ref.destroy());
    }
    /**
     * Reset all gallery instances
     * @return {?}
     */
    resetAll() {
        this._instances.forEach((ref) => ref.reset());
    }
    /**
     * A destroyer function for each gallery instance
     * @param {?} id
     * @return {?}
     */
    deleteInstance(id) {
        return () => {
            if (this._instances.has(id)) {
                this._instances.delete(id);
            }
        };
    }
}
Gallery.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
Gallery.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [GALLERY_CONFIG,] }] }
];
/** @nocollapse */ Gallery.ngInjectableDef = i0.defineInjectable({ factory: function Gallery_Factory() { return new Gallery(i0.inject(i1.GALLERY_CONFIG)); }, token: Gallery, providedIn: "root" });
if (false) {
    /**
     * Store gallery instances
     * @type {?}
     */
    Gallery.prototype._instances;
    /**
     * Global config
     * @type {?}
     */
    Gallery.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZ2FsbGVyeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQU16RCxNQUFNOzs7O0lBUUosWUFBb0MsTUFBcUI7Ozs7MEJBTDNCLElBQUksR0FBRyxFQUFzQjtRQU16RCxJQUFJLENBQUMsTUFBTSxxQkFBTyxhQUFhLEVBQUssTUFBTSxDQUFDLENBQUM7S0FDN0M7Ozs7Ozs7SUFPRCxHQUFHLENBQUMsRUFBRSxHQUFHLE1BQU0sRUFBRSxNQUFzQjtRQUNyQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFOztZQUMzQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzQyxJQUFJLE1BQU0sRUFBRTtnQkFDVixVQUFVLENBQUMsU0FBUyxtQkFBSyxJQUFJLENBQUMsTUFBTSxFQUFLLE1BQU0sRUFBRSxDQUFDO2FBQ25EO1lBQ0QsT0FBTyxVQUFVLENBQUM7U0FDbkI7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksVUFBVSxtQkFBSyxJQUFJLENBQUMsTUFBTSxFQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDOUc7S0FDRjs7Ozs7SUFLRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFlLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQzdEOzs7OztJQUtELFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQWUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDM0Q7Ozs7OztJQUtPLGNBQWMsQ0FBQyxFQUFVO1FBQy9CLE9BQU8sR0FBRyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDNUI7U0FDRixDQUFDOzs7O1lBdERMLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs0Q0FTYyxNQUFNLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgR2FsbGVyeVJlZiB9IGZyb20gJy4vZ2FsbGVyeS1yZWYnO1xyXG5pbXBvcnQgeyBHQUxMRVJZX0NPTkZJRyB9IGZyb20gJy4uL3V0aWxzL2dhbGxlcnkudG9rZW4nO1xyXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi4vdXRpbHMvZ2FsbGVyeS5kZWZhdWx0JztcclxuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5IHtcclxuXHJcbiAgLyoqIFN0b3JlIGdhbGxlcnkgaW5zdGFuY2VzICovXHJcbiAgcHJpdmF0ZSByZWFkb25seSBfaW5zdGFuY2VzID0gbmV3IE1hcDxzdHJpbmcsIEdhbGxlcnlSZWY+KCk7XHJcblxyXG4gIC8qKiBHbG9iYWwgY29uZmlnICovXHJcbiAgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEdBTExFUllfQ09ORklHKSBjb25maWc6IEdhbGxlcnlDb25maWcpIHtcclxuICAgIHRoaXMuY29uZmlnID0gey4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZ307XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgb3IgY3JlYXRlIGdhbGxlcnkgYnkgSURcclxuICAgKiBAcGFyYW0gaWRcclxuICAgKiBAcGFyYW0gY29uZmlnXHJcbiAgICovXHJcbiAgcmVmKGlkID0gJ3Jvb3QnLCBjb25maWc/OiBHYWxsZXJ5Q29uZmlnKTogR2FsbGVyeVJlZiB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2VzLmhhcyhpZCkpIHtcclxuICAgICAgY29uc3QgZ2FsbGVyeVJlZiA9IHRoaXMuX2luc3RhbmNlcy5nZXQoaWQpO1xyXG4gICAgICBpZiAoY29uZmlnKSB7XHJcbiAgICAgICAgZ2FsbGVyeVJlZi5zZXRDb25maWcoey4uLnRoaXMuY29uZmlnLCAuLi5jb25maWd9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZ2FsbGVyeVJlZjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXMuc2V0KGlkLCBuZXcgR2FsbGVyeVJlZih7Li4udGhpcy5jb25maWcsIC4uLmNvbmZpZ30sIHRoaXMuZGVsZXRlSW5zdGFuY2UoaWQpKSkuZ2V0KGlkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kgYWxsIGdhbGxlcnkgaW5zdGFuY2VzXHJcbiAgICovXHJcbiAgZGVzdHJveUFsbCgpIHtcclxuICAgIHRoaXMuX2luc3RhbmNlcy5mb3JFYWNoKChyZWY6IEdhbGxlcnlSZWYpID0+IHJlZi5kZXN0cm95KCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXQgYWxsIGdhbGxlcnkgaW5zdGFuY2VzXHJcbiAgICovXHJcbiAgcmVzZXRBbGwoKSB7XHJcbiAgICB0aGlzLl9pbnN0YW5jZXMuZm9yRWFjaCgocmVmOiBHYWxsZXJ5UmVmKSA9PiByZWYucmVzZXQoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBIGRlc3Ryb3llciBmdW5jdGlvbiBmb3IgZWFjaCBnYWxsZXJ5IGluc3RhbmNlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBkZWxldGVJbnN0YW5jZShpZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5faW5zdGFuY2VzLmhhcyhpZCkpIHtcclxuICAgICAgICB0aGlzLl9pbnN0YW5jZXMuZGVsZXRlKGlkKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==