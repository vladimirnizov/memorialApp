/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class GalleryImageComponent {
    /**
     * @param {?} _sanitizer
     */
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get imageLoaded() {
        return !!this.loadedImage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.loadingIcon) {
            this.loadingSvg = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
    }
}
GalleryImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-container [lazyImage]="src" (loaded)="loadedImage = $event" (error)="error.emit($event)">
      <div *ngIf="loadedImage; else loading"
           class="g-image-item"
           [style.backgroundImage]="loadedImage"></div>
    </ng-container>

    <ng-template #loading>
      <i *ngIf="loadingSvg; else thumbLoading" class="g-loading" [innerHTML]="loadingSvg"></i>
      <ng-template #thumbLoading>
        <div class="g-thumb-loading"></div>
      </ng-template>
    </ng-template>
  `
            },] },
];
/** @nocollapse */
GalleryImageComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
GalleryImageComponent.propDecorators = {
    src: [{ type: Input }],
    loadingIcon: [{ type: Input }],
    error: [{ type: Output }],
    imageLoaded: [{ type: HostBinding, args: ['class.g-image-loaded',] }]
};
if (false) {
    /** @type {?} */
    GalleryImageComponent.prototype.loadedImage;
    /** @type {?} */
    GalleryImageComponent.prototype.loadingSvg;
    /** @type {?} */
    GalleryImageComponent.prototype.src;
    /** @type {?} */
    GalleryImageComponent.prototype.loadingIcon;
    /**
     * Stream that emits when an error occurs
     * @type {?}
     */
    GalleryImageComponent.prototype.error;
    /** @type {?} */
    GalleryImageComponent.prototype._sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RlbXBsYXRlcy9nYWxsZXJ5LWltYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBb0JuRSxNQUFNOzs7O0lBZUosWUFBb0IsVUFBd0I7UUFBeEIsZUFBVSxHQUFWLFVBQVUsQ0FBYzs7OztxQkFOMUIsSUFBSSxZQUFZLEVBQVM7S0FPMUM7Ozs7SUFMRCxJQUF5QyxXQUFXO1FBQ2xELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDM0I7Ozs7SUFLRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDN0U7S0FDRjs7O1lBeENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7OztHQWFUO2FBQ0Y7Ozs7WUFuQlEsWUFBWTs7O2tCQXlCbEIsS0FBSzswQkFDTCxLQUFLO29CQUdMLE1BQU07MEJBRU4sV0FBVyxTQUFDLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktaW1hZ2UnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGFpbmVyIFtsYXp5SW1hZ2VdPVwic3JjXCIgKGxvYWRlZCk9XCJsb2FkZWRJbWFnZSA9ICRldmVudFwiIChlcnJvcik9XCJlcnJvci5lbWl0KCRldmVudClcIj5cclxuICAgICAgPGRpdiAqbmdJZj1cImxvYWRlZEltYWdlOyBlbHNlIGxvYWRpbmdcIlxyXG4gICAgICAgICAgIGNsYXNzPVwiZy1pbWFnZS1pdGVtXCJcclxuICAgICAgICAgICBbc3R5bGUuYmFja2dyb3VuZEltYWdlXT1cImxvYWRlZEltYWdlXCI+PC9kaXY+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICA8bmctdGVtcGxhdGUgI2xvYWRpbmc+XHJcbiAgICAgIDxpICpuZ0lmPVwibG9hZGluZ1N2ZzsgZWxzZSB0aHVtYkxvYWRpbmdcIiBjbGFzcz1cImctbG9hZGluZ1wiIFtpbm5lckhUTUxdPVwibG9hZGluZ1N2Z1wiPjwvaT5cclxuICAgICAgPG5nLXRlbXBsYXRlICN0aHVtYkxvYWRpbmc+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImctdGh1bWItbG9hZGluZ1wiPjwvZGl2PlxyXG4gICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgPC9uZy10ZW1wbGF0ZT5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5SW1hZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBsb2FkZWRJbWFnZTogc3RyaW5nO1xyXG4gIGxvYWRpbmdTdmc6IFNhZmVIdG1sO1xyXG5cclxuICBASW5wdXQoKSBzcmM6IHN0cmluZztcclxuICBASW5wdXQoKSBsb2FkaW5nSWNvbjogc3RyaW5nO1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yPigpO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmctaW1hZ2UtbG9hZGVkJykgZ2V0IGltYWdlTG9hZGVkKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5sb2FkZWRJbWFnZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3Nhbml0aXplcjogRG9tU2FuaXRpemVyKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICh0aGlzLmxvYWRpbmdJY29uKSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1N2ZyA9IHRoaXMuX3Nhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLmxvYWRpbmdJY29uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==