import { __assign, __spread } from 'tslib';
import { BehaviorSubject, Subject, of, EMPTY, Subscription, fromEvent, zip } from 'rxjs';
import { delay, filter, switchMap, tap, map, debounceTime } from 'rxjs/operators';
import { InjectionToken, Inject, Injectable, Component, Input, HostBinding, ChangeDetectionStrategy, EventEmitter, Output, ViewChild, ElementRef, Directive, Renderer2, NgModule, NgZone, PLATFORM_ID, defineInjectable, inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { isPlatformBrowser, CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
var GalleryAction = {
    INITIALIZED: 'initialized',
    ITEMS_CHANGED: 'itemsChanged',
    INDEX_CHANGED: 'indexChanged',
    PLAY: 'play',
    STOP: 'stop',
};
/** @enum {string} */
var ImageSize = {
    Cover: 'cover',
    Contain: 'contain',
};
/** @enum {string} */
var LoadingStrategy = {
    Preload: 'preload',
    Lazy: 'lazy',
    Default: 'default',
};
/** @enum {string} */
var ThumbnailsPosition = {
    Top: 'top',
    Left: 'left',
    Right: 'right',
    Bottom: 'bottom',
};
/** @enum {string} */
var ThumbnailsMode = {
    Free: 'free',
    Strict: 'strict',
};
/** @enum {string} */
var SlidingDirection = {
    Horizontal: 'horizontal',
    Vertical: 'vertical',
};
/** @enum {string} */
var GalleryItemType = {
    Image: 'image',
    Video: 'video',
    Youtube: 'youtube',
    Iframe: 'iframe',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** *
 * Initial state
  @type {?} */
var defaultState = {
    action: GalleryAction.INITIALIZED,
    isPlaying: false,
    hasNext: false,
    hasPrev: false,
    currIndex: 0,
    items: []
};
/** @type {?} */
var defaultConfig = {
    nav: true,
    loop: true,
    zoomOut: 0,
    dots: false,
    thumb: true,
    counter: true,
    gestures: true,
    autoPlay: false,
    thumbWidth: 120,
    thumbHeight: 90,
    panSensitivity: 25,
    disableThumb: false,
    playerInterval: 3000,
    imageSize: ImageSize.Contain,
    thumbMode: ThumbnailsMode.Strict,
    thumbPosition: ThumbnailsPosition.Bottom,
    loadingStrategy: LoadingStrategy.Default,
    slidingDirection: SlidingDirection.Horizontal,
    navIcon: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg width=\"512px\" height=\"512px\" enable-background=\"new 0 0 240.823 240.823\" version=\"1.1\" viewBox=\"0 0 240.823 240.823\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m183.19 111.82l-108.3-108.26c-4.752-4.74-12.451-4.74-17.215 0-4.752 4.74-4.752 12.439 0 17.179l99.707 99.671-99.695 99.671c-4.752 4.74-4.752 12.439 0 17.191 4.752 4.74 12.463 4.74 17.215 0l108.3-108.26c4.68-4.691 4.68-12.511-0.012-17.19z\" fill=\"#fff\"/></svg>",
    loadingIcon: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg stroke=\"#fff\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\"><circle cx=\"22\" cy=\"22\" r=\"1\"><animate attributeName=\"r\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/><animate attributeName=\"stroke-opacity\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/></circle><circle cx=\"22\" cy=\"22\" r=\"1\"><animate attributeName=\"r\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/><animate attributeName=\"stroke-opacity\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/></circle></g></svg>"
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ImageItem = /** @class */ (function () {
    function ImageItem(data) {
        this.type = GalleryItemType.Image;
        this.data = data;
    }
    return ImageItem;
}());
var VideoItem = /** @class */ (function () {
    function VideoItem(data) {
        this.type = GalleryItemType.Video;
        this.data = data;
    }
    return VideoItem;
}());
var IframeItem = /** @class */ (function () {
    function IframeItem(data) {
        this.type = GalleryItemType.Iframe;
        this.data = data;
    }
    return IframeItem;
}());
var YoutubeItem = /** @class */ (function () {
    function YoutubeItem(data) {
        this.type = GalleryItemType.Youtube;
        this.data = {
            src: "//youtube.com/embed/" + data.src + "?wmode=transparent",
            thumb: data.thumb ? data.thumb : "//img.youtube.com/vi/" + data.src + "/default.jpg"
        };
    }
    return YoutubeItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var filterActions = function (actions) {
    return filter(function (state) { return actions.indexOf(state.action) > -1; });
};
var GalleryRef = /** @class */ (function () {
    function GalleryRef(config, deleteInstance) {
        this.deleteInstance = deleteInstance;
        /**
         * Stream that emits on item click
         */
        this.itemClick = new Subject();
        /**
         * Stream that emits on thumbnail click
         */
        this.thumbClick = new Subject();
        /**
         * Stream that emits on an error occurs
         */
        this.error = new Subject();
        this._state = new BehaviorSubject(defaultState);
        this._config = new BehaviorSubject(config);
        this.state = this._state.asObservable();
        this.config = this._config.asObservable();
    }
    Object.defineProperty(GalleryRef.prototype, "initialized", {
        /** Stream that emits when gallery is initialized/reset */
        get: /**
         * Stream that emits when gallery is initialized/reset
         * @return {?}
         */
        function () {
            return this.state.pipe(filterActions([GalleryAction.INITIALIZED]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryRef.prototype, "itemsChanged", {
        /** Stream that emits when items is changed (items loaded, item added, item removed) */
        get: /**
         * Stream that emits when items is changed (items loaded, item added, item removed)
         * @return {?}
         */
        function () {
            return this.state.pipe(filterActions([GalleryAction.ITEMS_CHANGED]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryRef.prototype, "indexChanged", {
        /** Stream that emits when current item is changed */
        get: /**
         * Stream that emits when current item is changed
         * @return {?}
         */
        function () {
            return this.state.pipe(filterActions([GalleryAction.INDEX_CHANGED]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryRef.prototype, "playingChanged", {
        /** Stream that emits when the player should start or stop */
        get: /**
         * Stream that emits when the player should start or stop
         * @return {?}
         */
        function () {
            return this.state.pipe(filterActions([GalleryAction.PLAY, GalleryAction.STOP]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryRef.prototype, "playerActions", {
        get: /**
         * Stream that emits when the player should start or stop
         * @return {?}
         */
        function () {
            return this.state.pipe(filterActions([GalleryAction.PLAY, GalleryAction.STOP, GalleryAction.INDEX_CHANGED]));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activate player actions listener
     */
    /**
     * Activate player actions listener
     * @return {?}
     */
    GalleryRef.prototype.activatePlayer = /**
     * Activate player actions listener
     * @return {?}
     */
    function () {
        var _this = this;
        return this.playerActions.pipe(switchMap(function (e) {
            return e.isPlaying ? of({}).pipe(delay(_this._config.value.playerInterval), tap(function () { return _this.next(); })) : EMPTY;
        }));
    };
    /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    GalleryRef.prototype.setState = /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this._state.next(__assign({}, this._state.value, state));
    };
    /**
     * Set gallery config
     * @param config
     */
    /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    GalleryRef.prototype.setConfig = /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this._config.next(__assign({}, this._config.value, config));
    };
    /** Add gallery item
     * @param item - Gallery item object
     * @param active - Set the new item as current slide
     */
    /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    GalleryRef.prototype.add = /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    function (item, active) {
        /** @type {?} */
        var items = __spread(this._state.value.items, [item]);
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            currIndex: active ? items.length - 1 : this._state.value.currIndex
        });
    };
    /**
     * Add image item
     * @param data
     * @param active
     */
    /**
     * Add image item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryRef.prototype.addImage = /**
     * Add image item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new ImageItem(data), active);
    };
    /**
     * Add video item
     * @param data
     * @param active
     */
    /**
     * Add video item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryRef.prototype.addVideo = /**
     * Add video item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new VideoItem(data), active);
    };
    /**
     * Add iframe item
     * @param data
     * @param active
     */
    /**
     * Add iframe item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryRef.prototype.addIframe = /**
     * Add iframe item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new IframeItem(data), active);
    };
    /**
     * Add youtube item
     * @param data
     * @param active
     */
    /**
     * Add youtube item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryRef.prototype.addYoutube = /**
     * Add youtube item
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new YoutubeItem(data), active);
    };
    /** Remove gallery item
     * @param i - Item index
     */
    /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    GalleryRef.prototype.remove = /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    function (i) {
        /** @type {?} */
        var items = __spread(this._state.value.items.slice(0, i), this._state.value.items.slice(i + 1, this._state.value.items.length));
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            hasPrev: i > 0
        });
    };
    /**
     * Load items and reset the state
     * @param items - Gallery images data
     */
    /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    GalleryRef.prototype.load = /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    function (items) {
        if (items) {
            this.setState({
                action: GalleryAction.ITEMS_CHANGED,
                items: items,
                hasNext: items.length > 1,
                hasPrev: false
            });
        }
    };
    /**
     * Set active item
     * @param i - Active Index
     */
    /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    GalleryRef.prototype.set = /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    function (i) {
        if (i !== this._state.value.currIndex) {
            this.setState({
                action: GalleryAction.INDEX_CHANGED,
                currIndex: i,
                hasNext: i < this._state.value.items.length - 1,
                hasPrev: i > 0
            });
        }
    };
    /**
     * Next item
     */
    /**
     * Next item
     * @return {?}
     */
    GalleryRef.prototype.next = /**
     * Next item
     * @return {?}
     */
    function () {
        if (this._state.value.hasNext) {
            this.set(this._state.value.currIndex + 1);
        }
        else if (this._config.value.loop) {
            this.set(0);
        }
    };
    /**
     * Prev item
     */
    /**
     * Prev item
     * @return {?}
     */
    GalleryRef.prototype.prev = /**
     * Prev item
     * @return {?}
     */
    function () {
        if (this._state.value.hasPrev) {
            this.set(this._state.value.currIndex - 1);
        }
        else if (this._config.value.loop) {
            this.set(this._state.value.items.length - 1);
        }
    };
    /**
     * Start gallery player
     * @param interval
     */
    /**
     * Start gallery player
     * @param {?=} interval
     * @return {?}
     */
    GalleryRef.prototype.play = /**
     * Start gallery player
     * @param {?=} interval
     * @return {?}
     */
    function (interval) {
        if (interval) {
            this.setConfig({ playerInterval: interval });
        }
        this.setState({ action: GalleryAction.PLAY, isPlaying: true });
    };
    /**
     * Stop gallery player
     */
    /**
     * Stop gallery player
     * @return {?}
     */
    GalleryRef.prototype.stop = /**
     * Stop gallery player
     * @return {?}
     */
    function () {
        this.setState({ action: GalleryAction.STOP, isPlaying: false });
    };
    /**
     * Reset gallery to initial state
     */
    /**
     * Reset gallery to initial state
     * @return {?}
     */
    GalleryRef.prototype.reset = /**
     * Reset gallery to initial state
     * @return {?}
     */
    function () {
        this.setState(defaultState);
    };
    /**
     * Destroy gallery
     */
    /**
     * Destroy gallery
     * @return {?}
     */
    GalleryRef.prototype.destroy = /**
     * Destroy gallery
     * @return {?}
     */
    function () {
        this._state.complete();
        this._config.complete();
        this.itemClick.complete();
        this.thumbClick.complete();
        this.deleteInstance();
    };
    return GalleryRef;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var GALLERY_CONFIG = new InjectionToken('galleryConfig');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Gallery = /** @class */ (function () {
    function Gallery(config) {
        /**
         * Store gallery instances
         */
        this._instances = new Map();
        this.config = __assign({}, defaultConfig, config);
    }
    /**
     * Get or create gallery by ID
     * @param id
     * @param config
     */
    /**
     * Get or create gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    Gallery.prototype.ref = /**
     * Get or create gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances.has(id)) {
            /** @type {?} */
            var galleryRef = this._instances.get(id);
            if (config) {
                galleryRef.setConfig(__assign({}, this.config, config));
            }
            return galleryRef;
        }
        else {
            return this._instances.set(id, new GalleryRef(__assign({}, this.config, config), this.deleteInstance(id))).get(id);
        }
    };
    /**
     * Destroy all gallery instances
     */
    /**
     * Destroy all gallery instances
     * @return {?}
     */
    Gallery.prototype.destroyAll = /**
     * Destroy all gallery instances
     * @return {?}
     */
    function () {
        this._instances.forEach(function (ref) { return ref.destroy(); });
    };
    /**
     * Reset all gallery instances
     */
    /**
     * Reset all gallery instances
     * @return {?}
     */
    Gallery.prototype.resetAll = /**
     * Reset all gallery instances
     * @return {?}
     */
    function () {
        this._instances.forEach(function (ref) { return ref.reset(); });
    };
    /**
     * A destroyer function for each gallery instance
     * @param {?} id
     * @return {?}
     */
    Gallery.prototype.deleteInstance = /**
     * A destroyer function for each gallery instance
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return function () {
            if (_this._instances.has(id)) {
                _this._instances.delete(id);
            }
        };
    };
    Gallery.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    Gallery.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [GALLERY_CONFIG,] }] }
    ]; };
    /** @nocollapse */ Gallery.ngInjectableDef = defineInjectable({ factory: function Gallery_Factory() { return new Gallery(inject(GALLERY_CONFIG)); }, token: Gallery, providedIn: "root" });
    return Gallery;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryComponent = /** @class */ (function () {
    function GalleryComponent(_gallery) {
        this._gallery = _gallery;
        this.nav = this._gallery.config.nav;
        this.dots = this._gallery.config.dots;
        this.loop = this._gallery.config.loop;
        this.thumb = this._gallery.config.thumb;
        this.zoomOut = this._gallery.config.zoomOut;
        this.counter = this._gallery.config.counter;
        this.autoPlay = this._gallery.config.autoPlay;
        this.gestures = this._gallery.config.gestures;
        this.thumbWidth = this._gallery.config.thumbWidth;
        this.thumbHeight = this._gallery.config.thumbHeight;
        this.disableThumb = this._gallery.config.disableThumb;
        this.panSensitivity = this._gallery.config.panSensitivity;
        this.playerInterval = this._gallery.config.playerInterval;
        this.itemTemplate = this._gallery.config.itemTemplate;
        this.thumbTemplate = this._gallery.config.thumbTemplate;
        this.thumbMode = this._gallery.config.thumbMode;
        this.imageSize = this._gallery.config.imageSize;
        this.slidingDirection = this._gallery.config.slidingDirection;
        this.loadingStrategy = this._gallery.config.loadingStrategy;
        this.thumbPosition = this._gallery.config.thumbPosition;
        /**
         * Destroy gallery ref on component destroy event
         */
        this.destroyRef = true;
        /**
         * Skip initializing the config with components inputs (Lightbox mode)
         */
        this.skipInitConfig = false;
        this.itemClick = new EventEmitter();
        this.thumbClick = new EventEmitter();
        this.playingChange = new EventEmitter();
        this.indexChange = new EventEmitter();
        this.itemsChange = new EventEmitter();
        this.error = new EventEmitter();
        this._itemClick$ = Subscription.EMPTY;
        this._thumbClick$ = Subscription.EMPTY;
        this._itemChange$ = Subscription.EMPTY;
        this._indexChange$ = Subscription.EMPTY;
        this._playingChange$ = Subscription.EMPTY;
        this._playerListener$ = Subscription.EMPTY;
    }
    /**
     * @return {?}
     */
    GalleryComponent.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return {
            nav: this.nav,
            dots: this.dots,
            loop: this.loop,
            thumb: this.thumb,
            zoomOut: this.zoomOut,
            counter: this.counter,
            autoPlay: this.autoPlay,
            gestures: this.gestures,
            imageSize: this.imageSize,
            thumbMode: this.thumbMode,
            thumbWidth: this.thumbWidth,
            thumbHeight: this.thumbHeight,
            disableThumb: this.disableThumb,
            itemTemplate: this.itemTemplate,
            thumbTemplate: this.thumbTemplate,
            thumbPosition: this.thumbPosition,
            panSensitivity: this.panSensitivity,
            playerInterval: this.playerInterval,
            loadingStrategy: this.loadingStrategy,
            slidingDirection: this.slidingDirection,
        };
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.onAction = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        switch (i) {
            case 'next':
                this.galleryRef.next();
                break;
            case 'prev':
                this.galleryRef.prev();
                break;
            default:
                this.galleryRef.set(/** @type {?} */ (i));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    GalleryComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.galleryRef) {
            this.galleryRef.setConfig(this.getConfig());
            if (changes["items"] && changes["items"].currentValue !== changes["items"].previousValue) {
                this.load(this.items);
            }
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Get gallery instance by id
        if (this.skipInitConfig) {
            this.galleryRef = this._gallery.ref(this.id);
        }
        else {
            this.galleryRef = this._gallery.ref(this.id, this.getConfig());
        }
        // Load gallery items
        this.load(this.items);
        // Activate player listener
        this._playerListener$ = this.galleryRef.activatePlayer().subscribe();
        // Subscribes to events on demand
        if (this.indexChange.observers.length) {
            this._indexChange$ = this.galleryRef.indexChanged.subscribe(function (state) { return _this.indexChange.emit(state); });
        }
        if (this.itemsChange.observers.length) {
            this._itemChange$ = this.galleryRef.itemsChanged.subscribe(function (state) { return _this.itemsChange.emit(state); });
        }
        if (this.playingChange.observers.length) {
            this._playingChange$ = this.galleryRef.playingChanged.subscribe(function (state) { return _this.playingChange.emit(state); });
        }
        // Start playing if auto-play is set to true
        if (this.autoPlay) {
            this.play();
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._itemClick$.unsubscribe();
        this._thumbClick$.unsubscribe();
        this._itemChange$.unsubscribe();
        this._indexChange$.unsubscribe();
        this._playingChange$.unsubscribe();
        this._playerListener$.unsubscribe();
        if (this.destroyRef) {
            this.galleryRef.destroy();
        }
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.onItemClick = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.itemClick.emit(i);
        this.galleryRef.itemClick.next(i);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.onThumbClick = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.set(i);
        this.thumbClick.emit(i);
        this.galleryRef.thumbClick.next(i);
    };
    /**
     * @param {?} err
     * @return {?}
     */
    GalleryComponent.prototype.onError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        this.error.emit(err);
        this.galleryRef.error.next(err);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    GalleryComponent.prototype.load = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.galleryRef.load(items);
    };
    /**
     * @param {?} item
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.add = /**
     * @param {?} item
     * @param {?=} active
     * @return {?}
     */
    function (item, active) {
        this.galleryRef.add(item, active);
    };
    /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.addImage = /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new ImageItem(data), active);
    };
    /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.addVideo = /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new VideoItem(data), active);
    };
    /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.addIframe = /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new IframeItem(data), active);
    };
    /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.addYoutube = /**
     * @param {?} data
     * @param {?=} active
     * @return {?}
     */
    function (data, active) {
        this.add(new YoutubeItem(data), active);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.remove = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.remove(i);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.galleryRef.next();
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.galleryRef.prev();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.set = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.set(i);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.galleryRef.reset();
    };
    /**
     * @param {?=} interval
     * @return {?}
     */
    GalleryComponent.prototype.play = /**
     * @param {?=} interval
     * @return {?}
     */
    function (interval) {
        this.galleryRef.play(interval);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.stop = /**
     * @return {?}
     */
    function () {
        this.galleryRef.stop();
    };
    GalleryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["::ng-deep gallery-dots{display:flex;justify-content:center;align-items:center;position:absolute;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}::ng-deep .g-dot{cursor:pointer;display:flex;justify-content:center;z-index:20}::ng-deep .g-dot-active .g-dot-inner{opacity:1;-webkit-transform:scale(1.6);transform:scale(1.6)}::ng-deep .g-dot-inner{background-color:#fff;margin:20px 15px;opacity:.6;width:10px;height:5px;border-radius:1px;box-shadow:0 0 1px #000;transition:all ease .2s}::ng-deep .g-nav-next,::ng-deep .g-nav-prev{position:absolute;top:50%;width:30px;height:40px;cursor:pointer;z-index:999}::ng-deep .g-nav-next{right:.5em;-webkit-transform:translateY(-50%) perspective(1px);transform:translateY(-50%) perspective(1px)}::ng-deep .g-nav-prev{left:.5em;-webkit-transform:translateY(-50%) perspective(1px) scale(-1,-1);transform:translateY(-50%) perspective(1px) scale(-1,-1)}@media only screen and (max-width:480px){::ng-deep .g-nav-next{right:.2em}::ng-deep .g-nav-prev{left:.2em}}::ng-deep .g-items-container{height:100%}::ng-deep .g-slider{position:absolute;transition:-webkit-transform .4s cubic-bezier(.5,0,.5,1);transition:transform .4s cubic-bezier(.5,0,.5,1);transition:transform .4s cubic-bezier(.5,0,.5,1),-webkit-transform .4s cubic-bezier(.5,0,.5,1)}::ng-deep gallery-core[slidingDirection=horizontal] .g-slider{flex-direction:row}::ng-deep gallery-core[slidingDirection=vertical] .g-slider{flex-direction:column}::ng-deep gallery-thumbs{display:block;z-index:1;overflow:unset}::ng-deep .g-thumbs-container{position:relative;z-index:206;width:100%;height:100%;left:0;top:0;display:flex;overflow:unset}::ng-deep gallery-core[disableThumb=true] gallery-thumb{cursor:default}::ng-deep gallery-core[thumbPosition=bottom] gallery-thumbs .g-slider,::ng-deep gallery-core[thumbPosition=top] gallery-thumbs .g-slider{flex-direction:row;top:0;left:50%}::ng-deep gallery-core[thumbPosition=bottom] gallery-thumb,::ng-deep gallery-core[thumbPosition=top] gallery-thumb{padding:1px 0 1px 1px}::ng-deep gallery-core[thumbPosition=left] gallery-thumbs .g-slider,::ng-deep gallery-core[thumbPosition=right] gallery-thumbs .g-slider{flex-direction:column;top:50%;left:0}::ng-deep gallery-core[thumbPosition=left] gallery-thumb,::ng-deep gallery-core[thumbPosition=right] gallery-thumb{padding:0 1px 1px}::ng-deep gallery-core[thumbPosition=top]{flex-direction:column}::ng-deep gallery-core[thumbPosition=left]{flex-direction:row}::ng-deep gallery-core[thumbPosition=right]{flex-direction:row-reverse}::ng-deep gallery-core[thumbPosition=bottom]{flex-direction:column-reverse}::ng-deep .g-thumb-loading{position:relative;overflow:hidden;height:100%;background-color:#ced4da}::ng-deep .g-thumb-loading::before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:50%;z-index:1;width:500%;margin-left:-250%;-webkit-animation:.8s linear infinite phAnimation;animation:.8s linear infinite phAnimation;background:linear-gradient(to right,rgba(255,255,255,0) 46%,rgba(255,255,255,.35) 50%,rgba(255,255,255,0) 54%) 50% 50%}@-webkit-keyframes phAnimation{0%{-webkit-transform:translate3d(-30%,0,0);transform:translate3d(-30%,0,0)}100%{-webkit-transform:translate3d(30%,0,0);transform:translate3d(30%,0,0)}}@keyframes phAnimation{0%{-webkit-transform:translate3d(-30%,0,0);transform:translate3d(-30%,0,0)}100%{-webkit-transform:translate3d(30%,0,0);transform:translate3d(30%,0,0)}}::ng-deep .g-counter{z-index:50;position:absolute;left:50%;-webkit-transform:translateX(-50%) perspective(1px);transform:translateX(-50%) perspective(1px);bottom:0;font-size:10px;padding:4px 10px;color:#fff;background-color:rgba(0,0,0,.5);border-top-left-radius:4px;border-top-right-radius:4px}::ng-deep gallery[gallerize] gallery-item{cursor:pointer}::ng-deep gallery-item,::ng-deep gallery-thumb{position:relative;height:100%;width:100%;display:block;overflow:hidden}::ng-deep gallery-item{z-index:10}::ng-deep gallery-item video{position:absolute;width:100%;height:100%}::ng-deep gallery-item iframe{position:absolute;width:100%;height:100%}::ng-deep gallery-thumb{opacity:.5;cursor:pointer;transition:opacity .3s cubic-bezier(.5,0,.5,1)}::ng-deep gallery-thumb.g-active-thumb{opacity:1}::ng-deep .g-image-item{background-position:center center;background-repeat:no-repeat;background-size:cover;width:100%;height:100%}::ng-deep .g-template{position:absolute;z-index:10;left:0;top:0;right:0;bottom:0;color:#fff;display:flex;align-items:center;justify-content:center}::ng-deep .g-loading{position:absolute;-webkit-transform:translate3d(-50%,-50%,0);transform:translate3d(-50%,-50%,0);left:50%;top:50%;width:80px;height:80px}::ng-deep gallery-core[imageSize=contain] gallery-slider .g-image-item{background-size:contain}::ng-deep gallery{position:relative;z-index:1;overflow:hidden;display:block;height:500px;background-color:#000}::ng-deep gallery *{box-sizing:border-box}::ng-deep gallery,::ng-deep gallery-core{position:relative;overflow:hidden}::ng-deep .g-box,::ng-deep .g-slider,::ng-deep gallery-core{display:flex;height:100%;width:100%}::ng-deep gallery[fluid]{-webkit-transform:translateX(-50vw);transform:translateX(-50vw);width:100vw;left:50%}::ng-deep gallery[fluid][fluid=false]{-webkit-transform:none;transform:none;width:initial;left:initial}::ng-deep .g-no-transition{transition:unset!important}::ng-deep .g-box,::ng-deep gallery-slider{overflow:hidden;position:relative;display:flex;flex-direction:column;flex:1;order:1;height:100%}::ng-deep .g-btn-close svg,::ng-deep gallery-nav svg{width:100%;height:100%;-webkit-filter:drop-shadow(0 0 1px #000);filter:drop-shadow(0 0 1px #000);transition:opacity linear .2s;opacity:.6}::ng-deep .g-btn-close svg:hover,::ng-deep gallery-nav svg:hover{opacity:1}"],
                    template: "\n    <gallery-core [state]=\"galleryRef.state | async\"\n                  [config]=\"galleryRef.config | async\"\n                  (action)=\"onAction($event)\"\n                  (itemClick)=\"onItemClick($event)\"\n                  (thumbClick)=\"onThumbClick($event)\"\n                  (error)=\"onError($event)\"></gallery-core>\n    <ng-content></ng-content>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryComponent.ctorParameters = function () { return [
        { type: Gallery }
    ]; };
    GalleryComponent.propDecorators = {
        id: [{ type: Input }],
        items: [{ type: Input }],
        nav: [{ type: Input }],
        dots: [{ type: Input }],
        loop: [{ type: Input }],
        thumb: [{ type: Input }],
        zoomOut: [{ type: Input }],
        counter: [{ type: Input }],
        autoPlay: [{ type: Input }],
        gestures: [{ type: Input }],
        thumbWidth: [{ type: Input }],
        thumbHeight: [{ type: Input }],
        disableThumb: [{ type: Input }],
        panSensitivity: [{ type: Input }],
        playerInterval: [{ type: Input }],
        itemTemplate: [{ type: Input }],
        thumbTemplate: [{ type: Input }],
        thumbMode: [{ type: Input }],
        imageSize: [{ type: Input }],
        slidingDirection: [{ type: Input }],
        loadingStrategy: [{ type: Input }],
        thumbPosition: [{ type: Input }],
        destroyRef: [{ type: Input }],
        skipInitConfig: [{ type: Input }],
        itemClick: [{ type: Output }],
        thumbClick: [{ type: Output }],
        playingChange: [{ type: Output }],
        indexChange: [{ type: Output }],
        itemsChange: [{ type: Output }],
        error: [{ type: Output }]
    };
    return GalleryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryNavComponent = /** @class */ (function () {
    function GalleryNavComponent(_sanitizer) {
        this._sanitizer = _sanitizer;
        this.action = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GalleryNavComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.navIcon = this._sanitizer.bypassSecurityTrustHtml(this.config.navIcon);
    };
    GalleryNavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-nav',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <i *ngIf=\"config.loop || state.hasPrev\"\n       class=\"g-nav-prev\"\n       aria-label=\"Previous\"\n       (tapClick)=\"action.emit('prev')\"\n       [innerHtml]=\"navIcon\"></i>\n\n    <i *ngIf=\"config.loop || state.hasNext\"\n       class=\"g-nav-next\"\n       aria-label=\"Next\"\n       (tapClick)=\"action.emit('next')\"\n       [innerHtml]=\"navIcon\"></i>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryNavComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    GalleryNavComponent.propDecorators = {
        state: [{ type: Input }],
        config: [{ type: Input }],
        action: [{ type: Output }]
    };
    return GalleryNavComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryCoreComponent = /** @class */ (function () {
    function GalleryCoreComponent() {
        this.action = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.thumbClick = new EventEmitter();
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryCoreComponent.prototype, "thumbPosition", {
        /** Set thumbnails position */
        get: /**
         * Set thumbnails position
         * @return {?}
         */
        function () {
            return this.config.thumbPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "slidingDirection", {
        /** Set sliding direction */
        get: /**
         * Set sliding direction
         * @return {?}
         */
        function () {
            return this.config.slidingDirection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "disableThumb", {
        /** Disable thumbnails clicks */
        get: /**
         * Disable thumbnails clicks
         * @return {?}
         */
        function () {
            return this.config.disableThumb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "imageSize", {
        /** Set gallery image size */
        get: /**
         * Set gallery image size
         * @return {?}
         */
        function () {
            return this.config.imageSize;
        },
        enumerable: true,
        configurable: true
    });
    GalleryCoreComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-core',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <gallery-thumbs *ngIf=\"config.thumb\"\n                    [state]=\"state\"\n                    [config]=\"config\"\n                    (action)=\"action.emit($event)\"\n                    (thumbClick)=\"thumbClick.emit($event)\">\n    </gallery-thumbs>\n    <div class=\"g-box\">\n      <gallery-slider [state]=\"state\"\n                      [config]=\"config\"\n                      (action)=\"action.emit($event)\"\n                      (itemClick)=\"itemClick.emit($event)\"\n                      (error)=\"error.emit($event)\">\n\n        <gallery-nav *ngIf=\"config.nav && state.items.length > 1\"\n                     [state]=\"state\"\n                     [config]=\"config\"\n                     (action)=\"action.emit($event)\">\n        </gallery-nav>\n\n      </gallery-slider>\n\n      <gallery-dots *ngIf=\"config.dots\"\n                    [state]=\"state\"\n                    (action)=\"action.emit($event)\">\n      </gallery-dots>\n\n      <gallery-counter *ngIf=\"config.counter\"\n                       [state]=\"state\">\n      </gallery-counter>\n    </div>\n  "
                },] },
    ];
    GalleryCoreComponent.propDecorators = {
        state: [{ type: Input }],
        config: [{ type: Input }],
        action: [{ type: Output }],
        itemClick: [{ type: Output }],
        thumbClick: [{ type: Output }],
        error: [{ type: Output }],
        thumbPosition: [{ type: HostBinding, args: ['attr.thumbPosition',] }],
        slidingDirection: [{ type: HostBinding, args: ['attr.slidingDirection',] }],
        disableThumb: [{ type: HostBinding, args: ['attr.disableThumb',] }],
        imageSize: [{ type: HostBinding, args: ['attr.imageSize',] }]
    };
    return GalleryCoreComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryDotsComponent = /** @class */ (function () {
    function GalleryDotsComponent() {
        this.action = new EventEmitter();
    }
    GalleryDotsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-dots',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div class=\"g-dot\"\n         *ngFor=\"let item of state.items; let i = index\"\n         [class.g-dot-active]=\"i === state.currIndex\"\n         (tapClick)=\"action.emit(i)\">\n      <div class=\"g-dot-inner\"></div>\n    </div>\n  "
                },] },
    ];
    GalleryDotsComponent.propDecorators = {
        state: [{ type: Input }],
        action: [{ type: Output }]
    };
    return GalleryDotsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryThumbsComponent = /** @class */ (function () {
    function GalleryThumbsComponent(_el, _zone) {
        var _this = this;
        this._el = _el;
        this._zone = _zone;
        /**
         * Sliding worker
         */
        this._slidingWorker$ = new BehaviorSubject({ value: 0, active: false });
        /**
         * Current slider position in free sliding mode
         */
        this._freeModeCurrentOffset = 0;
        /**
         * Stream that emits when the active item should change
         */
        this.action = new EventEmitter();
        /**
         * Stream that emits when thumb is clicked
         */
        this.thumbClick = new EventEmitter();
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
        // Activate sliding worker
        this.sliderState$ = this._slidingWorker$.pipe(map(function (state) { return ({
            style: _this.getSliderStyles(state),
            active: state.active
        }); }));
    }
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // Refresh the slider
        this.updateSlider({ value: 0, active: false });
        this._freeModeCurrentOffset = 0;
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && !this.config.disableThumb && typeof Hammer !== 'undefined') {
            // Activate gestures
            this._hammer = new Hammer(this._el.nativeElement);
            this._hammer.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            this._zone.runOutsideAngular(function () {
                // Move the slider
                switch (_this.config.thumbMode) {
                    case ThumbnailsMode.Strict:
                        _this._hammer.on('pan', function (e) { return _this.strictMode(e); });
                        break;
                    case ThumbnailsMode.Free:
                        _this._hammer.on('pan', function (e) { return _this.freeMode(e); });
                }
            });
        }
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._hammer) {
            this._hammer.destroy();
        }
    };
    /**
     * Sliding strict mode
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.strictMode = /**
     * Sliding strict mode
     * @param {?} e
     * @return {?}
     */
    function (e) {
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Right:
            case ThumbnailsPosition.Left:
                this.updateSlider({ value: e.deltaY, active: true });
                if (e.isFinal) {
                    this.updateSlider({ value: 0, active: false });
                    this.verticalPan(e);
                }
                break;
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.updateSlider({ value: e.deltaX, active: true });
                if (e.isFinal) {
                    this.updateSlider({ value: 0, active: false });
                    this.horizontalPan(e);
                }
        }
    };
    /**
     * Sliding free mode
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.freeMode = /**
     * Sliding free mode
     * @param {?} e
     * @return {?}
     */
    function (e) {
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Right:
            case ThumbnailsPosition.Left:
                this.updateSlider({ value: this._freeModeCurrentOffset + e.deltaY, active: true });
                if (e.isFinal) {
                    if (this.minFreeScrollExceeded(e.deltaY, this.config.thumbWidth, this.config.thumbHeight)) {
                        this._freeModeCurrentOffset = -(this.state.items.length - 1 - this.state.currIndex) * this.config.thumbHeight;
                    }
                    else if (this.maxFreeScrollExceeded(e.deltaY, this.config.thumbHeight, this.config.thumbWidth)) {
                        this._freeModeCurrentOffset = this.state.currIndex * this.config.thumbHeight;
                    }
                    else {
                        this._freeModeCurrentOffset += e.deltaY;
                    }
                    this.updateSlider({ value: this._freeModeCurrentOffset, active: false });
                }
                break;
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.updateSlider({ value: this._freeModeCurrentOffset + e.deltaX, active: true });
                if (e.isFinal) {
                    if (this.minFreeScrollExceeded(e.deltaX, this.config.thumbHeight, this.config.thumbWidth)) {
                        this._freeModeCurrentOffset = -(this.state.items.length - 1 - this.state.currIndex) * this.config.thumbWidth;
                    }
                    else if (this.maxFreeScrollExceeded(e.deltaX, this.config.thumbWidth, this.config.thumbHeight)) {
                        this._freeModeCurrentOffset = this.state.currIndex * this.config.thumbWidth;
                    }
                    else {
                        this._freeModeCurrentOffset += e.deltaX;
                    }
                    this.updateSlider({ value: this._freeModeCurrentOffset, active: false });
                }
        }
    };
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    GalleryThumbsComponent.prototype.minFreeScrollExceeded = /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (delta, width, height) {
        return -(this._freeModeCurrentOffset + delta - width / 2) > (this.state.items.length - this.state.currIndex) * height;
    };
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    GalleryThumbsComponent.prototype.maxFreeScrollExceeded = /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (delta, width, height) {
        return this._freeModeCurrentOffset + delta > (this.state.currIndex * width) + (height / 2);
    };
    /**
     * Convert sliding state to styles
     * @param {?} state
     * @return {?}
     */
    GalleryThumbsComponent.prototype.getSliderStyles = /**
     * Convert sliding state to styles
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var value;
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.width = '100%';
                this.height = this.config.thumbHeight + 'px';
                value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - state.value);
                return {
                    transform: "translate3d(" + value + "px, 0, 0)",
                    width: this.state.items.length * this.config.thumbWidth + 'px',
                    height: '100%'
                };
            case ThumbnailsPosition.Left:
            case ThumbnailsPosition.Right:
                this.width = this.config.thumbWidth + 'px';
                this.height = '100%';
                value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - state.value);
                return {
                    transform: "translate3d(0, " + value + "px, 0)",
                    width: '100%',
                    height: this.state.items.length * this.config.thumbHeight + 'px'
                };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityY > 0.3) {
            this.prev();
        }
        else if (e.velocityY < -0.3) {
            this.next();
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityX > 0.3) {
            this.prev();
        }
        else if (e.velocityX < -0.3) {
            this.next();
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.action.emit('next');
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.action.emit('prev');
    };
    /**
     * @param {?} state
     * @return {?}
     */
    GalleryThumbsComponent.prototype.updateSlider = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this._slidingWorker$.next(__assign({}, this._slidingWorker$.value, state));
    };
    GalleryThumbsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-thumbs',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"g-thumbs-container\">\n      <div class=\"g-slider\"\n           [class.g-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n\n        <gallery-thumb *ngFor=\"let item of state.items;let i = index\"\n                       [type]=\"item.type\"\n                       [config]=\"config\"\n                       [data]=\"item.data\"\n                       [currIndex]=\"state.currIndex\"\n                       [index]=\"i\"\n                       [tapClickDisabled]=\"config.disableThumb\"\n                       (tapClick)=\"thumbClick.emit(i)\"\n                       (error)=\"error.emit({itemIndex: i, error: $event})\"></gallery-thumb>\n      </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryThumbsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    GalleryThumbsComponent.propDecorators = {
        state: [{ type: Input }],
        config: [{ type: Input }],
        action: [{ type: Output }],
        thumbClick: [{ type: Output }],
        error: [{ type: Output }],
        height: [{ type: HostBinding, args: ['style.height',] }],
        width: [{ type: HostBinding, args: ['style.width',] }]
    };
    return GalleryThumbsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GallerySliderComponent = /** @class */ (function () {
    function GallerySliderComponent(_el, _zone, platform) {
        var _this = this;
        this._el = _el;
        this._zone = _zone;
        this.platform = platform;
        /**
         * Sliding worker
         */
        this._slidingWorker$ = new BehaviorSubject({ value: 0, active: false });
        /**
         * Stream that emits when the active item should change
         */
        this.action = new EventEmitter();
        /**
         * Stream that emits when item is clicked
         */
        this.itemClick = new EventEmitter();
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
        // Activate sliding worker
        this.sliderState$ = this._slidingWorker$.pipe(map(function (state) { return ({
            style: _this.getSliderStyles(state),
            active: state.active
        }); }));
    }
    Object.defineProperty(GallerySliderComponent.prototype, "zoom", {
        /** Item zoom */
        get: /**
         * Item zoom
         * @return {?}
         */
        function () {
            return { transform: "perspective(50px) translate3d(0, 0, " + -this.config.zoomOut + "px)" };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // Refresh the slider
        this.updateSlider({ value: 0, active: false });
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && typeof Hammer !== 'undefined') {
            // Activate gestures
            this._hammer = new Hammer(this._el.nativeElement);
            this._hammer.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            this._zone.runOutsideAngular(function () {
                // Move the slider
                // Move the slider
                _this._hammer.on('pan', function (e) {
                    switch (_this.config.slidingDirection) {
                        case SlidingDirection.Horizontal:
                            _this.updateSlider({ value: e.deltaX, active: true });
                            if (e.isFinal) {
                                _this.updateSlider({ value: 0, active: false });
                                _this.horizontalPan(e);
                            }
                            break;
                        case SlidingDirection.Vertical:
                            _this.updateSlider({ value: e.deltaY, active: true });
                            if (e.isFinal) {
                                _this.updateSlider({ value: 0, active: false });
                                _this.verticalPan(e);
                            }
                    }
                });
            });
        }
        // Rearrange slider on window resize
        if (isPlatformBrowser(this.platform)) {
            this._resizeSub$ = fromEvent(window, 'resize').pipe(debounceTime(200), tap(function () { return _this.updateSlider(_this._slidingWorker$.value); })).subscribe();
        }
        setTimeout(function () { return _this.updateSlider({ value: 0, active: false }); });
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._hammer) {
            this._hammer.destroy();
        }
        if (this._resizeSub$) {
            this._resizeSub$.unsubscribe();
        }
        this._slidingWorker$.complete();
    };
    /**
     * Convert sliding state to styles
     * @param {?} state
     * @return {?}
     */
    GallerySliderComponent.prototype.getSliderStyles = /**
     * Convert sliding state to styles
     * @param {?} state
     * @return {?}
     */
    function (state) {
        switch (this.config.slidingDirection) {
            case SlidingDirection.Horizontal:
                return {
                    transform: "translate3d(" + (-(this.state.currIndex * this._el.nativeElement.offsetWidth) + state.value) + "px, 0, 0)",
                    width: "calc(100% * " + this.state.items.length + ")",
                    height: '100%'
                };
            case SlidingDirection.Vertical:
                return {
                    transform: "translate3d(0, " + (-(this.state.currIndex * this._el.nativeElement.offsetHeight) + state.value) + "px, 0)",
                    width: '100%',
                    height: "calc(100% * " + this.state.items.length + ")",
                };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GallerySliderComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityY > 0.3) {
            this.prev();
        }
        else if (e.velocityY < -0.3) {
            this.next();
        }
        else {
            if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GallerySliderComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityX > 0.3) {
            this.prev();
        }
        else if (e.velocityX < -0.3) {
            this.next();
        }
        else {
            if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.action.emit('next');
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.action.emit('prev');
    };
    /**
     * @param {?} state
     * @return {?}
     */
    GallerySliderComponent.prototype.updateSlider = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this._slidingWorker$.next(__assign({}, this._slidingWorker$.value, state));
    };
    GallerySliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"g-items-container\"\n         [ngStyle]=\"zoom\">\n\n      <div class=\"g-slider\"\n           [class.g-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n\n        <gallery-item *ngFor=\"let item of state.items; let i = index\"\n                      [type]=\"item.type\"\n                      [config]=\"config\"\n                      [data]=\"item.data\"\n                      [currIndex]=\"state.currIndex\"\n                      [index]=\"i\"\n                      (tapClick)=\"itemClick.emit(i)\"\n                      (error)=\"error.emit({itemIndex: i, error: $event})\">\n        </gallery-item>\n\n      </div>\n    </div>\n    <ng-content></ng-content>\n  "
                },] },
    ];
    /** @nocollapse */
    GallerySliderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    GallerySliderComponent.propDecorators = {
        state: [{ type: Input }],
        config: [{ type: Input }],
        action: [{ type: Output }],
        itemClick: [{ type: Output }],
        error: [{ type: Output }]
    };
    return GallerySliderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryCounterComponent = /** @class */ (function () {
    function GalleryCounterComponent() {
    }
    GalleryCounterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-counter',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div class=\"g-counter\">{{(state.currIndex + 1) + '/' + state.items.length}}</div>\n  "
                },] },
    ];
    GalleryCounterComponent.propDecorators = {
        state: [{ type: Input }]
    };
    return GalleryCounterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryItemComponent = /** @class */ (function () {
    function GalleryItemComponent() {
        this.Types = GalleryItemType;
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryItemComponent.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.index === this.currIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryItemComponent.prototype, "load", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.config.loadingStrategy) {
                case LoadingStrategy.Preload:
                    return true;
                case LoadingStrategy.Lazy:
                    return this.currIndex === this.index;
                default:
                    return this.currIndex === this.index || this.currIndex === this.index - 1 || this.currIndex === this.index + 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    GalleryItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <ng-container *ngIf=\"load\" [ngSwitch]=\"type\">\n\n      <ng-container *ngSwitchCase=\"Types.Image\">\n\n        <gallery-image [src]=\"data.src\"\n                       [loadingIcon]=\"config.loadingIcon\"\n                       (error)=\"error.emit($event)\"></gallery-image>\n\n        <div class=\"g-template g-item-template\">\n          <ng-container *ngTemplateOutlet=\"config.itemTemplate;\n          context: { index: this.index, currIndex: this.currIndex, type: this.type, data: this.data }\">\n          </ng-container>\n        </div>\n\n      </ng-container>\n\n      <gallery-video *ngSwitchCase=\"Types.Video\"\n                     [src]=\"data.src\"\n                     [poster]=\"data.poster\"\n                     [pause]=\"currIndex !== index\"\n                     (error)=\"error.emit($event)\"></gallery-video>\n\n      <gallery-iframe *ngSwitchCase=\"Types.Youtube\"\n                      [src]=\"data.src\"\n                      [pause]=\"currIndex !== index\"></gallery-iframe>\n\n      <gallery-iframe *ngSwitchCase=\"Types.Iframe\"\n                      [src]=\"data.src\"></gallery-iframe>\n\n      <ng-container *ngSwitchDefault>\n\n        <div class=\"g-template g-item-template\">\n          <ng-container *ngTemplateOutlet=\"config.itemTemplate;\n          context: { index: this.index, currIndex: this.currIndex, type: this.type, data: this.data }\">\n          </ng-container>\n        </div>\n\n      </ng-container>\n\n    </ng-container>\n  "
                },] },
    ];
    GalleryItemComponent.propDecorators = {
        config: [{ type: Input }],
        index: [{ type: Input }],
        currIndex: [{ type: Input }],
        type: [{ type: Input }],
        data: [{ type: Input }],
        error: [{ type: Output }],
        isActive: [{ type: HostBinding, args: ['class.g-active-item',] }]
    };
    return GalleryItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryThumbComponent = /** @class */ (function () {
    function GalleryThumbComponent() {
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryThumbComponent.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.index === this.currIndex;
        },
        enumerable: true,
        configurable: true
    });
    GalleryThumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-thumb',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <gallery-image [src]=\"data.thumb\" (error)=\"error.emit($event)\"></gallery-image>\n\n    <div *ngIf=\"config.thumbTemplate\" class=\"g-template g-thumb-template\">\n      <ng-container\n        *ngTemplateOutlet=\"config.thumbTemplate; context: { index: this.index, type: this.type, data: this.data }\">\n      </ng-container>\n    </div>\n  "
                },] },
    ];
    GalleryThumbComponent.propDecorators = {
        config: [{ type: Input }],
        index: [{ type: Input }],
        currIndex: [{ type: Input }],
        type: [{ type: Input }],
        data: [{ type: Input }],
        error: [{ type: Output }],
        isActive: [{ type: HostBinding, args: ['class.g-active-thumb',] }]
    };
    return GalleryThumbComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryImageComponent = /** @class */ (function () {
    function GalleryImageComponent(_sanitizer) {
        this._sanitizer = _sanitizer;
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryImageComponent.prototype, "imageLoaded", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.loadedImage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GalleryImageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.loadingIcon) {
            this.loadingSvg = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
    };
    GalleryImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-image',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <ng-container [lazyImage]=\"src\" (loaded)=\"loadedImage = $event\" (error)=\"error.emit($event)\">\n      <div *ngIf=\"loadedImage; else loading\"\n           class=\"g-image-item\"\n           [style.backgroundImage]=\"loadedImage\"></div>\n    </ng-container>\n\n    <ng-template #loading>\n      <i *ngIf=\"loadingSvg; else thumbLoading\" class=\"g-loading\" [innerHTML]=\"loadingSvg\"></i>\n      <ng-template #thumbLoading>\n        <div class=\"g-thumb-loading\"></div>\n      </ng-template>\n    </ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryImageComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    GalleryImageComponent.propDecorators = {
        src: [{ type: Input }],
        loadingIcon: [{ type: Input }],
        error: [{ type: Output }],
        imageLoaded: [{ type: HostBinding, args: ['class.g-image-loaded',] }]
    };
    return GalleryImageComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryVideoComponent = /** @class */ (function () {
    function GalleryVideoComponent() {
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
    }
    Object.defineProperty(GalleryVideoComponent.prototype, "pauseVideo", {
        set: /**
         * @param {?} shouldPause
         * @return {?}
         */
        function (shouldPause) {
            /** @type {?} */
            var video = this.video.nativeElement;
            if (shouldPause && !video.paused) {
                video.pause();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GalleryVideoComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.src instanceof Array) {
            // If video has multiple sources
            this.videoSources = __spread(this.src);
        }
        else {
            this.videoSources = [{ url: this.src }];
        }
    };
    GalleryVideoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-video',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <video #video controls poster=\"{{poster}}\" (error)=\"error.emit($event)\">\n      <source *ngFor=\"let src of videoSources\" src=\"{{src?.url}}\" type=\"{{src?.type}}\"/>\n    </video>\n  "
                },] },
    ];
    GalleryVideoComponent.propDecorators = {
        src: [{ type: Input }],
        poster: [{ type: Input }],
        pauseVideo: [{ type: Input, args: ['pause',] }],
        error: [{ type: Output }],
        video: [{ type: ViewChild, args: ['video',] }]
    };
    return GalleryVideoComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryIframeComponent = /** @class */ (function () {
    function GalleryIframeComponent(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    Object.defineProperty(GalleryIframeComponent.prototype, "pauseVideo", {
        set: /**
         * @param {?} shouldPause
         * @return {?}
         */
        function (shouldPause) {
            /** @type {?} */
            var iframe = this.iframe.nativeElement;
            if (shouldPause) {
                /** @type {?} */
                var src = iframe.src;
                iframe.src = src;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GalleryIframeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iframeSrc = this._sanitizer.bypassSecurityTrustResourceUrl(this.src);
    };
    GalleryIframeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-iframe',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <iframe #iframe\n            frameborder=\"0\"\n            allowfullscreen\n            [src]=\"iframeSrc\">\n    </iframe>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryIframeComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    GalleryIframeComponent.propDecorators = {
        src: [{ type: Input }],
        pauseVideo: [{ type: Input, args: ['pause',] }],
        iframe: [{ type: ViewChild, args: ['iframe',] }]
    };
    return GalleryIframeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LazyDirective = /** @class */ (function () {
    function LazyDirective() {
        var _this = this;
        this._worker$ = new Subject();
        this.loaded = new EventEmitter();
        this.error = new EventEmitter();
        /** @type {?} */
        var img = new Image();
        this._worker$.pipe(switchMap(function (imageSrc) {
            // Image is loading
            // Image is loading
            _this.loaded.emit(null);
            // Stop previously loading
            img.src = imageSrc;
            /** @type {?} */
            var loadSuccess = fromEvent(img, 'load').pipe(tap(function () {
                _this.loaded.emit("url(" + imageSrc + ")");
            }));
            /** @type {?} */
            var loadError = fromEvent(img, 'error').pipe(tap(function () {
                _this.error.emit(new Error("[lazyImage]: The image " + imageSrc + " did not load"));
                _this.loaded.emit(null);
            }));
            return zip(loadSuccess, loadError);
        })).subscribe();
    }
    Object.defineProperty(LazyDirective.prototype, "lazyImage", {
        set: /**
         * @param {?} imagePath
         * @return {?}
         */
        function (imagePath) {
            this.loadImage(imagePath);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} imagePath
     * @return {?}
     */
    LazyDirective.prototype.loadImage = /**
     * @param {?} imagePath
     * @return {?}
     */
    function (imagePath) {
        this._worker$.next(imagePath);
    };
    /**
     * @return {?}
     */
    LazyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._worker$.complete();
    };
    LazyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyImage]'
                },] },
    ];
    /** @nocollapse */
    LazyDirective.ctorParameters = function () { return []; };
    LazyDirective.propDecorators = {
        lazyImage: [{ type: Input, args: ['lazyImage',] }],
        loaded: [{ type: Output }],
        error: [{ type: Output }]
    };
    return LazyDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TapClickDirective = /** @class */ (function () {
    function TapClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tapClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setTapEvent();
    };
    /** Enable gestures if hammer is loaded */
    /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    TapClickDirective.prototype.setTapEvent = /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    function () {
        var _this = this;
        if (typeof Hammer !== 'undefined') {
            // Use hammer.js tap event
            this.mc = new Hammer(this.el.nativeElement);
            this.mc.on('tap', function () {
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
        else {
            // Use normal click event
            this.clickListener = this.renderer.listen(this.el.nativeElement, 'click', function (e) {
                e.stopPropagation();
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
        else {
            this.clickListener();
        }
    };
    TapClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tapClick]'
                },] },
    ];
    /** @nocollapse */
    TapClickDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TapClickDirective.propDecorators = {
        tapClickDisabled: [{ type: Input }],
        tapClick: [{ type: Output }]
    };
    return TapClickDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GalleryModule = /** @class */ (function () {
    function GalleryModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    GalleryModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: GalleryModule,
            providers: [
                {
                    provide: GALLERY_CONFIG,
                    useValue: config
                }
            ]
        };
    };
    GalleryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        GalleryComponent,
                        GalleryNavComponent,
                        GalleryDotsComponent,
                        GalleryCoreComponent,
                        GallerySliderComponent,
                        GalleryCounterComponent,
                        GalleryThumbsComponent,
                        GalleryThumbComponent,
                        GalleryItemComponent,
                        GalleryImageComponent,
                        GalleryVideoComponent,
                        GalleryIframeComponent,
                        LazyDirective,
                        TapClickDirective
                    ],
                    exports: [
                        GalleryComponent,
                        LazyDirective,
                        TapClickDirective,
                    ]
                },] },
    ];
    return GalleryModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Gallery, GalleryRef, GalleryComponent, GalleryAction, ImageSize, LoadingStrategy, ThumbnailsPosition, ThumbnailsMode, SlidingDirection, GalleryItemType, ImageItem, VideoItem, IframeItem, YoutubeItem, GalleryModule, GalleryCoreComponent as ɵe, GalleryCounterComponent as ɵg, GalleryDotsComponent as ɵd, GalleryItemComponent as ɵj, GalleryNavComponent as ɵc, GallerySliderComponent as ɵf, GalleryThumbComponent as ɵi, GalleryThumbsComponent as ɵh, GalleryIframeComponent as ɵm, GalleryImageComponent as ɵk, GalleryVideoComponent as ɵl, LazyDirective as ɵn, TapClickDirective as ɵo, GALLERY_CONFIG as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktY29yZS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL21vZGVscy9jb25zdGFudHMudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi91dGlscy9nYWxsZXJ5LmRlZmF1bHQudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9jb21wb25lbnRzL3RlbXBsYXRlcy9pbmRleC50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL3NlcnZpY2VzL2dhbGxlcnktcmVmLnRzIiwibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS9saWIvdXRpbHMvZ2FsbGVyeS50b2tlbi50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL3NlcnZpY2VzL2dhbGxlcnkuc2VydmljZS50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL2NvbXBvbmVudHMvZ2FsbGVyeS5jb21wb25lbnQudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9jb21wb25lbnRzL2dhbGxlcnktbmF2LmNvbXBvbmVudC50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL2NvbXBvbmVudHMvZ2FsbGVyeS1jb3JlLmNvbXBvbmVudC50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL2NvbXBvbmVudHMvZ2FsbGVyeS1kb3RzLmNvbXBvbmVudC50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL2NvbXBvbmVudHMvZ2FsbGVyeS10aHVtYnMuY29tcG9uZW50LnRzIiwibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS9saWIvY29tcG9uZW50cy9nYWxsZXJ5LXNsaWRlci5jb21wb25lbnQudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9jb21wb25lbnRzL2dhbGxlcnktY291bnRlci5jb21wb25lbnQudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9jb21wb25lbnRzL2dhbGxlcnktaXRlbS5jb21wb25lbnQudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9jb21wb25lbnRzL2dhbGxlcnktdGh1bWIuY29tcG9uZW50LnRzIiwibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9jb21wb25lbnRzL3RlbXBsYXRlcy9nYWxsZXJ5LXZpZGVvLmNvbXBvbmVudC50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL2NvbXBvbmVudHMvdGVtcGxhdGVzL2dhbGxlcnktaWZyYW1lLmNvbXBvbmVudC50cyIsIm5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvbGliL2RpcmVjdGl2ZXMvbGF6eS5kaXJlY3RpdmUudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9kaXJlY3RpdmVzL3RhcC1jbGljay5kaXJlY3RpdmUudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlL2xpYi9nYWxsZXJ5Lm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBHYWxsZXJ5QWN0aW9uIHtcclxuICBJTklUSUFMSVpFRCA9ICdpbml0aWFsaXplZCcsXHJcbiAgSVRFTVNfQ0hBTkdFRCA9ICdpdGVtc0NoYW5nZWQnLFxyXG4gIElOREVYX0NIQU5HRUQgPSAnaW5kZXhDaGFuZ2VkJyxcclxuICBQTEFZID0gJ3BsYXknLFxyXG4gIFNUT1AgPSAnc3RvcCdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gSW1hZ2VTaXplIHtcclxuICBDb3ZlciA9ICdjb3ZlcicsXHJcbiAgQ29udGFpbiA9ICdjb250YWluJ1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBMb2FkaW5nU3RyYXRlZ3kge1xyXG4gIFByZWxvYWQgPSAncHJlbG9hZCcsXHJcbiAgTGF6eSA9ICdsYXp5JyxcclxuICBEZWZhdWx0ID0gJ2RlZmF1bHQnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRodW1ibmFpbHNQb3NpdGlvbiB7XHJcbiAgVG9wID0gJ3RvcCcsXHJcbiAgTGVmdCA9ICdsZWZ0JyxcclxuICBSaWdodCA9ICdyaWdodCcsXHJcbiAgQm90dG9tID0gJ2JvdHRvbSdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGh1bWJuYWlsc01vZGUge1xyXG4gIEZyZWUgPSAnZnJlZScsXHJcbiAgU3RyaWN0ID0gJ3N0cmljdCdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU2xpZGluZ0RpcmVjdGlvbiB7XHJcbiAgSG9yaXpvbnRhbCA9ICdob3Jpem9udGFsJyxcclxuICBWZXJ0aWNhbCA9ICd2ZXJ0aWNhbCdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gR2FsbGVyeUl0ZW1UeXBlIHtcclxuICBJbWFnZSA9ICdpbWFnZScsXHJcbiAgVmlkZW8gPSAndmlkZW8nLFxyXG4gIFlvdXR1YmUgPSAneW91dHViZScsXHJcbiAgSWZyYW1lID0gJ2lmcmFtZSdcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIEltYWdlU2l6ZSxcclxuICBHYWxsZXJ5U3RhdGUsXHJcbiAgR2FsbGVyeUNvbmZpZyxcclxuICBHYWxsZXJ5QWN0aW9uLFxyXG4gIFRodW1ibmFpbHNNb2RlLFxyXG4gIExvYWRpbmdTdHJhdGVneSxcclxuICBTbGlkaW5nRGlyZWN0aW9uLFxyXG4gIFRodW1ibmFpbHNQb3NpdGlvblxyXG59IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG4vKiogSW5pdGlhbCBzdGF0ZSAqL1xyXG5leHBvcnQgY29uc3QgZGVmYXVsdFN0YXRlOiBHYWxsZXJ5U3RhdGUgPSB7XHJcbiAgYWN0aW9uOiBHYWxsZXJ5QWN0aW9uLklOSVRJQUxJWkVELFxyXG4gIGlzUGxheWluZzogZmFsc2UsXHJcbiAgaGFzTmV4dDogZmFsc2UsXHJcbiAgaGFzUHJldjogZmFsc2UsXHJcbiAgY3VyckluZGV4OiAwLFxyXG4gIGl0ZW1zOiBbXVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWc6IEdhbGxlcnlDb25maWcgPSB7XHJcbiAgbmF2OiB0cnVlLFxyXG4gIGxvb3A6IHRydWUsXHJcbiAgem9vbU91dDogMCxcclxuICBkb3RzOiBmYWxzZSxcclxuICB0aHVtYjogdHJ1ZSxcclxuICBjb3VudGVyOiB0cnVlLFxyXG4gIGdlc3R1cmVzOiB0cnVlLFxyXG4gIGF1dG9QbGF5OiBmYWxzZSxcclxuICB0aHVtYldpZHRoOiAxMjAsXHJcbiAgdGh1bWJIZWlnaHQ6IDkwLFxyXG4gIHBhblNlbnNpdGl2aXR5OiAyNSxcclxuICBkaXNhYmxlVGh1bWI6IGZhbHNlLFxyXG4gIHBsYXllckludGVydmFsOiAzMDAwLFxyXG4gIGltYWdlU2l6ZTogSW1hZ2VTaXplLkNvbnRhaW4sXHJcbiAgdGh1bWJNb2RlOiBUaHVtYm5haWxzTW9kZS5TdHJpY3QsXHJcbiAgdGh1bWJQb3NpdGlvbjogVGh1bWJuYWlsc1Bvc2l0aW9uLkJvdHRvbSxcclxuICBsb2FkaW5nU3RyYXRlZ3k6IExvYWRpbmdTdHJhdGVneS5EZWZhdWx0LFxyXG4gIHNsaWRpbmdEaXJlY3Rpb246IFNsaWRpbmdEaXJlY3Rpb24uSG9yaXpvbnRhbCxcclxuICBuYXZJY29uOiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHN2ZyB3aWR0aD1cIjUxMnB4XCIgaGVpZ2h0PVwiNTEycHhcIiBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjQwLjgyMyAyNDAuODIzXCIgdmVyc2lvbj1cIjEuMVwiIHZpZXdCb3g9XCIwIDAgMjQwLjgyMyAyNDAuODIzXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm0xODMuMTkgMTExLjgybC0xMDguMy0xMDguMjZjLTQuNzUyLTQuNzQtMTIuNDUxLTQuNzQtMTcuMjE1IDAtNC43NTIgNC43NC00Ljc1MiAxMi40MzkgMCAxNy4xNzlsOTkuNzA3IDk5LjY3MS05OS42OTUgOTkuNjcxYy00Ljc1MiA0Ljc0LTQuNzUyIDEyLjQzOSAwIDE3LjE5MSA0Ljc1MiA0Ljc0IDEyLjQ2MyA0Ljc0IDE3LjIxNSAwbDEwOC4zLTEwOC4yNmM0LjY4LTQuNjkxIDQuNjgtMTIuNTExLTAuMDEyLTE3LjE5elwiIGZpbGw9XCIjZmZmXCIvPjwvc3ZnPmAsXHJcbiAgbG9hZGluZ0ljb246IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48c3ZnIHN0cm9rZT1cIiNmZmZcIiB2aWV3Qm94PVwiMCAwIDQ0IDQ0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxnIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIHN0cm9rZS13aWR0aD1cIjJcIj48Y2lyY2xlIGN4PVwiMjJcIiBjeT1cIjIyXCIgcj1cIjFcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwiclwiIGJlZ2luPVwiMHNcIiBjYWxjTW9kZT1cInNwbGluZVwiIGR1cj1cIjEuOHNcIiBrZXlTcGxpbmVzPVwiMC4xNjUsIDAuODQsIDAuNDQsIDFcIiBrZXlUaW1lcz1cIjA7IDFcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiB2YWx1ZXM9XCIxOyAyMFwiLz48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwic3Ryb2tlLW9wYWNpdHlcIiBiZWdpbj1cIjBzXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBkdXI9XCIxLjhzXCIga2V5U3BsaW5lcz1cIjAuMywgMC42MSwgMC4zNTUsIDFcIiBrZXlUaW1lcz1cIjA7IDFcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiB2YWx1ZXM9XCIxOyAwXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XCIyMlwiIGN5PVwiMjJcIiByPVwiMVwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XCJyXCIgYmVnaW49XCItMC45c1wiIGNhbGNNb2RlPVwic3BsaW5lXCIgZHVyPVwiMS44c1wiIGtleVNwbGluZXM9XCIwLjE2NSwgMC44NCwgMC40NCwgMVwiIGtleVRpbWVzPVwiMDsgMVwiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiIHZhbHVlcz1cIjE7IDIwXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XCJzdHJva2Utb3BhY2l0eVwiIGJlZ2luPVwiLTAuOXNcIiBjYWxjTW9kZT1cInNwbGluZVwiIGR1cj1cIjEuOHNcIiBrZXlTcGxpbmVzPVwiMC4zLCAwLjYxLCAwLjM1NSwgMVwiIGtleVRpbWVzPVwiMDsgMVwiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiIHZhbHVlcz1cIjE7IDBcIi8+PC9jaXJjbGU+PC9nPjwvc3ZnPmBcclxufTtcclxuIiwiaW1wb3J0IHsgR2FsbGVyeUl0ZW0sIEdhbGxlcnlJdGVtVHlwZSB9IGZyb20gJy4uLy4uL21vZGVscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VJdGVtIGltcGxlbWVudHMgR2FsbGVyeUl0ZW0ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBHYWxsZXJ5SXRlbVR5cGUuSW1hZ2U7XHJcbiAgcmVhZG9ubHkgZGF0YTogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmlkZW9JdGVtIGltcGxlbWVudHMgR2FsbGVyeUl0ZW0ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBHYWxsZXJ5SXRlbVR5cGUuVmlkZW87XHJcbiAgcmVhZG9ubHkgZGF0YTogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSWZyYW1lSXRlbSBpbXBsZW1lbnRzIEdhbGxlcnlJdGVtIHtcclxuICByZWFkb25seSB0eXBlID0gR2FsbGVyeUl0ZW1UeXBlLklmcmFtZTtcclxuICByZWFkb25seSBkYXRhOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGE6IGFueSkge1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBZb3V0dWJlSXRlbSBpbXBsZW1lbnRzIEdhbGxlcnlJdGVtIHtcclxuICByZWFkb25seSB0eXBlID0gR2FsbGVyeUl0ZW1UeXBlLllvdXR1YmU7XHJcbiAgcmVhZG9ubHkgZGF0YTogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuZGF0YSA9IHtcclxuICAgICAgc3JjOiBgLy95b3V0dWJlLmNvbS9lbWJlZC8ke2RhdGEuc3JjfT93bW9kZT10cmFuc3BhcmVudGAsXHJcbiAgICAgIHRodW1iOiBkYXRhLnRodW1iID8gZGF0YS50aHVtYiA6IGAvL2ltZy55b3V0dWJlLmNvbS92aS8ke2RhdGEuc3JjfS9kZWZhdWx0LmpwZ2BcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCwgT2JzZXJ2YWJsZSwgb2YsIEVNUFRZfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVsYXksIGZpbHRlciwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGRlZmF1bHRTdGF0ZSB9IGZyb20gJy4uL3V0aWxzL2dhbGxlcnkuZGVmYXVsdCc7XHJcbmltcG9ydCB7IEdhbGxlcnlBY3Rpb24sIEdhbGxlcnlDb25maWcsIEdhbGxlcnlFcnJvciwgR2FsbGVyeUl0ZW0sIEdhbGxlcnlTdGF0ZSB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IElmcmFtZUl0ZW0sIEltYWdlSXRlbSwgVmlkZW9JdGVtLCBZb3V0dWJlSXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdGVtcGxhdGVzJztcclxuXHJcbmNvbnN0IGZpbHRlckFjdGlvbnMgPSAoYWN0aW9uczogc3RyaW5nW10pID0+IHtcclxuICByZXR1cm4gZmlsdGVyKChzdGF0ZTogR2FsbGVyeVN0YXRlKSA9PiBhY3Rpb25zLmluZGV4T2Yoc3RhdGUuYWN0aW9uKSA+IC0xKTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5UmVmIHtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIGdhbGxlcnkgc3RhdGUgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9zdGF0ZTogQmVoYXZpb3JTdWJqZWN0PEdhbGxlcnlTdGF0ZT47XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyBnYWxsZXJ5IGNvbmZpZyAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZzogQmVoYXZpb3JTdWJqZWN0PEdhbGxlcnlDb25maWc+O1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgb24gaXRlbSBjbGljayAqL1xyXG4gIHJlYWRvbmx5IGl0ZW1DbGljayA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIG9uIHRodW1ibmFpbCBjbGljayAqL1xyXG4gIHJlYWRvbmx5IHRodW1iQ2xpY2sgPSBuZXcgU3ViamVjdDxudW1iZXI+KCk7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyBvbiBhbiBlcnJvciBvY2N1cnMgKi9cclxuICByZWFkb25seSBlcnJvciA9IG5ldyBTdWJqZWN0PEdhbGxlcnlFcnJvcj4oKTtcclxuXHJcbiAgLyoqIEdhbGxlcnkgRXZlbnRzICovXHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyBnYWxsZXJ5IHN0YXRlICovXHJcbiAgcmVhZG9ubHkgc3RhdGU6IE9ic2VydmFibGU8R2FsbGVyeVN0YXRlPjtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIGdhbGxlcnkgY29uZmlnICovXHJcbiAgcmVhZG9ubHkgY29uZmlnOiBPYnNlcnZhYmxlPEdhbGxlcnlDb25maWc+O1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBnYWxsZXJ5IGlzIGluaXRpYWxpemVkL3Jlc2V0ICovXHJcbiAgZ2V0IGluaXRpYWxpemVkKCk6IE9ic2VydmFibGU8R2FsbGVyeVN0YXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5waXBlKGZpbHRlckFjdGlvbnMoW0dhbGxlcnlBY3Rpb24uSU5JVElBTElaRURdKSk7XHJcbiAgfVxyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBpdGVtcyBpcyBjaGFuZ2VkIChpdGVtcyBsb2FkZWQsIGl0ZW0gYWRkZWQsIGl0ZW0gcmVtb3ZlZCkgKi9cclxuICBnZXQgaXRlbXNDaGFuZ2VkKCk6IE9ic2VydmFibGU8R2FsbGVyeVN0YXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5waXBlKGZpbHRlckFjdGlvbnMoW0dhbGxlcnlBY3Rpb24uSVRFTVNfQ0hBTkdFRF0pKTtcclxuICB9XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGN1cnJlbnQgaXRlbSBpcyBjaGFuZ2VkICovXHJcbiAgZ2V0IGluZGV4Q2hhbmdlZCgpOiBPYnNlcnZhYmxlPEdhbGxlcnlTdGF0ZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucGlwZShmaWx0ZXJBY3Rpb25zKFtHYWxsZXJ5QWN0aW9uLklOREVYX0NIQU5HRURdKSk7XHJcbiAgfVxyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgcGxheWVyIHNob3VsZCBzdGFydCBvciBzdG9wICovXHJcbiAgZ2V0IHBsYXlpbmdDaGFuZ2VkKCk6IE9ic2VydmFibGU8R2FsbGVyeVN0YXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5waXBlKGZpbHRlckFjdGlvbnMoW0dhbGxlcnlBY3Rpb24uUExBWSwgR2FsbGVyeUFjdGlvbi5TVE9QXSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIHBsYXllciBzaG91bGQgc3RhcnQgb3Igc3RvcCAqL1xyXG4gIHByaXZhdGUgZ2V0IHBsYXllckFjdGlvbnMoKTogT2JzZXJ2YWJsZTxHYWxsZXJ5U3RhdGU+IHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLnBpcGUoZmlsdGVyQWN0aW9ucyhbR2FsbGVyeUFjdGlvbi5QTEFZLCBHYWxsZXJ5QWN0aW9uLlNUT1AsIEdhbGxlcnlBY3Rpb24uSU5ERVhfQ0hBTkdFRF0pKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogR2FsbGVyeUNvbmZpZywgcHJpdmF0ZSBkZWxldGVJbnN0YW5jZTogRnVuY3Rpb24pIHtcclxuICAgIHRoaXMuX3N0YXRlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxHYWxsZXJ5U3RhdGU+KGRlZmF1bHRTdGF0ZSk7XHJcbiAgICB0aGlzLl9jb25maWcgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEdhbGxlcnlDb25maWc+KGNvbmZpZyk7XHJcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5fc3RhdGUuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2NvbmZpZy5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFjdGl2YXRlIHBsYXllciBhY3Rpb25zIGxpc3RlbmVyXHJcbiAgICovXHJcbiAgYWN0aXZhdGVQbGF5ZXIoKTogT2JzZXJ2YWJsZTxHYWxsZXJ5U3RhdGU+IHtcclxuICAgIHJldHVybiB0aGlzLnBsYXllckFjdGlvbnMucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChlOiBHYWxsZXJ5U3RhdGUpID0+XHJcbiAgICAgICAgZS5pc1BsYXlpbmcgPyBvZih7fSkucGlwZShcclxuICAgICAgICAgIGRlbGF5KHRoaXMuX2NvbmZpZy52YWx1ZS5wbGF5ZXJJbnRlcnZhbCksXHJcbiAgICAgICAgICB0YXAoKCkgPT4gdGhpcy5uZXh0KCkpXHJcbiAgICAgICAgKSA6IEVNUFRZXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgZ2FsbGVyeSBzdGF0ZVxyXG4gICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0U3RhdGUoc3RhdGU6IEdhbGxlcnlTdGF0ZSkge1xyXG4gICAgdGhpcy5fc3RhdGUubmV4dCh7Li4udGhpcy5fc3RhdGUudmFsdWUsIC4uLnN0YXRlfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgZ2FsbGVyeSBjb25maWdcclxuICAgKiBAcGFyYW0gY29uZmlnXHJcbiAgICovXHJcbiAgc2V0Q29uZmlnKGNvbmZpZzogR2FsbGVyeUNvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnLm5leHQoey4uLnRoaXMuX2NvbmZpZy52YWx1ZSwgLi4uY29uZmlnfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQWRkIGdhbGxlcnkgaXRlbVxyXG4gICAqIEBwYXJhbSBpdGVtIC0gR2FsbGVyeSBpdGVtIG9iamVjdFxyXG4gICAqIEBwYXJhbSBhY3RpdmUgLSBTZXQgdGhlIG5ldyBpdGVtIGFzIGN1cnJlbnQgc2xpZGVcclxuICAgKi9cclxuICBhZGQoaXRlbTogR2FsbGVyeUl0ZW0sIGFjdGl2ZT86IGJvb2xlYW4pIHtcclxuXHJcbiAgICBjb25zdCBpdGVtcyA9IFsuLi50aGlzLl9zdGF0ZS52YWx1ZS5pdGVtcywgaXRlbV07XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgYWN0aW9uOiBHYWxsZXJ5QWN0aW9uLklURU1TX0NIQU5HRUQsXHJcbiAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgaGFzTmV4dDogaXRlbXMubGVuZ3RoID4gMSxcclxuICAgICAgY3VyckluZGV4OiBhY3RpdmUgPyBpdGVtcy5sZW5ndGggLSAxIDogdGhpcy5fc3RhdGUudmFsdWUuY3VyckluZGV4XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBpbWFnZSBpdGVtXHJcbiAgICogQHBhcmFtIGRhdGFcclxuICAgKiBAcGFyYW0gYWN0aXZlXHJcbiAgICovXHJcbiAgYWRkSW1hZ2UoZGF0YTogYW55LCBhY3RpdmU/OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmFkZChuZXcgSW1hZ2VJdGVtKGRhdGEpLCBhY3RpdmUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIHZpZGVvIGl0ZW1cclxuICAgKiBAcGFyYW0gZGF0YVxyXG4gICAqIEBwYXJhbSBhY3RpdmVcclxuICAgKi9cclxuICBhZGRWaWRlbyhkYXRhOiBhbnksIGFjdGl2ZT86IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuYWRkKG5ldyBWaWRlb0l0ZW0oZGF0YSksIGFjdGl2ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgaWZyYW1lIGl0ZW1cclxuICAgKiBAcGFyYW0gZGF0YVxyXG4gICAqIEBwYXJhbSBhY3RpdmVcclxuICAgKi9cclxuICBhZGRJZnJhbWUoZGF0YTogYW55LCBhY3RpdmU/OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmFkZChuZXcgSWZyYW1lSXRlbShkYXRhKSwgYWN0aXZlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCB5b3V0dWJlIGl0ZW1cclxuICAgKiBAcGFyYW0gZGF0YVxyXG4gICAqIEBwYXJhbSBhY3RpdmVcclxuICAgKi9cclxuICBhZGRZb3V0dWJlKGRhdGE6IGFueSwgYWN0aXZlPzogYm9vbGVhbikge1xyXG4gICAgdGhpcy5hZGQobmV3IFlvdXR1YmVJdGVtKGRhdGEpLCBhY3RpdmUpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJlbW92ZSBnYWxsZXJ5IGl0ZW1cclxuICAgKiBAcGFyYW0gaSAtIEl0ZW0gaW5kZXhcclxuICAgKi9cclxuICByZW1vdmUoaTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBpdGVtcyA9IFtcclxuICAgICAgLi4udGhpcy5fc3RhdGUudmFsdWUuaXRlbXMuc2xpY2UoMCwgaSksXHJcbiAgICAgIC4uLnRoaXMuX3N0YXRlLnZhbHVlLml0ZW1zLnNsaWNlKGkgKyAxLCB0aGlzLl9zdGF0ZS52YWx1ZS5pdGVtcy5sZW5ndGgpXHJcbiAgICBdO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGFjdGlvbjogR2FsbGVyeUFjdGlvbi5JVEVNU19DSEFOR0VELFxyXG4gICAgICBpdGVtczogaXRlbXMsXHJcbiAgICAgIGhhc05leHQ6IGl0ZW1zLmxlbmd0aCA+IDEsXHJcbiAgICAgIGhhc1ByZXY6IGkgPiAwXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWQgaXRlbXMgYW5kIHJlc2V0IHRoZSBzdGF0ZVxyXG4gICAqIEBwYXJhbSBpdGVtcyAtIEdhbGxlcnkgaW1hZ2VzIGRhdGFcclxuICAgKi9cclxuICBsb2FkKGl0ZW1zOiBHYWxsZXJ5SXRlbVtdKSB7XHJcbiAgICBpZiAoaXRlbXMpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgYWN0aW9uOiBHYWxsZXJ5QWN0aW9uLklURU1TX0NIQU5HRUQsXHJcbiAgICAgICAgaXRlbXM6IGl0ZW1zLFxyXG4gICAgICAgIGhhc05leHQ6IGl0ZW1zLmxlbmd0aCA+IDEsXHJcbiAgICAgICAgaGFzUHJldjogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgYWN0aXZlIGl0ZW1cclxuICAgKiBAcGFyYW0gaSAtIEFjdGl2ZSBJbmRleFxyXG4gICAqL1xyXG4gIHNldChpOiBudW1iZXIpIHtcclxuICAgIGlmIChpICE9PSB0aGlzLl9zdGF0ZS52YWx1ZS5jdXJySW5kZXgpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgYWN0aW9uOiBHYWxsZXJ5QWN0aW9uLklOREVYX0NIQU5HRUQsXHJcbiAgICAgICAgY3VyckluZGV4OiBpLFxyXG4gICAgICAgIGhhc05leHQ6IGkgPCB0aGlzLl9zdGF0ZS52YWx1ZS5pdGVtcy5sZW5ndGggLSAxLFxyXG4gICAgICAgIGhhc1ByZXY6IGkgPiAwXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTmV4dCBpdGVtXHJcbiAgICovXHJcbiAgbmV4dCgpIHtcclxuICAgIGlmICh0aGlzLl9zdGF0ZS52YWx1ZS5oYXNOZXh0KSB7XHJcbiAgICAgIHRoaXMuc2V0KHRoaXMuX3N0YXRlLnZhbHVlLmN1cnJJbmRleCArIDEpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9jb25maWcudmFsdWUubG9vcCkge1xyXG4gICAgICB0aGlzLnNldCgwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByZXYgaXRlbVxyXG4gICAqL1xyXG4gIHByZXYoKSB7XHJcbiAgICBpZiAodGhpcy5fc3RhdGUudmFsdWUuaGFzUHJldikge1xyXG4gICAgICB0aGlzLnNldCh0aGlzLl9zdGF0ZS52YWx1ZS5jdXJySW5kZXggLSAxKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5fY29uZmlnLnZhbHVlLmxvb3ApIHtcclxuICAgICAgdGhpcy5zZXQodGhpcy5fc3RhdGUudmFsdWUuaXRlbXMubGVuZ3RoIC0gMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydCBnYWxsZXJ5IHBsYXllclxyXG4gICAqIEBwYXJhbSBpbnRlcnZhbFxyXG4gICAqL1xyXG4gIHBsYXkoaW50ZXJ2YWw/OiBudW1iZXIpIHtcclxuICAgIGlmIChpbnRlcnZhbCkge1xyXG4gICAgICB0aGlzLnNldENvbmZpZyh7cGxheWVySW50ZXJ2YWw6IGludGVydmFsfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKHthY3Rpb246IEdhbGxlcnlBY3Rpb24uUExBWSwgaXNQbGF5aW5nOiB0cnVlfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wIGdhbGxlcnkgcGxheWVyXHJcbiAgICovXHJcbiAgc3RvcCgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe2FjdGlvbjogR2FsbGVyeUFjdGlvbi5TVE9QLCBpc1BsYXlpbmc6IGZhbHNlfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCBnYWxsZXJ5IHRvIGluaXRpYWwgc3RhdGVcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoZGVmYXVsdFN0YXRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kgZ2FsbGVyeVxyXG4gICAqL1xyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl9zdGF0ZS5jb21wbGV0ZSgpO1xyXG4gICAgdGhpcy5fY29uZmlnLmNvbXBsZXRlKCk7XHJcbiAgICB0aGlzLml0ZW1DbGljay5jb21wbGV0ZSgpO1xyXG4gICAgdGhpcy50aHVtYkNsaWNrLmNvbXBsZXRlKCk7XHJcbiAgICB0aGlzLmRlbGV0ZUluc3RhbmNlKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBHQUxMRVJZX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxHYWxsZXJ5Q29uZmlnPignZ2FsbGVyeUNvbmZpZycpO1xyXG4iLCJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEdhbGxlcnlSZWYgfSBmcm9tICcuL2dhbGxlcnktcmVmJztcclxuaW1wb3J0IHsgR0FMTEVSWV9DT05GSUcgfSBmcm9tICcuLi91dGlscy9nYWxsZXJ5LnRva2VuJztcclxuaW1wb3J0IHsgZGVmYXVsdENvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2dhbGxlcnkuZGVmYXVsdCc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeSB7XHJcblxyXG4gIC8qKiBTdG9yZSBnYWxsZXJ5IGluc3RhbmNlcyAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2luc3RhbmNlcyA9IG5ldyBNYXA8c3RyaW5nLCBHYWxsZXJ5UmVmPigpO1xyXG5cclxuICAvKiogR2xvYmFsIGNvbmZpZyAqL1xyXG4gIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChHQUxMRVJZX0NPTkZJRykgY29uZmlnOiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHsuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWd9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG9yIGNyZWF0ZSBnYWxsZXJ5IGJ5IElEXHJcbiAgICogQHBhcmFtIGlkXHJcbiAgICogQHBhcmFtIGNvbmZpZ1xyXG4gICAqL1xyXG4gIHJlZihpZCA9ICdyb290JywgY29uZmlnPzogR2FsbGVyeUNvbmZpZyk6IEdhbGxlcnlSZWYge1xyXG4gICAgaWYgKHRoaXMuX2luc3RhbmNlcy5oYXMoaWQpKSB7XHJcbiAgICAgIGNvbnN0IGdhbGxlcnlSZWYgPSB0aGlzLl9pbnN0YW5jZXMuZ2V0KGlkKTtcclxuICAgICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgIGdhbGxlcnlSZWYuc2V0Q29uZmlnKHsuLi50aGlzLmNvbmZpZywgLi4uY29uZmlnfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGdhbGxlcnlSZWY7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VzLnNldChpZCwgbmV3IEdhbGxlcnlSZWYoey4uLnRoaXMuY29uZmlnLCAuLi5jb25maWd9LCB0aGlzLmRlbGV0ZUluc3RhbmNlKGlkKSkpLmdldChpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXN0cm95IGFsbCBnYWxsZXJ5IGluc3RhbmNlc1xyXG4gICAqL1xyXG4gIGRlc3Ryb3lBbGwoKSB7XHJcbiAgICB0aGlzLl9pbnN0YW5jZXMuZm9yRWFjaCgocmVmOiBHYWxsZXJ5UmVmKSA9PiByZWYuZGVzdHJveSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IGFsbCBnYWxsZXJ5IGluc3RhbmNlc1xyXG4gICAqL1xyXG4gIHJlc2V0QWxsKCkge1xyXG4gICAgdGhpcy5faW5zdGFuY2VzLmZvckVhY2goKHJlZjogR2FsbGVyeVJlZikgPT4gcmVmLnJlc2V0KCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQSBkZXN0cm95ZXIgZnVuY3Rpb24gZm9yIGVhY2ggZ2FsbGVyeSBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZGVsZXRlSW5zdGFuY2UoaWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuX2luc3RhbmNlcy5oYXMoaWQpKSB7XHJcbiAgICAgICAgdGhpcy5faW5zdGFuY2VzLmRlbGV0ZShpZCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgT25Jbml0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBPbkRlc3Ryb3ksXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb25MaWtlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEdhbGxlcnkgfSBmcm9tICcuLi9zZXJ2aWNlcy9nYWxsZXJ5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5UmVmIH0gZnJvbSAnLi4vc2VydmljZXMvZ2FsbGVyeS1yZWYnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5RXJyb3IsIEdhbGxlcnlJdGVtLCBHYWxsZXJ5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBJZnJhbWVJdGVtLCBJbWFnZUl0ZW0sIFZpZGVvSXRlbSwgWW91dHViZUl0ZW0gfSBmcm9tICcuL3RlbXBsYXRlcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnknLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHN0eWxlczogW2A6Om5nLWRlZXAgZ2FsbGVyeS1kb3Rze2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpfTo6bmctZGVlcCAuZy1kb3R7Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7ei1pbmRleDoyMH06Om5nLWRlZXAgLmctZG90LWFjdGl2ZSAuZy1kb3QtaW5uZXJ7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuNik7dHJhbnNmb3JtOnNjYWxlKDEuNil9OjpuZy1kZWVwIC5nLWRvdC1pbm5lcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7bWFyZ2luOjIwcHggMTVweDtvcGFjaXR5Oi42O3dpZHRoOjEwcHg7aGVpZ2h0OjVweDtib3JkZXItcmFkaXVzOjFweDtib3gtc2hhZG93OjAgMCAxcHggIzAwMDt0cmFuc2l0aW9uOmFsbCBlYXNlIC4yc306Om5nLWRlZXAgLmctbmF2LW5leHQsOjpuZy1kZWVwIC5nLW5hdi1wcmV2e3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7d2lkdGg6MzBweDtoZWlnaHQ6NDBweDtjdXJzb3I6cG9pbnRlcjt6LWluZGV4Ojk5OX06Om5nLWRlZXAgLmctbmF2LW5leHR7cmlnaHQ6LjVlbTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpIHBlcnNwZWN0aXZlKDFweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSkgcGVyc3BlY3RpdmUoMXB4KX06Om5nLWRlZXAgLmctbmF2LXByZXZ7bGVmdDouNWVtOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSkgcGVyc3BlY3RpdmUoMXB4KSBzY2FsZSgtMSwtMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSkgcGVyc3BlY3RpdmUoMXB4KSBzY2FsZSgtMSwtMSl9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjQ4MHB4KXs6Om5nLWRlZXAgLmctbmF2LW5leHR7cmlnaHQ6LjJlbX06Om5nLWRlZXAgLmctbmF2LXByZXZ7bGVmdDouMmVtfX06Om5nLWRlZXAgLmctaXRlbXMtY29udGFpbmVye2hlaWdodDoxMDAlfTo6bmctZGVlcCAuZy1zbGlkZXJ7cG9zaXRpb246YWJzb2x1dGU7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuNHMgY3ViaWMtYmV6aWVyKC41LDAsLjUsMSk7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjRzIGN1YmljLWJlemllciguNSwwLC41LDEpO3RyYW5zaXRpb246dHJhbnNmb3JtIC40cyBjdWJpYy1iZXppZXIoLjUsMCwuNSwxKSwtd2Via2l0LXRyYW5zZm9ybSAuNHMgY3ViaWMtYmV6aWVyKC41LDAsLjUsMSl9OjpuZy1kZWVwIGdhbGxlcnktY29yZVtzbGlkaW5nRGlyZWN0aW9uPWhvcml6b250YWxdIC5nLXNsaWRlcntmbGV4LWRpcmVjdGlvbjpyb3d9OjpuZy1kZWVwIGdhbGxlcnktY29yZVtzbGlkaW5nRGlyZWN0aW9uPXZlcnRpY2FsXSAuZy1zbGlkZXJ7ZmxleC1kaXJlY3Rpb246Y29sdW1ufTo6bmctZGVlcCBnYWxsZXJ5LXRodW1ic3tkaXNwbGF5OmJsb2NrO3otaW5kZXg6MTtvdmVyZmxvdzp1bnNldH06Om5nLWRlZXAgLmctdGh1bWJzLWNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjIwNjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2xlZnQ6MDt0b3A6MDtkaXNwbGF5OmZsZXg7b3ZlcmZsb3c6dW5zZXR9OjpuZy1kZWVwIGdhbGxlcnktY29yZVtkaXNhYmxlVGh1bWI9dHJ1ZV0gZ2FsbGVyeS10aHVtYntjdXJzb3I6ZGVmYXVsdH06Om5nLWRlZXAgZ2FsbGVyeS1jb3JlW3RodW1iUG9zaXRpb249Ym90dG9tXSBnYWxsZXJ5LXRodW1icyAuZy1zbGlkZXIsOjpuZy1kZWVwIGdhbGxlcnktY29yZVt0aHVtYlBvc2l0aW9uPXRvcF0gZ2FsbGVyeS10aHVtYnMgLmctc2xpZGVye2ZsZXgtZGlyZWN0aW9uOnJvdzt0b3A6MDtsZWZ0OjUwJX06Om5nLWRlZXAgZ2FsbGVyeS1jb3JlW3RodW1iUG9zaXRpb249Ym90dG9tXSBnYWxsZXJ5LXRodW1iLDo6bmctZGVlcCBnYWxsZXJ5LWNvcmVbdGh1bWJQb3NpdGlvbj10b3BdIGdhbGxlcnktdGh1bWJ7cGFkZGluZzoxcHggMCAxcHggMXB4fTo6bmctZGVlcCBnYWxsZXJ5LWNvcmVbdGh1bWJQb3NpdGlvbj1sZWZ0XSBnYWxsZXJ5LXRodW1icyAuZy1zbGlkZXIsOjpuZy1kZWVwIGdhbGxlcnktY29yZVt0aHVtYlBvc2l0aW9uPXJpZ2h0XSBnYWxsZXJ5LXRodW1icyAuZy1zbGlkZXJ7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3RvcDo1MCU7bGVmdDowfTo6bmctZGVlcCBnYWxsZXJ5LWNvcmVbdGh1bWJQb3NpdGlvbj1sZWZ0XSBnYWxsZXJ5LXRodW1iLDo6bmctZGVlcCBnYWxsZXJ5LWNvcmVbdGh1bWJQb3NpdGlvbj1yaWdodF0gZ2FsbGVyeS10aHVtYntwYWRkaW5nOjAgMXB4IDFweH06Om5nLWRlZXAgZ2FsbGVyeS1jb3JlW3RodW1iUG9zaXRpb249dG9wXXtmbGV4LWRpcmVjdGlvbjpjb2x1bW59OjpuZy1kZWVwIGdhbGxlcnktY29yZVt0aHVtYlBvc2l0aW9uPWxlZnRde2ZsZXgtZGlyZWN0aW9uOnJvd306Om5nLWRlZXAgZ2FsbGVyeS1jb3JlW3RodW1iUG9zaXRpb249cmlnaHRde2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfTo6bmctZGVlcCBnYWxsZXJ5LWNvcmVbdGh1bWJQb3NpdGlvbj1ib3R0b21de2ZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlfTo6bmctZGVlcCAuZy10aHVtYi1sb2FkaW5ne3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OmhpZGRlbjtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiNjZWQ0ZGF9OjpuZy1kZWVwIC5nLXRodW1iLWxvYWRpbmc6OmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjUwJTt6LWluZGV4OjE7d2lkdGg6NTAwJTttYXJnaW4tbGVmdDotMjUwJTstd2Via2l0LWFuaW1hdGlvbjouOHMgbGluZWFyIGluZmluaXRlIHBoQW5pbWF0aW9uO2FuaW1hdGlvbjouOHMgbGluZWFyIGluZmluaXRlIHBoQW5pbWF0aW9uO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LHJnYmEoMjU1LDI1NSwyNTUsMCkgNDYlLHJnYmEoMjU1LDI1NSwyNTUsLjM1KSA1MCUscmdiYSgyNTUsMjU1LDI1NSwwKSA1NCUpIDUwJSA1MCV9QC13ZWJraXQta2V5ZnJhbWVzIHBoQW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zMCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTMwJSwwLDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMzAlLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDMwJSwwLDApfX1Aa2V5ZnJhbWVzIHBoQW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zMCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTMwJSwwLDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMzAlLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDMwJSwwLDApfX06Om5nLWRlZXAgLmctY291bnRlcnt6LWluZGV4OjUwO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcGVyc3BlY3RpdmUoMXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSBwZXJzcGVjdGl2ZSgxcHgpO2JvdHRvbTowO2ZvbnQtc2l6ZToxMHB4O3BhZGRpbmc6NHB4IDEwcHg7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjUpO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NHB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjRweH06Om5nLWRlZXAgZ2FsbGVyeVtnYWxsZXJpemVdIGdhbGxlcnktaXRlbXtjdXJzb3I6cG9pbnRlcn06Om5nLWRlZXAgZ2FsbGVyeS1pdGVtLDo6bmctZGVlcCBnYWxsZXJ5LXRodW1ie3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7ZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW59OjpuZy1kZWVwIGdhbGxlcnktaXRlbXt6LWluZGV4OjEwfTo6bmctZGVlcCBnYWxsZXJ5LWl0ZW0gdmlkZW97cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX06Om5nLWRlZXAgZ2FsbGVyeS1pdGVtIGlmcmFtZXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfTo6bmctZGVlcCBnYWxsZXJ5LXRodW1ie29wYWNpdHk6LjU7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjpvcGFjaXR5IC4zcyBjdWJpYy1iZXppZXIoLjUsMCwuNSwxKX06Om5nLWRlZXAgZ2FsbGVyeS10aHVtYi5nLWFjdGl2ZS10aHVtYntvcGFjaXR5OjF9OjpuZy1kZWVwIC5nLWltYWdlLWl0ZW17YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX06Om5nLWRlZXAgLmctdGVtcGxhdGV7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDtsZWZ0OjA7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtjb2xvcjojZmZmO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn06Om5nLWRlZXAgLmctbG9hZGluZ3twb3NpdGlvbjphYnNvbHV0ZTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNTAlLC01MCUsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC01MCUsLTUwJSwwKTtsZWZ0OjUwJTt0b3A6NTAlO3dpZHRoOjgwcHg7aGVpZ2h0OjgwcHh9OjpuZy1kZWVwIGdhbGxlcnktY29yZVtpbWFnZVNpemU9Y29udGFpbl0gZ2FsbGVyeS1zbGlkZXIgLmctaW1hZ2UtaXRlbXtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbn06Om5nLWRlZXAgZ2FsbGVyeXtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjE7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjUwMHB4O2JhY2tncm91bmQtY29sb3I6IzAwMH06Om5nLWRlZXAgZ2FsbGVyeSAqe2JveC1zaXppbmc6Ym9yZGVyLWJveH06Om5nLWRlZXAgZ2FsbGVyeSw6Om5nLWRlZXAgZ2FsbGVyeS1jb3Jle3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OmhpZGRlbn06Om5nLWRlZXAgLmctYm94LDo6bmctZGVlcCAuZy1zbGlkZXIsOjpuZy1kZWVwIGdhbGxlcnktY29yZXtkaXNwbGF5OmZsZXg7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX06Om5nLWRlZXAgZ2FsbGVyeVtmbHVpZF17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTB2dyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwdncpO3dpZHRoOjEwMHZ3O2xlZnQ6NTAlfTo6bmctZGVlcCBnYWxsZXJ5W2ZsdWlkXVtmbHVpZD1mYWxzZV17LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZTt3aWR0aDppbml0aWFsO2xlZnQ6aW5pdGlhbH06Om5nLWRlZXAgLmctbm8tdHJhbnNpdGlvbnt0cmFuc2l0aW9uOnVuc2V0IWltcG9ydGFudH06Om5nLWRlZXAgLmctYm94LDo6bmctZGVlcCBnYWxsZXJ5LXNsaWRlcntvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4OjE7b3JkZXI6MTtoZWlnaHQ6MTAwJX06Om5nLWRlZXAgLmctYnRuLWNsb3NlIHN2Zyw6Om5nLWRlZXAgZ2FsbGVyeS1uYXYgc3Zne3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7LXdlYmtpdC1maWx0ZXI6ZHJvcC1zaGFkb3coMCAwIDFweCAjMDAwKTtmaWx0ZXI6ZHJvcC1zaGFkb3coMCAwIDFweCAjMDAwKTt0cmFuc2l0aW9uOm9wYWNpdHkgbGluZWFyIC4ycztvcGFjaXR5Oi42fTo6bmctZGVlcCAuZy1idG4tY2xvc2Ugc3ZnOmhvdmVyLDo6bmctZGVlcCBnYWxsZXJ5LW5hdiBzdmc6aG92ZXJ7b3BhY2l0eToxfWBdLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8Z2FsbGVyeS1jb3JlIFtzdGF0ZV09XCJnYWxsZXJ5UmVmLnN0YXRlIHwgYXN5bmNcIlxyXG4gICAgICAgICAgICAgICAgICBbY29uZmlnXT1cImdhbGxlcnlSZWYuY29uZmlnIHwgYXN5bmNcIlxyXG4gICAgICAgICAgICAgICAgICAoYWN0aW9uKT1cIm9uQWN0aW9uKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAoaXRlbUNsaWNrKT1cIm9uSXRlbUNsaWNrKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAodGh1bWJDbGljayk9XCJvblRodW1iQ2xpY2soJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgIChlcnJvcik9XCJvbkVycm9yKCRldmVudClcIj48L2dhbGxlcnktY29yZT5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcblxyXG4gIGdhbGxlcnlSZWY6IEdhbGxlcnlSZWY7XHJcbiAgQElucHV0KCkgaWQ6IHN0cmluZztcclxuICBASW5wdXQoKSBpdGVtczogR2FsbGVyeUl0ZW0gW107XHJcbiAgQElucHV0KCkgbmF2OiBib29sZWFuID0gdGhpcy5fZ2FsbGVyeS5jb25maWcubmF2O1xyXG4gIEBJbnB1dCgpIGRvdHM6IGJvb2xlYW4gPSB0aGlzLl9nYWxsZXJ5LmNvbmZpZy5kb3RzO1xyXG4gIEBJbnB1dCgpIGxvb3A6IGJvb2xlYW4gPSB0aGlzLl9nYWxsZXJ5LmNvbmZpZy5sb29wO1xyXG4gIEBJbnB1dCgpIHRodW1iOiBib29sZWFuID0gdGhpcy5fZ2FsbGVyeS5jb25maWcudGh1bWI7XHJcbiAgQElucHV0KCkgem9vbU91dDogbnVtYmVyID0gdGhpcy5fZ2FsbGVyeS5jb25maWcuem9vbU91dDtcclxuICBASW5wdXQoKSBjb3VudGVyOiBib29sZWFuID0gdGhpcy5fZ2FsbGVyeS5jb25maWcuY291bnRlcjtcclxuICBASW5wdXQoKSBhdXRvUGxheTogYm9vbGVhbiA9IHRoaXMuX2dhbGxlcnkuY29uZmlnLmF1dG9QbGF5O1xyXG4gIEBJbnB1dCgpIGdlc3R1cmVzOiBib29sZWFuID0gdGhpcy5fZ2FsbGVyeS5jb25maWcuZ2VzdHVyZXM7XHJcbiAgQElucHV0KCkgdGh1bWJXaWR0aDogbnVtYmVyID0gdGhpcy5fZ2FsbGVyeS5jb25maWcudGh1bWJXaWR0aDtcclxuICBASW5wdXQoKSB0aHVtYkhlaWdodDogbnVtYmVyID0gdGhpcy5fZ2FsbGVyeS5jb25maWcudGh1bWJIZWlnaHQ7XHJcbiAgQElucHV0KCkgZGlzYWJsZVRodW1iOiBib29sZWFuID0gdGhpcy5fZ2FsbGVyeS5jb25maWcuZGlzYWJsZVRodW1iO1xyXG4gIEBJbnB1dCgpIHBhblNlbnNpdGl2aXR5OiBudW1iZXIgPSB0aGlzLl9nYWxsZXJ5LmNvbmZpZy5wYW5TZW5zaXRpdml0eTtcclxuICBASW5wdXQoKSBwbGF5ZXJJbnRlcnZhbDogbnVtYmVyID0gdGhpcy5fZ2FsbGVyeS5jb25maWcucGxheWVySW50ZXJ2YWw7XHJcbiAgQElucHV0KCkgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+ID0gdGhpcy5fZ2FsbGVyeS5jb25maWcuaXRlbVRlbXBsYXRlO1xyXG4gIEBJbnB1dCgpIHRodW1iVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gPSB0aGlzLl9nYWxsZXJ5LmNvbmZpZy50aHVtYlRlbXBsYXRlO1xyXG4gIEBJbnB1dCgpIHRodW1iTW9kZTogJ3N0cmljdCcgfCAnZnJlZScgPSB0aGlzLl9nYWxsZXJ5LmNvbmZpZy50aHVtYk1vZGU7XHJcbiAgQElucHV0KCkgaW1hZ2VTaXplOiAnY292ZXInIHwgJ2NvbnRhaW4nID0gdGhpcy5fZ2FsbGVyeS5jb25maWcuaW1hZ2VTaXplO1xyXG4gIEBJbnB1dCgpIHNsaWRpbmdEaXJlY3Rpb246ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcgPSB0aGlzLl9nYWxsZXJ5LmNvbmZpZy5zbGlkaW5nRGlyZWN0aW9uO1xyXG4gIEBJbnB1dCgpIGxvYWRpbmdTdHJhdGVneTogJ3ByZWxvYWQnIHwgJ2xhenknIHwgJ2RlZmF1bHQnID0gdGhpcy5fZ2FsbGVyeS5jb25maWcubG9hZGluZ1N0cmF0ZWd5O1xyXG4gIEBJbnB1dCgpIHRodW1iUG9zaXRpb246ICd0b3AnIHwgJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdib3R0b20nID0gdGhpcy5fZ2FsbGVyeS5jb25maWcudGh1bWJQb3NpdGlvbjtcclxuXHJcbiAgLy8gSW5wdXRzIHVzZWQgYnkgdGhlIGxpZ2h0Ym94XHJcblxyXG4gIC8qKiBEZXN0cm95IGdhbGxlcnkgcmVmIG9uIGNvbXBvbmVudCBkZXN0cm95IGV2ZW50ICovXHJcbiAgQElucHV0KCkgZGVzdHJveVJlZiA9IHRydWU7XHJcblxyXG4gIC8qKiBTa2lwIGluaXRpYWxpemluZyB0aGUgY29uZmlnIHdpdGggY29tcG9uZW50cyBpbnB1dHMgKExpZ2h0Ym94IG1vZGUpICovXHJcbiAgQElucHV0KCkgc2tpcEluaXRDb25maWcgPSBmYWxzZTtcclxuXHJcbiAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG4gIEBPdXRwdXQoKSB0aHVtYkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIHBsYXlpbmdDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbGxlcnlTdGF0ZT4oKTtcclxuICBAT3V0cHV0KCkgaW5kZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbGxlcnlTdGF0ZT4oKTtcclxuICBAT3V0cHV0KCkgaXRlbXNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbGxlcnlTdGF0ZT4oKTtcclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbGxlcnlFcnJvcj4oKTtcclxuXHJcbiAgcHJpdmF0ZSBfaXRlbUNsaWNrJDogU3Vic2NyaXB0aW9uTGlrZSA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcclxuICBwcml2YXRlIF90aHVtYkNsaWNrJDogU3Vic2NyaXB0aW9uTGlrZSA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcclxuICBwcml2YXRlIF9pdGVtQ2hhbmdlJDogU3Vic2NyaXB0aW9uTGlrZSA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcclxuICBwcml2YXRlIF9pbmRleENoYW5nZSQ6IFN1YnNjcmlwdGlvbkxpa2UgPSBTdWJzY3JpcHRpb24uRU1QVFk7XHJcbiAgcHJpdmF0ZSBfcGxheWluZ0NoYW5nZSQ6IFN1YnNjcmlwdGlvbkxpa2UgPSBTdWJzY3JpcHRpb24uRU1QVFk7XHJcbiAgcHJpdmF0ZSBfcGxheWVyTGlzdGVuZXIkOiBTdWJzY3JpcHRpb25MaWtlID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9nYWxsZXJ5OiBHYWxsZXJ5KSB7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENvbmZpZygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hdjogdGhpcy5uYXYsXHJcbiAgICAgIGRvdHM6IHRoaXMuZG90cyxcclxuICAgICAgbG9vcDogdGhpcy5sb29wLFxyXG4gICAgICB0aHVtYjogdGhpcy50aHVtYixcclxuICAgICAgem9vbU91dDogdGhpcy56b29tT3V0LFxyXG4gICAgICBjb3VudGVyOiB0aGlzLmNvdW50ZXIsXHJcbiAgICAgIGF1dG9QbGF5OiB0aGlzLmF1dG9QbGF5LFxyXG4gICAgICBnZXN0dXJlczogdGhpcy5nZXN0dXJlcyxcclxuICAgICAgaW1hZ2VTaXplOiB0aGlzLmltYWdlU2l6ZSxcclxuICAgICAgdGh1bWJNb2RlOiB0aGlzLnRodW1iTW9kZSxcclxuICAgICAgdGh1bWJXaWR0aDogdGhpcy50aHVtYldpZHRoLFxyXG4gICAgICB0aHVtYkhlaWdodDogdGhpcy50aHVtYkhlaWdodCxcclxuICAgICAgZGlzYWJsZVRodW1iOiB0aGlzLmRpc2FibGVUaHVtYixcclxuICAgICAgaXRlbVRlbXBsYXRlOiB0aGlzLml0ZW1UZW1wbGF0ZSxcclxuICAgICAgdGh1bWJUZW1wbGF0ZTogdGhpcy50aHVtYlRlbXBsYXRlLFxyXG4gICAgICB0aHVtYlBvc2l0aW9uOiB0aGlzLnRodW1iUG9zaXRpb24sXHJcbiAgICAgIHBhblNlbnNpdGl2aXR5OiB0aGlzLnBhblNlbnNpdGl2aXR5LFxyXG4gICAgICBwbGF5ZXJJbnRlcnZhbDogdGhpcy5wbGF5ZXJJbnRlcnZhbCxcclxuICAgICAgbG9hZGluZ1N0cmF0ZWd5OiB0aGlzLmxvYWRpbmdTdHJhdGVneSxcclxuICAgICAgc2xpZGluZ0RpcmVjdGlvbjogdGhpcy5zbGlkaW5nRGlyZWN0aW9uLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIG9uQWN0aW9uKGk6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgc3dpdGNoIChpKSB7XHJcbiAgICAgIGNhc2UgJ25leHQnOlxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeVJlZi5uZXh0KCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3ByZXYnOlxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeVJlZi5wcmV2KCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5UmVmLnNldCg8bnVtYmVyPmkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKHRoaXMuZ2FsbGVyeVJlZikge1xyXG4gICAgICB0aGlzLmdhbGxlcnlSZWYuc2V0Q29uZmlnKHRoaXMuZ2V0Q29uZmlnKCkpO1xyXG5cclxuICAgICAgaWYgKGNoYW5nZXMuaXRlbXMgJiYgY2hhbmdlcy5pdGVtcy5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMuaXRlbXMucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMubG9hZCh0aGlzLml0ZW1zKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICAvLyBHZXQgZ2FsbGVyeSBpbnN0YW5jZSBieSBpZFxyXG4gICAgaWYgKHRoaXMuc2tpcEluaXRDb25maWcpIHtcclxuICAgICAgdGhpcy5nYWxsZXJ5UmVmID0gdGhpcy5fZ2FsbGVyeS5yZWYodGhpcy5pZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmdhbGxlcnlSZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLmlkLCB0aGlzLmdldENvbmZpZygpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMb2FkIGdhbGxlcnkgaXRlbXNcclxuICAgIHRoaXMubG9hZCh0aGlzLml0ZW1zKTtcclxuXHJcbiAgICAvLyBBY3RpdmF0ZSBwbGF5ZXIgbGlzdGVuZXJcclxuICAgIHRoaXMuX3BsYXllckxpc3RlbmVyJCA9IHRoaXMuZ2FsbGVyeVJlZi5hY3RpdmF0ZVBsYXllcigpLnN1YnNjcmliZSgpO1xyXG5cclxuICAgIC8vIFN1YnNjcmliZXMgdG8gZXZlbnRzIG9uIGRlbWFuZFxyXG4gICAgaWYgKHRoaXMuaW5kZXhDaGFuZ2Uub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLl9pbmRleENoYW5nZSQgPSB0aGlzLmdhbGxlcnlSZWYuaW5kZXhDaGFuZ2VkLnN1YnNjcmliZSgoc3RhdGU6IEdhbGxlcnlTdGF0ZSkgPT4gdGhpcy5pbmRleENoYW5nZS5lbWl0KHN0YXRlKSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5pdGVtc0NoYW5nZS5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuX2l0ZW1DaGFuZ2UkID0gdGhpcy5nYWxsZXJ5UmVmLml0ZW1zQ2hhbmdlZC5zdWJzY3JpYmUoKHN0YXRlOiBHYWxsZXJ5U3RhdGUpID0+IHRoaXMuaXRlbXNDaGFuZ2UuZW1pdChzdGF0ZSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucGxheWluZ0NoYW5nZS5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuX3BsYXlpbmdDaGFuZ2UkID0gdGhpcy5nYWxsZXJ5UmVmLnBsYXlpbmdDaGFuZ2VkLnN1YnNjcmliZSgoc3RhdGU6IEdhbGxlcnlTdGF0ZSkgPT4gdGhpcy5wbGF5aW5nQ2hhbmdlLmVtaXQoc3RhdGUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGFydCBwbGF5aW5nIGlmIGF1dG8tcGxheSBpcyBzZXQgdG8gdHJ1ZVxyXG4gICAgaWYgKHRoaXMuYXV0b1BsYXkpIHtcclxuICAgICAgdGhpcy5wbGF5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX2l0ZW1DbGljayQudW5zdWJzY3JpYmUoKTtcclxuICAgIHRoaXMuX3RodW1iQ2xpY2skLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLl9pdGVtQ2hhbmdlJC51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5faW5kZXhDaGFuZ2UkLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLl9wbGF5aW5nQ2hhbmdlJC51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5fcGxheWVyTGlzdGVuZXIkLnVuc3Vic2NyaWJlKCk7XHJcbiAgICBpZiAodGhpcy5kZXN0cm95UmVmKSB7XHJcbiAgICAgIHRoaXMuZ2FsbGVyeVJlZi5kZXN0cm95KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkl0ZW1DbGljayhpOiBudW1iZXIpIHtcclxuICAgIHRoaXMuaXRlbUNsaWNrLmVtaXQoaSk7XHJcbiAgICB0aGlzLmdhbGxlcnlSZWYuaXRlbUNsaWNrLm5leHQoaSk7XHJcbiAgfVxyXG5cclxuICBvblRodW1iQ2xpY2soaTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmdhbGxlcnlSZWYuc2V0KGkpO1xyXG4gICAgdGhpcy50aHVtYkNsaWNrLmVtaXQoaSk7XHJcbiAgICB0aGlzLmdhbGxlcnlSZWYudGh1bWJDbGljay5uZXh0KGkpO1xyXG4gIH1cclxuXHJcbiAgb25FcnJvcihlcnI6IEdhbGxlcnlFcnJvcikge1xyXG4gICAgdGhpcy5lcnJvci5lbWl0KGVycik7XHJcbiAgICB0aGlzLmdhbGxlcnlSZWYuZXJyb3IubmV4dChlcnIpO1xyXG4gIH1cclxuXHJcbiAgbG9hZChpdGVtczogR2FsbGVyeUl0ZW1bXSkge1xyXG4gICAgdGhpcy5nYWxsZXJ5UmVmLmxvYWQoaXRlbXMpO1xyXG4gIH1cclxuXHJcbiAgYWRkKGl0ZW06IEdhbGxlcnlJdGVtLCBhY3RpdmU/OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmdhbGxlcnlSZWYuYWRkKGl0ZW0sIGFjdGl2ZSk7XHJcbiAgfVxyXG5cclxuICBhZGRJbWFnZShkYXRhOiBhbnksIGFjdGl2ZT86IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuYWRkKG5ldyBJbWFnZUl0ZW0oZGF0YSksIGFjdGl2ZSk7XHJcbiAgfVxyXG5cclxuICBhZGRWaWRlbyhkYXRhOiBhbnksIGFjdGl2ZT86IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuYWRkKG5ldyBWaWRlb0l0ZW0oZGF0YSksIGFjdGl2ZSk7XHJcbiAgfVxyXG5cclxuICBhZGRJZnJhbWUoZGF0YTogYW55LCBhY3RpdmU/OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmFkZChuZXcgSWZyYW1lSXRlbShkYXRhKSwgYWN0aXZlKTtcclxuICB9XHJcblxyXG4gIGFkZFlvdXR1YmUoZGF0YTogYW55LCBhY3RpdmU/OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmFkZChuZXcgWW91dHViZUl0ZW0oZGF0YSksIGFjdGl2ZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmUoaTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmdhbGxlcnlSZWYucmVtb3ZlKGkpO1xyXG4gIH1cclxuXHJcbiAgbmV4dCgpIHtcclxuICAgIHRoaXMuZ2FsbGVyeVJlZi5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICBwcmV2KCkge1xyXG4gICAgdGhpcy5nYWxsZXJ5UmVmLnByZXYoKTtcclxuICB9XHJcblxyXG4gIHNldChpOiBudW1iZXIpIHtcclxuICAgIHRoaXMuZ2FsbGVyeVJlZi5zZXQoaSk7XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuZ2FsbGVyeVJlZi5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgcGxheShpbnRlcnZhbD86IG51bWJlcikge1xyXG4gICAgdGhpcy5nYWxsZXJ5UmVmLnBsYXkoaW50ZXJ2YWwpO1xyXG4gIH1cclxuXHJcbiAgc3RvcCgpIHtcclxuICAgIHRoaXMuZ2FsbGVyeVJlZi5zdG9wKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhbGxlcnlTdGF0ZSwgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1uYXYnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8aSAqbmdJZj1cImNvbmZpZy5sb29wIHx8IHN0YXRlLmhhc1ByZXZcIlxyXG4gICAgICAgY2xhc3M9XCJnLW5hdi1wcmV2XCJcclxuICAgICAgIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiXHJcbiAgICAgICAodGFwQ2xpY2spPVwiYWN0aW9uLmVtaXQoJ3ByZXYnKVwiXHJcbiAgICAgICBbaW5uZXJIdG1sXT1cIm5hdkljb25cIj48L2k+XHJcblxyXG4gICAgPGkgKm5nSWY9XCJjb25maWcubG9vcCB8fCBzdGF0ZS5oYXNOZXh0XCJcclxuICAgICAgIGNsYXNzPVwiZy1uYXYtbmV4dFwiXHJcbiAgICAgICBhcmlhLWxhYmVsPVwiTmV4dFwiXHJcbiAgICAgICAodGFwQ2xpY2spPVwiYWN0aW9uLmVtaXQoJ25leHQnKVwiXHJcbiAgICAgICBbaW5uZXJIdG1sXT1cIm5hdkljb25cIj48L2k+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeU5hdkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIG5hdkljb246IFNhZmVIdG1sO1xyXG4gIEBJbnB1dCgpIHN0YXRlOiBHYWxsZXJ5U3RhdGU7XHJcbiAgQElucHV0KCkgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xyXG4gIEBPdXRwdXQoKSBhY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5uYXZJY29uID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHRoaXMuY29uZmlnLm5hdkljb24pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0QmluZGluZywgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcsIEdhbGxlcnlFcnJvciwgR2FsbGVyeVN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1jb3JlJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGdhbGxlcnktdGh1bWJzICpuZ0lmPVwiY29uZmlnLnRodW1iXCJcclxuICAgICAgICAgICAgICAgICAgICBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtjb25maWddPVwiY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgICAoYWN0aW9uKT1cImFjdGlvbi5lbWl0KCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAgICh0aHVtYkNsaWNrKT1cInRodW1iQ2xpY2suZW1pdCgkZXZlbnQpXCI+XHJcbiAgICA8L2dhbGxlcnktdGh1bWJzPlxyXG4gICAgPGRpdiBjbGFzcz1cImctYm94XCI+XHJcbiAgICAgIDxnYWxsZXJ5LXNsaWRlciBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgKGFjdGlvbik9XCJhY3Rpb24uZW1pdCgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgICAgICAgIChpdGVtQ2xpY2spPVwiaXRlbUNsaWNrLmVtaXQoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAoZXJyb3IpPVwiZXJyb3IuZW1pdCgkZXZlbnQpXCI+XHJcblxyXG4gICAgICAgIDxnYWxsZXJ5LW5hdiAqbmdJZj1cImNvbmZpZy5uYXYgJiYgc3RhdGUuaXRlbXMubGVuZ3RoID4gMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIFtjb25maWddPVwiY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgICAgKGFjdGlvbik9XCJhY3Rpb24uZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgICAgPC9nYWxsZXJ5LW5hdj5cclxuXHJcbiAgICAgIDwvZ2FsbGVyeS1zbGlkZXI+XHJcblxyXG4gICAgICA8Z2FsbGVyeS1kb3RzICpuZ0lmPVwiY29uZmlnLmRvdHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgKGFjdGlvbik9XCJhY3Rpb24uZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgIDwvZ2FsbGVyeS1kb3RzPlxyXG5cclxuICAgICAgPGdhbGxlcnktY291bnRlciAqbmdJZj1cImNvbmZpZy5jb3VudGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICBbc3RhdGVdPVwic3RhdGVcIj5cclxuICAgICAgPC9nYWxsZXJ5LWNvdW50ZXI+XHJcbiAgICA8L2Rpdj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5Q29yZUNvbXBvbmVudCB7XHJcblxyXG4gIEBJbnB1dCgpIHN0YXRlOiBHYWxsZXJ5U3RhdGU7XHJcbiAgQElucHV0KCkgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xyXG4gIEBPdXRwdXQoKSBhY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bWJlcj4oKTtcclxuICBAT3V0cHV0KCkgaXRlbUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIHRodW1iQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbGxlcnlFcnJvcj4oKTtcclxuXHJcbiAgLyoqIFNldCB0aHVtYm5haWxzIHBvc2l0aW9uICovXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnRodW1iUG9zaXRpb24nKSBnZXQgdGh1bWJQb3NpdGlvbigpOiAndG9wJyB8ICdsZWZ0JyB8ICdyaWdodCcgfCAnYm90dG9tJyB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcudGh1bWJQb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKiBTZXQgc2xpZGluZyBkaXJlY3Rpb24gKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIuc2xpZGluZ0RpcmVjdGlvbicpIGdldCBzbGlkaW5nRGlyZWN0aW9uKCk6ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnNsaWRpbmdEaXJlY3Rpb247XHJcbiAgfVxyXG5cclxuICAvKiogRGlzYWJsZSB0aHVtYm5haWxzIGNsaWNrcyAqL1xyXG4gIEBIb3N0QmluZGluZygnYXR0ci5kaXNhYmxlVGh1bWInKSBnZXQgZGlzYWJsZVRodW1iKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmRpc2FibGVUaHVtYjtcclxuICB9XHJcblxyXG4gIC8qKiBTZXQgZ2FsbGVyeSBpbWFnZSBzaXplICovXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmltYWdlU2l6ZScpIGdldCBpbWFnZVNpemUoKTogJ2NvdmVyJyB8ICdjb250YWluJyB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcuaW1hZ2VTaXplO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhbGxlcnlTdGF0ZSB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktZG90cycsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJnLWRvdFwiXHJcbiAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLml0ZW1zOyBsZXQgaSA9IGluZGV4XCJcclxuICAgICAgICAgW2NsYXNzLmctZG90LWFjdGl2ZV09XCJpID09PSBzdGF0ZS5jdXJySW5kZXhcIlxyXG4gICAgICAgICAodGFwQ2xpY2spPVwiYWN0aW9uLmVtaXQoaSlcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImctZG90LWlubmVyXCI+PC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5RG90c0NvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgc3RhdGU6IEdhbGxlcnlTdGF0ZTtcclxuICBAT3V0cHV0KCkgYWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIE5nWm9uZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnLCBHYWxsZXJ5U3RhdGUsIFRodW1ibmFpbHNQb3NpdGlvbiwgVGh1bWJuYWlsc01vZGUsIEdhbGxlcnlFcnJvciB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IFNsaWRlclN0YXRlLCBXb3JrZXJTdGF0ZSB9IGZyb20gJy4uL21vZGVscy9zbGlkZXIubW9kZWwnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBIYW1tZXI6IGFueTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS10aHVtYnMnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2ICpuZ0lmPVwic2xpZGVyU3RhdGUkIHwgYXN5bmM7IGxldCBzbGlkZXJTdGF0ZVwiXHJcbiAgICAgICAgIGNsYXNzPVwiZy10aHVtYnMtY29udGFpbmVyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJnLXNsaWRlclwiXHJcbiAgICAgICAgICAgW2NsYXNzLmctbm8tdHJhbnNpdGlvbl09XCJzbGlkZXJTdGF0ZS5hY3RpdmVcIlxyXG4gICAgICAgICAgIFtuZ1N0eWxlXT1cInNsaWRlclN0YXRlLnN0eWxlXCI+XHJcblxyXG4gICAgICAgIDxnYWxsZXJ5LXRodW1iICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLml0ZW1zO2xldCBpID0gaW5kZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXT1cIml0ZW0udHlwZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFtkYXRhXT1cIml0ZW0uZGF0YVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgW2N1cnJJbmRleF09XCJzdGF0ZS5jdXJySW5kZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFtpbmRleF09XCJpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICBbdGFwQ2xpY2tEaXNhYmxlZF09XCJjb25maWcuZGlzYWJsZVRodW1iXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAodGFwQ2xpY2spPVwidGh1bWJDbGljay5lbWl0KGkpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAoZXJyb3IpPVwiZXJyb3IuZW1pdCh7aXRlbUluZGV4OiBpLCBlcnJvcjogJGV2ZW50fSlcIj48L2dhbGxlcnktdGh1bWI+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeVRodW1ic0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICAvKiogU2xpZGluZyB3b3JrZXIgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9zbGlkaW5nV29ya2VyJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8V29ya2VyU3RhdGU+KHt2YWx1ZTogMCwgYWN0aXZlOiBmYWxzZX0pO1xyXG5cclxuICAvKiogSGFtbWVySlMgaW5zdGFuY2UgKi9cclxuICBwcml2YXRlIF9oYW1tZXI6IGFueTtcclxuXHJcbiAgLyoqIEN1cnJlbnQgc2xpZGVyIHBvc2l0aW9uIGluIGZyZWUgc2xpZGluZyBtb2RlICovXHJcbiAgcHJpdmF0ZSBfZnJlZU1vZGVDdXJyZW50T2Zmc2V0ID0gMDtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHNsaWRpbmcgc3RhdGUgKi9cclxuICBzbGlkZXJTdGF0ZSQ6IE9ic2VydmFibGU8U2xpZGVyU3RhdGU+O1xyXG5cclxuICAvKiogR2FsbGVyeSBzdGF0ZSAqL1xyXG4gIEBJbnB1dCgpIHN0YXRlOiBHYWxsZXJ5U3RhdGU7XHJcblxyXG4gIC8qKiBHYWxsZXJ5IGNvbmZpZyAqL1xyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIGFjdGl2ZSBpdGVtIHNob3VsZCBjaGFuZ2UgKi9cclxuICBAT3V0cHV0KCkgYWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudW1iZXI+KCk7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRodW1iIGlzIGNsaWNrZWQgKi9cclxuICBAT3V0cHV0KCkgdGh1bWJDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbGxlcnlFcnJvcj4oKTtcclxuXHJcbiAgLyoqIEhvc3QgaGVpZ2h0ICovXHJcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5oZWlnaHQnKSBoZWlnaHQ6IHN0cmluZztcclxuXHJcbiAgLyoqIEhvc3Qgd2lkdGggKi9cclxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoJykgd2lkdGg6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3pvbmU6IE5nWm9uZSkge1xyXG5cclxuICAgIC8vIEFjdGl2YXRlIHNsaWRpbmcgd29ya2VyXHJcbiAgICB0aGlzLnNsaWRlclN0YXRlJCA9IHRoaXMuX3NsaWRpbmdXb3JrZXIkLnBpcGUobWFwKChzdGF0ZTogV29ya2VyU3RhdGUpID0+ICh7XHJcbiAgICAgIHN0eWxlOiB0aGlzLmdldFNsaWRlclN0eWxlcyhzdGF0ZSksXHJcbiAgICAgIGFjdGl2ZTogc3RhdGUuYWN0aXZlXHJcbiAgICB9KSkpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICAvLyBSZWZyZXNoIHRoZSBzbGlkZXJcclxuICAgIHRoaXMudXBkYXRlU2xpZGVyKHt2YWx1ZTogMCwgYWN0aXZlOiBmYWxzZX0pO1xyXG4gICAgdGhpcy5fZnJlZU1vZGVDdXJyZW50T2Zmc2V0ID0gMDtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMuY29uZmlnLmdlc3R1cmVzICYmICF0aGlzLmNvbmZpZy5kaXNhYmxlVGh1bWIgJiYgdHlwZW9mIEhhbW1lciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcbiAgICAgIC8vIEFjdGl2YXRlIGdlc3R1cmVzXHJcbiAgICAgIHRoaXMuX2hhbW1lciA9IG5ldyBIYW1tZXIodGhpcy5fZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMuX2hhbW1lci5nZXQoJ3BhbicpLnNldCh7ZGlyZWN0aW9uOiBIYW1tZXIuRElSRUNUSU9OX0FMTH0pO1xyXG5cclxuICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgLy8gTW92ZSB0aGUgc2xpZGVyXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmNvbmZpZy50aHVtYk1vZGUpIHtcclxuICAgICAgICAgIGNhc2UgVGh1bWJuYWlsc01vZGUuU3RyaWN0OlxyXG4gICAgICAgICAgICB0aGlzLl9oYW1tZXIub24oJ3BhbicsIChlKSA9PiB0aGlzLnN0cmljdE1vZGUoZSkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgVGh1bWJuYWlsc01vZGUuRnJlZTpcclxuICAgICAgICAgICAgdGhpcy5faGFtbWVyLm9uKCdwYW4nLCAoZSkgPT4gdGhpcy5mcmVlTW9kZShlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMuX2hhbW1lcikge1xyXG4gICAgICB0aGlzLl9oYW1tZXIuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2xpZGluZyBzdHJpY3QgbW9kZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RyaWN0TW9kZShlKSB7XHJcbiAgICBzd2l0Y2ggKHRoaXMuY29uZmlnLnRodW1iUG9zaXRpb24pIHtcclxuICAgICAgY2FzZSBUaHVtYm5haWxzUG9zaXRpb24uUmlnaHQ6XHJcbiAgICAgIGNhc2UgVGh1bWJuYWlsc1Bvc2l0aW9uLkxlZnQ6XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiBlLmRlbHRhWSwgYWN0aXZlOiB0cnVlfSk7XHJcbiAgICAgICAgaWYgKGUuaXNGaW5hbCkge1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiAwLCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICB0aGlzLnZlcnRpY2FsUGFuKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBUaHVtYm5haWxzUG9zaXRpb24uVG9wOlxyXG4gICAgICBjYXNlIFRodW1ibmFpbHNQb3NpdGlvbi5Cb3R0b206XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiBlLmRlbHRhWCwgYWN0aXZlOiB0cnVlfSk7XHJcbiAgICAgICAgaWYgKGUuaXNGaW5hbCkge1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiAwLCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICB0aGlzLmhvcml6b250YWxQYW4oZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2xpZGluZyBmcmVlIG1vZGVcclxuICAgKi9cclxuICBwcml2YXRlIGZyZWVNb2RlKGUpIHtcclxuICAgIHN3aXRjaCAodGhpcy5jb25maWcudGh1bWJQb3NpdGlvbikge1xyXG4gICAgICBjYXNlIFRodW1ibmFpbHNQb3NpdGlvbi5SaWdodDpcclxuICAgICAgY2FzZSBUaHVtYm5haWxzUG9zaXRpb24uTGVmdDpcclxuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlcih7dmFsdWU6IHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCArIGUuZGVsdGFZLCBhY3RpdmU6IHRydWV9KTtcclxuICAgICAgICBpZiAoZS5pc0ZpbmFsKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5taW5GcmVlU2Nyb2xsRXhjZWVkZWQoZS5kZWx0YVksIHRoaXMuY29uZmlnLnRodW1iV2lkdGgsIHRoaXMuY29uZmlnLnRodW1iSGVpZ2h0KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9mcmVlTW9kZUN1cnJlbnRPZmZzZXQgPSAtKHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoIC0gMSAtIHRoaXMuc3RhdGUuY3VyckluZGV4KSAqIHRoaXMuY29uZmlnLnRodW1iSGVpZ2h0O1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1heEZyZWVTY3JvbGxFeGNlZWRlZChlLmRlbHRhWSwgdGhpcy5jb25maWcudGh1bWJIZWlnaHQsIHRoaXMuY29uZmlnLnRodW1iV2lkdGgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCA9IHRoaXMuc3RhdGUuY3VyckluZGV4ICogdGhpcy5jb25maWcudGh1bWJIZWlnaHQ7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9mcmVlTW9kZUN1cnJlbnRPZmZzZXQgKz0gZS5kZWx0YVk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlcih7dmFsdWU6IHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCwgYWN0aXZlOiBmYWxzZX0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBUaHVtYm5haWxzUG9zaXRpb24uVG9wOlxyXG4gICAgICBjYXNlIFRodW1ibmFpbHNQb3NpdGlvbi5Cb3R0b206XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiB0aGlzLl9mcmVlTW9kZUN1cnJlbnRPZmZzZXQgKyBlLmRlbHRhWCwgYWN0aXZlOiB0cnVlfSk7XHJcbiAgICAgICAgaWYgKGUuaXNGaW5hbCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMubWluRnJlZVNjcm9sbEV4Y2VlZGVkKGUuZGVsdGFYLCB0aGlzLmNvbmZpZy50aHVtYkhlaWdodCwgdGhpcy5jb25maWcudGh1bWJXaWR0aCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fZnJlZU1vZGVDdXJyZW50T2Zmc2V0ID0gLSh0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAtIDEgLSB0aGlzLnN0YXRlLmN1cnJJbmRleCkgKiB0aGlzLmNvbmZpZy50aHVtYldpZHRoO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1heEZyZWVTY3JvbGxFeGNlZWRlZChlLmRlbHRhWCwgdGhpcy5jb25maWcudGh1bWJXaWR0aCwgdGhpcy5jb25maWcudGh1bWJIZWlnaHQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCA9IHRoaXMuc3RhdGUuY3VyckluZGV4ICogdGhpcy5jb25maWcudGh1bWJXaWR0aDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCArPSBlLmRlbHRhWDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMudXBkYXRlU2xpZGVyKHt2YWx1ZTogdGhpcy5fZnJlZU1vZGVDdXJyZW50T2Zmc2V0LCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgdGhlIG1pbmltdW0gZnJlZSBzY3JvbGwgaXMgZXhjZWVkZWQgKHVzZWQgaW4gQm90dG9tLCBMZWZ0IGRpcmVjdGlvbnMpXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtaW5GcmVlU2Nyb2xsRXhjZWVkZWQoZGVsdGE6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAtKHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCArIGRlbHRhIC0gd2lkdGggLyAyKSA+ICh0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAtIHRoaXMuc3RhdGUuY3VyckluZGV4KSAqIGhlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHRoZSBtYXhpbXVtIGZyZWUgc2Nyb2xsIGlzIGV4Y2VlZGVkICh1c2VkIGluIFRvcCwgUmlnaHQgZGlyZWN0aW9ucylcclxuICAgKi9cclxuICBwcml2YXRlIG1heEZyZWVTY3JvbGxFeGNlZWRlZChkZWx0YTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZyZWVNb2RlQ3VycmVudE9mZnNldCArIGRlbHRhID4gKHRoaXMuc3RhdGUuY3VyckluZGV4ICogd2lkdGgpICsgKGhlaWdodCAvIDIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBzbGlkaW5nIHN0YXRlIHRvIHN0eWxlc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0U2xpZGVyU3R5bGVzKHN0YXRlOiBXb3JrZXJTdGF0ZSk6IGFueSB7XHJcbiAgICBsZXQgdmFsdWU6IG51bWJlcjtcclxuICAgIHN3aXRjaCAodGhpcy5jb25maWcudGh1bWJQb3NpdGlvbikge1xyXG4gICAgICBjYXNlIFRodW1ibmFpbHNQb3NpdGlvbi5Ub3A6XHJcbiAgICAgIGNhc2UgVGh1bWJuYWlsc1Bvc2l0aW9uLkJvdHRvbTpcclxuICAgICAgICB0aGlzLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5jb25maWcudGh1bWJIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgIHZhbHVlID0gLSh0aGlzLnN0YXRlLmN1cnJJbmRleCAqIHRoaXMuY29uZmlnLnRodW1iV2lkdGgpIC0gKHRoaXMuY29uZmlnLnRodW1iV2lkdGggLyAyIC0gc3RhdGUudmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCgke3ZhbHVlfXB4LCAwLCAwKWAsXHJcbiAgICAgICAgICB3aWR0aDogdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggKiB0aGlzLmNvbmZpZy50aHVtYldpZHRoICsgJ3B4JyxcclxuICAgICAgICAgIGhlaWdodDogJzEwMCUnXHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBUaHVtYm5haWxzUG9zaXRpb24uTGVmdDpcclxuICAgICAgY2FzZSBUaHVtYm5haWxzUG9zaXRpb24uUmlnaHQ6XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuY29uZmlnLnRodW1iV2lkdGggKyAncHgnO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgIHZhbHVlID0gLSh0aGlzLnN0YXRlLmN1cnJJbmRleCAqIHRoaXMuY29uZmlnLnRodW1iSGVpZ2h0KSAtICh0aGlzLmNvbmZpZy50aHVtYkhlaWdodCAvIDIgLSBzdGF0ZS52YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKDAsICR7dmFsdWV9cHgsIDApYCxcclxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoICogdGhpcy5jb25maWcudGh1bWJIZWlnaHQgKyAncHgnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdmVydGljYWxQYW4oZTogYW55KSB7XHJcbiAgICBpZiAoZS52ZWxvY2l0eVkgPiAwLjMpIHtcclxuICAgICAgdGhpcy5wcmV2KCk7XHJcbiAgICB9IGVsc2UgaWYgKGUudmVsb2NpdHlZIDwgLTAuMykge1xyXG4gICAgICB0aGlzLm5leHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChlLmRlbHRhWSAvIDIgPD0gLXRoaXMuY29uZmlnLnRodW1iSGVpZ2h0ICogdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggLyB0aGlzLmNvbmZpZy5wYW5TZW5zaXRpdml0eSkge1xyXG4gICAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGUuZGVsdGFZIC8gMiA+PSB0aGlzLmNvbmZpZy50aHVtYkhlaWdodCAqIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoIC8gdGhpcy5jb25maWcucGFuU2Vuc2l0aXZpdHkpIHtcclxuICAgICAgICB0aGlzLnByZXYoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmFjdGlvbi5lbWl0KHRoaXMuc3RhdGUuY3VyckluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBob3Jpem9udGFsUGFuKGU6IGFueSkge1xyXG4gICAgaWYgKGUudmVsb2NpdHlYID4gMC4zKSB7XHJcbiAgICAgIHRoaXMucHJldigpO1xyXG4gICAgfSBlbHNlIGlmIChlLnZlbG9jaXR5WCA8IC0wLjMpIHtcclxuICAgICAgdGhpcy5uZXh0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZS5kZWx0YVggLyAyIDw9IC10aGlzLmNvbmZpZy50aHVtYldpZHRoICogdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggLyB0aGlzLmNvbmZpZy5wYW5TZW5zaXRpdml0eSkge1xyXG4gICAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGUuZGVsdGFYIC8gMiA+PSB0aGlzLmNvbmZpZy50aHVtYldpZHRoICogdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggLyB0aGlzLmNvbmZpZy5wYW5TZW5zaXRpdml0eSkge1xyXG4gICAgICAgIHRoaXMucHJldigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYWN0aW9uLmVtaXQodGhpcy5zdGF0ZS5jdXJySW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG5leHQoKSB7XHJcbiAgICB0aGlzLmFjdGlvbi5lbWl0KCduZXh0Jyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByZXYoKSB7XHJcbiAgICB0aGlzLmFjdGlvbi5lbWl0KCdwcmV2Jyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVNsaWRlcihzdGF0ZTogV29ya2VyU3RhdGUpIHtcclxuICAgIHRoaXMuX3NsaWRpbmdXb3JrZXIkLm5leHQoey4uLnRoaXMuX3NsaWRpbmdXb3JrZXIkLnZhbHVlLCAuLi5zdGF0ZX0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgT25EZXN0cm95LFxyXG4gIE9uSW5pdCxcclxuICBPbkNoYW5nZXMsXHJcbiAgSW5qZWN0LFxyXG4gIE5nWm9uZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBQTEFURk9STV9JRFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCB0YXAsIGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgR2FsbGVyeVN0YXRlLCBHYWxsZXJ5Q29uZmlnLCBTbGlkaW5nRGlyZWN0aW9uLCBHYWxsZXJ5RXJyb3IgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBTbGlkZXJTdGF0ZSwgV29ya2VyU3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvc2xpZGVyLm1vZGVsJztcclxuXHJcbmRlY2xhcmUgY29uc3QgSGFtbWVyOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktc2xpZGVyJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiAqbmdJZj1cInNsaWRlclN0YXRlJCB8IGFzeW5jOyBsZXQgc2xpZGVyU3RhdGVcIlxyXG4gICAgICAgICBjbGFzcz1cImctaXRlbXMtY29udGFpbmVyXCJcclxuICAgICAgICAgW25nU3R5bGVdPVwiem9vbVwiPlxyXG5cclxuICAgICAgPGRpdiBjbGFzcz1cImctc2xpZGVyXCJcclxuICAgICAgICAgICBbY2xhc3MuZy1uby10cmFuc2l0aW9uXT1cInNsaWRlclN0YXRlLmFjdGl2ZVwiXHJcbiAgICAgICAgICAgW25nU3R5bGVdPVwic2xpZGVyU3RhdGUuc3R5bGVcIj5cclxuXHJcbiAgICAgICAgPGdhbGxlcnktaXRlbSAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtczsgbGV0IGkgPSBpbmRleFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBbdHlwZV09XCJpdGVtLnR5cGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgW2RhdGFdPVwiaXRlbS5kYXRhXCJcclxuICAgICAgICAgICAgICAgICAgICAgIFtjdXJySW5kZXhdPVwic3RhdGUuY3VyckluZGV4XCJcclxuICAgICAgICAgICAgICAgICAgICAgIFtpbmRleF09XCJpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICh0YXBDbGljayk9XCJpdGVtQ2xpY2suZW1pdChpKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAoZXJyb3IpPVwiZXJyb3IuZW1pdCh7aXRlbUluZGV4OiBpLCBlcnJvcjogJGV2ZW50fSlcIj5cclxuICAgICAgICA8L2dhbGxlcnktaXRlbT5cclxuXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeVNsaWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICAvKiogU2xpZGluZyB3b3JrZXIgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9zbGlkaW5nV29ya2VyJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8V29ya2VyU3RhdGU+KHt2YWx1ZTogMCwgYWN0aXZlOiBmYWxzZX0pO1xyXG5cclxuICAvKiogSGFtbWVySlMgaW5zdGFuY2UgKi9cclxuICBwcml2YXRlIF9oYW1tZXI6IGFueTtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIHZpZXcgaXMgcmUtc2l6ZWQgKi9cclxuICBwcml2YXRlIF9yZXNpemVTdWIkOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyBzbGlkaW5nIHN0YXRlICovXHJcbiAgc2xpZGVyU3RhdGUkOiBPYnNlcnZhYmxlPFNsaWRlclN0YXRlPjtcclxuXHJcbiAgLyoqIEdhbGxlcnkgc3RhdGUgKi9cclxuICBASW5wdXQoKSBzdGF0ZTogR2FsbGVyeVN0YXRlO1xyXG5cclxuICAvKiogR2FsbGVyeSBjb25maWcgKi9cclxuICBASW5wdXQoKSBjb25maWc6IEdhbGxlcnlDb25maWc7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSBhY3RpdmUgaXRlbSBzaG91bGQgY2hhbmdlICovXHJcbiAgQE91dHB1dCgpIGFjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyPigpO1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBpdGVtIGlzIGNsaWNrZWQgKi9cclxuICBAT3V0cHV0KCkgaXRlbUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8R2FsbGVyeUVycm9yPigpO1xyXG5cclxuICAvKiogSXRlbSB6b29tICovXHJcbiAgZ2V0IHpvb20oKSB7XHJcbiAgICByZXR1cm4ge3RyYW5zZm9ybTogYHBlcnNwZWN0aXZlKDUwcHgpIHRyYW5zbGF0ZTNkKDAsIDAsICR7LXRoaXMuY29uZmlnLnpvb21PdXR9cHgpYH07XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfem9uZTogTmdab25lLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtOiBPYmplY3QpIHtcclxuXHJcbiAgICAvLyBBY3RpdmF0ZSBzbGlkaW5nIHdvcmtlclxyXG4gICAgdGhpcy5zbGlkZXJTdGF0ZSQgPSB0aGlzLl9zbGlkaW5nV29ya2VyJC5waXBlKG1hcCgoc3RhdGU6IFdvcmtlclN0YXRlKSA9PiAoe1xyXG4gICAgICBzdHlsZTogdGhpcy5nZXRTbGlkZXJTdHlsZXMoc3RhdGUpLFxyXG4gICAgICBhY3RpdmU6IHN0YXRlLmFjdGl2ZVxyXG4gICAgfSkpKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgLy8gUmVmcmVzaCB0aGUgc2xpZGVyXHJcbiAgICB0aGlzLnVwZGF0ZVNsaWRlcih7dmFsdWU6IDAsIGFjdGl2ZTogZmFsc2V9KTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMuY29uZmlnLmdlc3R1cmVzICYmIHR5cGVvZiBIYW1tZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcblxyXG4gICAgICAvLyBBY3RpdmF0ZSBnZXN0dXJlc1xyXG4gICAgICB0aGlzLl9oYW1tZXIgPSBuZXcgSGFtbWVyKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICB0aGlzLl9oYW1tZXIuZ2V0KCdwYW4nKS5zZXQoe2RpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9BTEx9KTtcclxuXHJcbiAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgIC8vIE1vdmUgdGhlIHNsaWRlclxyXG4gICAgICAgIHRoaXMuX2hhbW1lci5vbigncGFuJywgKGUpID0+IHtcclxuXHJcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuY29uZmlnLnNsaWRpbmdEaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBTbGlkaW5nRGlyZWN0aW9uLkhvcml6b250YWw6XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiBlLmRlbHRhWCwgYWN0aXZlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgaWYgKGUuaXNGaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiAwLCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxQYW4oZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNsaWRpbmdEaXJlY3Rpb24uVmVydGljYWw6XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiBlLmRlbHRhWSwgYWN0aXZlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgaWYgKGUuaXNGaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXIoe3ZhbHVlOiAwLCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2FsUGFuKGUpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVhcnJhbmdlIHNsaWRlciBvbiB3aW5kb3cgcmVzaXplXHJcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybSkpIHtcclxuICAgICAgdGhpcy5fcmVzaXplU3ViJCA9IGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLnVwZGF0ZVNsaWRlcih0aGlzLl9zbGlkaW5nV29ya2VyJC52YWx1ZSkpXHJcbiAgICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZVNsaWRlcih7dmFsdWU6IDAsIGFjdGl2ZTogZmFsc2V9KSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLl9oYW1tZXIpIHtcclxuICAgICAgdGhpcy5faGFtbWVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLl9yZXNpemVTdWIkKSB7XHJcbiAgICAgIHRoaXMuX3Jlc2l6ZVN1YiQudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICAgIHRoaXMuX3NsaWRpbmdXb3JrZXIkLmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0IHNsaWRpbmcgc3RhdGUgdG8gc3R5bGVzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRTbGlkZXJTdHlsZXMoc3RhdGU6IFdvcmtlclN0YXRlKTogYW55IHtcclxuICAgIHN3aXRjaCAodGhpcy5jb25maWcuc2xpZGluZ0RpcmVjdGlvbikge1xyXG4gICAgICBjYXNlIFNsaWRpbmdEaXJlY3Rpb24uSG9yaXpvbnRhbDpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoJHstKHRoaXMuc3RhdGUuY3VyckluZGV4ICogdGhpcy5fZWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCkgKyBzdGF0ZS52YWx1ZX1weCwgMCwgMClgLFxyXG4gICAgICAgICAgd2lkdGg6IGBjYWxjKDEwMCUgKiAke3RoaXMuc3RhdGUuaXRlbXMubGVuZ3RofSlgLFxyXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJSdcclxuICAgICAgICB9O1xyXG4gICAgICBjYXNlIFNsaWRpbmdEaXJlY3Rpb24uVmVydGljYWw6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKDAsICR7LSh0aGlzLnN0YXRlLmN1cnJJbmRleCAqIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIHN0YXRlLnZhbHVlfXB4LCAwKWAsXHJcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgaGVpZ2h0OiBgY2FsYygxMDAlICogJHt0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aH0pYCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB2ZXJ0aWNhbFBhbihlKSB7XHJcbiAgICBpZiAoZS52ZWxvY2l0eVkgPiAwLjMpIHtcclxuICAgICAgdGhpcy5wcmV2KCk7XHJcbiAgICB9IGVsc2UgaWYgKGUudmVsb2NpdHlZIDwgLTAuMykge1xyXG4gICAgICB0aGlzLm5leHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChlLmRlbHRhWSAvIDIgPD0gLXRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0ICogdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggLyB0aGlzLmNvbmZpZy5wYW5TZW5zaXRpdml0eSkge1xyXG4gICAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGUuZGVsdGFZIC8gMiA+PSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCAqIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoIC8gdGhpcy5jb25maWcucGFuU2Vuc2l0aXZpdHkpIHtcclxuICAgICAgICB0aGlzLnByZXYoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmFjdGlvbi5lbWl0KHRoaXMuc3RhdGUuY3VyckluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBob3Jpem9udGFsUGFuKGUpIHtcclxuICAgIGlmIChlLnZlbG9jaXR5WCA+IDAuMykge1xyXG4gICAgICB0aGlzLnByZXYoKTtcclxuICAgIH0gZWxzZSBpZiAoZS52ZWxvY2l0eVggPCAtMC4zKSB7XHJcbiAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGUuZGVsdGFYIC8gMiA8PSAtdGhpcy5fZWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAqIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoIC8gdGhpcy5jb25maWcucGFuU2Vuc2l0aXZpdHkpIHtcclxuICAgICAgICB0aGlzLm5leHQoKTtcclxuICAgICAgfSBlbHNlIGlmIChlLmRlbHRhWCAvIDIgPj0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAqIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoIC8gdGhpcy5jb25maWcucGFuU2Vuc2l0aXZpdHkpIHtcclxuICAgICAgICB0aGlzLnByZXYoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmFjdGlvbi5lbWl0KHRoaXMuc3RhdGUuY3VyckluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBuZXh0KCkge1xyXG4gICAgdGhpcy5hY3Rpb24uZW1pdCgnbmV4dCcpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwcmV2KCkge1xyXG4gICAgdGhpcy5hY3Rpb24uZW1pdCgncHJldicpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVTbGlkZXIoc3RhdGU6IFdvcmtlclN0YXRlKSB7XHJcbiAgICB0aGlzLl9zbGlkaW5nV29ya2VyJC5uZXh0KHsuLi50aGlzLl9zbGlkaW5nV29ya2VyJC52YWx1ZSwgLi4uc3RhdGV9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR2FsbGVyeVN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1jb3VudGVyJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImctY291bnRlclwiPnt7KHN0YXRlLmN1cnJJbmRleCArIDEpICsgJy8nICsgc3RhdGUuaXRlbXMubGVuZ3RofX08L2Rpdj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5Q291bnRlckNvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgc3RhdGU6IEdhbGxlcnlTdGF0ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSG9zdEJpbmRpbmcsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcsIExvYWRpbmdTdHJhdGVneSwgR2FsbGVyeUl0ZW1UeXBlIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1pdGVtJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImxvYWRcIiBbbmdTd2l0Y2hdPVwidHlwZVwiPlxyXG5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hDYXNlPVwiVHlwZXMuSW1hZ2VcIj5cclxuXHJcbiAgICAgICAgPGdhbGxlcnktaW1hZ2UgW3NyY109XCJkYXRhLnNyY1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgW2xvYWRpbmdJY29uXT1cImNvbmZpZy5sb2FkaW5nSWNvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgKGVycm9yKT1cImVycm9yLmVtaXQoJGV2ZW50KVwiPjwvZ2FsbGVyeS1pbWFnZT5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImctdGVtcGxhdGUgZy1pdGVtLXRlbXBsYXRlXCI+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiY29uZmlnLml0ZW1UZW1wbGF0ZTtcclxuICAgICAgICAgIGNvbnRleHQ6IHsgaW5kZXg6IHRoaXMuaW5kZXgsIGN1cnJJbmRleDogdGhpcy5jdXJySW5kZXgsIHR5cGU6IHRoaXMudHlwZSwgZGF0YTogdGhpcy5kYXRhIH1cIj5cclxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcblxyXG4gICAgICA8Z2FsbGVyeS12aWRlbyAqbmdTd2l0Y2hDYXNlPVwiVHlwZXMuVmlkZW9cIlxyXG4gICAgICAgICAgICAgICAgICAgICBbc3JjXT1cImRhdGEuc3JjXCJcclxuICAgICAgICAgICAgICAgICAgICAgW3Bvc3Rlcl09XCJkYXRhLnBvc3RlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgIFtwYXVzZV09XCJjdXJySW5kZXggIT09IGluZGV4XCJcclxuICAgICAgICAgICAgICAgICAgICAgKGVycm9yKT1cImVycm9yLmVtaXQoJGV2ZW50KVwiPjwvZ2FsbGVyeS12aWRlbz5cclxuXHJcbiAgICAgIDxnYWxsZXJ5LWlmcmFtZSAqbmdTd2l0Y2hDYXNlPVwiVHlwZXMuWW91dHViZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBbc3JjXT1cImRhdGEuc3JjXCJcclxuICAgICAgICAgICAgICAgICAgICAgIFtwYXVzZV09XCJjdXJySW5kZXggIT09IGluZGV4XCI+PC9nYWxsZXJ5LWlmcmFtZT5cclxuXHJcbiAgICAgIDxnYWxsZXJ5LWlmcmFtZSAqbmdTd2l0Y2hDYXNlPVwiVHlwZXMuSWZyYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIFtzcmNdPVwiZGF0YS5zcmNcIj48L2dhbGxlcnktaWZyYW1lPlxyXG5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hEZWZhdWx0PlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZy10ZW1wbGF0ZSBnLWl0ZW0tdGVtcGxhdGVcIj5cclxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb25maWcuaXRlbVRlbXBsYXRlO1xyXG4gICAgICAgICAgY29udGV4dDogeyBpbmRleDogdGhpcy5pbmRleCwgY3VyckluZGV4OiB0aGlzLmN1cnJJbmRleCwgdHlwZTogdGhpcy50eXBlLCBkYXRhOiB0aGlzLmRhdGEgfVwiPlxyXG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5SXRlbUNvbXBvbmVudCB7XHJcblxyXG4gIHJlYWRvbmx5IFR5cGVzID0gR2FsbGVyeUl0ZW1UeXBlO1xyXG5cclxuICAvKiogR2FsbGVyeSBjb25maWcgKi9cclxuICBASW5wdXQoKSBjb25maWc6IEdhbGxlcnlDb25maWc7XHJcblxyXG4gIC8qKiBJdGVtJ3MgaW5kZXggaW4gdGhlIGdhbGxlcnkgKi9cclxuICBASW5wdXQoKSBpbmRleDogbnVtYmVyO1xyXG5cclxuICAvKiogR2FsbGVyeSBjdXJyZW50IGluZGV4ICovXHJcbiAgQElucHV0KCkgY3VyckluZGV4OiBudW1iZXI7XHJcblxyXG4gIC8qKiBJdGVtJ3MgdHlwZSAnaW1hZ2UnLCAndmlkZW8nLCAneW91dHViZScsICdpZnJhbWUnICovXHJcbiAgQElucHV0KCkgdHlwZTogc3RyaW5nO1xyXG5cclxuICAvKiogSXRlbSdzIGRhdGEsIHRoaXMgb2JqZWN0IGNvbnRhaW5zIHRoZSBkYXRhIHJlcXVpcmVkIHRvIGRpc3BsYXkgdGhlIGNvbnRlbnQgKGUuZy4gc3JjIHBhdGgpICovXHJcbiAgQElucHV0KCkgZGF0YTogYW55O1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yPigpO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmctYWN0aXZlLWl0ZW0nKSBnZXQgaXNBY3RpdmUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pbmRleCA9PT0gdGhpcy5jdXJySW5kZXg7XHJcbiAgfVxyXG5cclxuICBnZXQgbG9hZCgpIHtcclxuICAgIHN3aXRjaCAodGhpcy5jb25maWcubG9hZGluZ1N0cmF0ZWd5KSB7XHJcbiAgICAgIGNhc2UgTG9hZGluZ1N0cmF0ZWd5LlByZWxvYWQ6XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIGNhc2UgTG9hZGluZ1N0cmF0ZWd5Lkxhenk6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VyckluZGV4ID09PSB0aGlzLmluZGV4O1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJJbmRleCA9PT0gdGhpcy5pbmRleCB8fCB0aGlzLmN1cnJJbmRleCA9PT0gdGhpcy5pbmRleCAtIDEgfHwgdGhpcy5jdXJySW5kZXggPT09IHRoaXMuaW5kZXggKyAxO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEhvc3RCaW5kaW5nLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnLCBHYWxsZXJ5RXJyb3IgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LXRodW1iJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGdhbGxlcnktaW1hZ2UgW3NyY109XCJkYXRhLnRodW1iXCIgKGVycm9yKT1cImVycm9yLmVtaXQoJGV2ZW50KVwiPjwvZ2FsbGVyeS1pbWFnZT5cclxuXHJcbiAgICA8ZGl2ICpuZ0lmPVwiY29uZmlnLnRodW1iVGVtcGxhdGVcIiBjbGFzcz1cImctdGVtcGxhdGUgZy10aHVtYi10ZW1wbGF0ZVwiPlxyXG4gICAgICA8bmctY29udGFpbmVyXHJcbiAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb25maWcudGh1bWJUZW1wbGF0ZTsgY29udGV4dDogeyBpbmRleDogdGhpcy5pbmRleCwgdHlwZTogdGhpcy50eXBlLCBkYXRhOiB0aGlzLmRhdGEgfVwiPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvZGl2PlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlUaHVtYkNvbXBvbmVudCB7XHJcblxyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgLyoqIEl0ZW0ncyBpbmRleCBpbiB0aGUgZ2FsbGVyeSAqL1xyXG4gIEBJbnB1dCgpIGluZGV4OiBudW1iZXI7XHJcblxyXG4gIC8qKiBHYWxsZXJ5IGN1cnJlbnQgaW5kZXggKi9cclxuICBASW5wdXQoKSBjdXJySW5kZXg6IG51bWJlcjtcclxuXHJcbiAgLyoqIEl0ZW0ncyB0eXBlICdpbWFnZScsICd2aWRlbycsICd5b3V0dWJlJywgJ2lmcmFtZScgKi9cclxuICBASW5wdXQoKSB0eXBlOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBJdGVtJ3MgZGF0YSwgdGhpcyBvYmplY3QgY29udGFpbnMgdGhlIGRhdGEgcmVxdWlyZWQgdG8gZGlzcGxheSB0aGUgY29udGVudCAoZS5nLiBzcmMgcGF0aCkgKi9cclxuICBASW5wdXQoKSBkYXRhOiBhbnk7XHJcblxyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3I+KCk7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZy1hY3RpdmUtdGh1bWInKSBnZXQgaXNBY3RpdmUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pbmRleCA9PT0gdGhpcy5jdXJySW5kZXg7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0QmluZGluZywgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LWltYWdlJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRhaW5lciBbbGF6eUltYWdlXT1cInNyY1wiIChsb2FkZWQpPVwibG9hZGVkSW1hZ2UgPSAkZXZlbnRcIiAoZXJyb3IpPVwiZXJyb3IuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgIDxkaXYgKm5nSWY9XCJsb2FkZWRJbWFnZTsgZWxzZSBsb2FkaW5nXCJcclxuICAgICAgICAgICBjbGFzcz1cImctaW1hZ2UtaXRlbVwiXHJcbiAgICAgICAgICAgW3N0eWxlLmJhY2tncm91bmRJbWFnZV09XCJsb2FkZWRJbWFnZVwiPjwvZGl2PlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcblxyXG4gICAgPG5nLXRlbXBsYXRlICNsb2FkaW5nPlxyXG4gICAgICA8aSAqbmdJZj1cImxvYWRpbmdTdmc7IGVsc2UgdGh1bWJMb2FkaW5nXCIgY2xhc3M9XCJnLWxvYWRpbmdcIiBbaW5uZXJIVE1MXT1cImxvYWRpbmdTdmdcIj48L2k+XHJcbiAgICAgIDxuZy10ZW1wbGF0ZSAjdGh1bWJMb2FkaW5nPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJnLXRodW1iLWxvYWRpbmdcIj48L2Rpdj5cclxuICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeUltYWdlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgbG9hZGVkSW1hZ2U6IHN0cmluZztcclxuICBsb2FkaW5nU3ZnOiBTYWZlSHRtbDtcclxuXHJcbiAgQElucHV0KCkgc3JjOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbG9hZGluZ0ljb246IHN0cmluZztcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzICovXHJcbiAgQE91dHB1dCgpIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxFcnJvcj4oKTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5nLWltYWdlLWxvYWRlZCcpIGdldCBpbWFnZUxvYWRlZCgpIHtcclxuICAgIHJldHVybiAhIXRoaXMubG9hZGVkSW1hZ2U7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9zYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5sb2FkaW5nSWNvbikge1xyXG4gICAgICB0aGlzLmxvYWRpbmdTdmcgPSB0aGlzLl9zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwodGhpcy5sb2FkaW5nSWNvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktdmlkZW8nLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8dmlkZW8gI3ZpZGVvIGNvbnRyb2xzIHBvc3Rlcj1cInt7cG9zdGVyfX1cIiAoZXJyb3IpPVwiZXJyb3IuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgIDxzb3VyY2UgKm5nRm9yPVwibGV0IHNyYyBvZiB2aWRlb1NvdXJjZXNcIiBzcmM9XCJ7e3NyYz8udXJsfX1cIiB0eXBlPVwie3tzcmM/LnR5cGV9fVwiLz5cclxuICAgIDwvdmlkZW8+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeVZpZGVvQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgdmlkZW9Tb3VyY2VzOiB7dXJsOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmd9W107XHJcblxyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nIHwge3VybDogc3RyaW5nLCB0eXBlPzogc3RyaW5nfVtdO1xyXG4gIEBJbnB1dCgpIHBvc3Rlcjogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoJ3BhdXNlJykgc2V0IHBhdXNlVmlkZW8oc2hvdWxkUGF1c2U6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy52aWRlby5uYXRpdmVFbGVtZW50O1xyXG4gICAgaWYgKHNob3VsZFBhdXNlICYmICF2aWRlby5wYXVzZWQpIHtcclxuICAgICAgdmlkZW8ucGF1c2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3I+KCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3ZpZGVvJykgdmlkZW86IEVsZW1lbnRSZWY7XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMuc3JjIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgLy8gSWYgdmlkZW8gaGFzIG11bHRpcGxlIHNvdXJjZXNcclxuICAgICAgdGhpcy52aWRlb1NvdXJjZXMgPSBbLi4udGhpcy5zcmNdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52aWRlb1NvdXJjZXMgPSBbeyB1cmw6IHRoaXMuc3JjIH1dO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1pZnJhbWUnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8aWZyYW1lICNpZnJhbWVcclxuICAgICAgICAgICAgZnJhbWVib3JkZXI9XCIwXCJcclxuICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuXHJcbiAgICAgICAgICAgIFtzcmNdPVwiaWZyYW1lU3JjXCI+XHJcbiAgICA8L2lmcmFtZT5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5SWZyYW1lQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgaWZyYW1lU3JjOiBTYWZlUmVzb3VyY2VVcmw7XHJcblxyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoJ3BhdXNlJykgc2V0IHBhdXNlVmlkZW8oc2hvdWxkUGF1c2U6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQgPSB0aGlzLmlmcmFtZS5uYXRpdmVFbGVtZW50O1xyXG4gICAgaWYgKHNob3VsZFBhdXNlKSB7XHJcbiAgICAgIGNvbnN0IHNyYyA9IGlmcmFtZS5zcmM7XHJcbiAgICAgIGlmcmFtZS5zcmMgPSBzcmM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAVmlld0NoaWxkKCdpZnJhbWUnKSBpZnJhbWU6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3Nhbml0aXplcjogRG9tU2FuaXRpemVyKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuaWZyYW1lU3JjID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCh0aGlzLnNyYyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgemlwLCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tsYXp5SW1hZ2VdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGF6eURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gIC8vIExhenkgbG9hZCB3b3JrZXJcclxuICBwcml2YXRlIF93b3JrZXIkID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgQElucHV0KCdsYXp5SW1hZ2UnKVxyXG4gIHNldCBsYXp5SW1hZ2UoaW1hZ2VQYXRoOiBzdHJpbmcpIHtcclxuICAgIHRoaXMubG9hZEltYWdlKGltYWdlUGF0aCk7XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgbG9hZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcbiAgQE91dHB1dCgpIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxFcnJvcj4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICB0aGlzLl93b3JrZXIkLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoaW1hZ2VTcmM6IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgICAvLyBJbWFnZSBpcyBsb2FkaW5nXHJcbiAgICAgICAgdGhpcy5sb2FkZWQuZW1pdChudWxsKTtcclxuXHJcbiAgICAgICAgLy8gU3RvcCBwcmV2aW91c2x5IGxvYWRpbmdcclxuICAgICAgICBpbWcuc3JjID0gaW1hZ2VTcmM7XHJcblxyXG4gICAgICAgIC8vIEltYWdlIGxvYWQgc3VjY2Vzc1xyXG4gICAgICAgIGNvbnN0IGxvYWRTdWNjZXNzID0gZnJvbUV2ZW50KGltZywgJ2xvYWQnKS5waXBlKFxyXG4gICAgICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWQuZW1pdChgdXJsKCR7aW1hZ2VTcmN9KWApO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBJbWFnZSBsb2FkIGZhaWxlZFxyXG4gICAgICAgIGNvbnN0IGxvYWRFcnJvciA9IGZyb21FdmVudChpbWcsICdlcnJvcicpLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQobmV3IEVycm9yKGBbbGF6eUltYWdlXTogVGhlIGltYWdlICR7aW1hZ2VTcmN9IGRpZCBub3QgbG9hZGApKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWQuZW1pdChudWxsKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHppcChsb2FkU3VjY2VzcywgbG9hZEVycm9yKTtcclxuICAgICAgfSlcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkSW1hZ2UoaW1hZ2VQYXRoOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3dvcmtlciQubmV4dChpbWFnZVBhdGgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl93b3JrZXIkLmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCIvKipcclxuICogVGhpcyBkaXJlY3RpdmUgZW5hYmxlIHRhcCBpZiBIYW1tZXJKUyBpcyBsb2FkZWQsIG90aGVyd2lzZSBpdCBmYWxscyBiYWNrIHRvIG5vcm1hbCBjbGljayBldmVudFxyXG4gKi9cclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmRlY2xhcmUgY29uc3QgSGFtbWVyOiBhbnk7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1t0YXBDbGlja10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYXBDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgbWM6IGFueTtcclxuICBjbGlja0xpc3RlbmVyOiBhbnk7XHJcbiAgQElucHV0KCkgdGFwQ2xpY2tEaXNhYmxlZDogYm9vbGVhbjtcclxuICBAT3V0cHV0KCkgdGFwQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnNldFRhcEV2ZW50KCk7XHJcbiAgfVxyXG5cclxuICAvKiogRW5hYmxlIGdlc3R1cmVzIGlmIGhhbW1lciBpcyBsb2FkZWQgKi9cclxuICBzZXRUYXBFdmVudCgpIHtcclxuXHJcbiAgICBpZiAodHlwZW9mIEhhbW1lciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcbiAgICAgIC8vIFVzZSBoYW1tZXIuanMgdGFwIGV2ZW50XHJcbiAgICAgIHRoaXMubWMgPSBuZXcgSGFtbWVyKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMubWMub24oJ3RhcCcsICgpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMudGFwQ2xpY2tEaXNhYmxlZCkge1xyXG4gICAgICAgICAgdGhpcy50YXBDbGljay5lbWl0KG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBVc2Ugbm9ybWFsIGNsaWNrIGV2ZW50XHJcbiAgICAgIHRoaXMuY2xpY2tMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmICghdGhpcy50YXBDbGlja0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICB0aGlzLnRhcENsaWNrLmVtaXQobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMubWMpIHtcclxuICAgICAgdGhpcy5tYy5kZXN0cm95KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsaWNrTGlzdGVuZXIoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcgfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IEdBTExFUllfQ09ORklHIH0gZnJvbSAnLi91dGlscy9nYWxsZXJ5LnRva2VuJztcclxuXHJcbmltcG9ydCB7IEdhbGxlcnlDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZ2FsbGVyeS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5TmF2Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktbmF2LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb3JlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktY29yZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5RG90c0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9nYWxsZXJ5LWRvdHMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgR2FsbGVyeVRodW1ic0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9nYWxsZXJ5LXRodW1icy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5U2xpZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktc2xpZGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb3VudGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktY291bnRlci5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgR2FsbGVyeUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZ2FsbGVyeS1pdGVtLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlUaHVtYkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9nYWxsZXJ5LXRodW1iLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlJbWFnZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5VmlkZW9Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdGVtcGxhdGVzL2dhbGxlcnktdmlkZW8uY29tcG9uZW50JztcclxuaW1wb3J0IHsgR2FsbGVyeUlmcmFtZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS1pZnJhbWUuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IExhenlEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbGF6eS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUYXBDbGlja0RpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy90YXAtY2xpY2suZGlyZWN0aXZlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIEdhbGxlcnlDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5TmF2Q29tcG9uZW50LFxyXG4gICAgR2FsbGVyeURvdHNDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5Q29yZUNvbXBvbmVudCxcclxuICAgIEdhbGxlcnlTbGlkZXJDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5Q291bnRlckNvbXBvbmVudCxcclxuICAgIEdhbGxlcnlUaHVtYnNDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5VGh1bWJDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5SXRlbUNvbXBvbmVudCxcclxuICAgIEdhbGxlcnlJbWFnZUNvbXBvbmVudCxcclxuICAgIEdhbGxlcnlWaWRlb0NvbXBvbmVudCxcclxuICAgIEdhbGxlcnlJZnJhbWVDb21wb25lbnQsXHJcbiAgICBMYXp5RGlyZWN0aXZlLFxyXG4gICAgVGFwQ2xpY2tEaXJlY3RpdmVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIEdhbGxlcnlDb21wb25lbnQsXHJcbiAgICBMYXp5RGlyZWN0aXZlLFxyXG4gICAgVGFwQ2xpY2tEaXJlY3RpdmUsXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeU1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogR2FsbGVyeUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBHYWxsZXJ5TW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBHQUxMRVJZX0NPTkZJRyxcclxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWdcclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBQ0UsYUFBYyxhQUFhO0lBQzNCLGVBQWdCLGNBQWM7SUFDOUIsZUFBZ0IsY0FBYztJQUM5QixNQUFPLE1BQU07SUFDYixNQUFPLE1BQU07Ozs7SUFJYixPQUFRLE9BQU87SUFDZixTQUFVLFNBQVM7Ozs7SUFJbkIsU0FBVSxTQUFTO0lBQ25CLE1BQU8sTUFBTTtJQUNiLFNBQVUsU0FBUzs7OztJQUluQixLQUFNLEtBQUs7SUFDWCxNQUFPLE1BQU07SUFDYixPQUFRLE9BQU87SUFDZixRQUFTLFFBQVE7Ozs7SUFJakIsTUFBTyxNQUFNO0lBQ2IsUUFBUyxRQUFROzs7O0lBSWpCLFlBQWEsWUFBWTtJQUN6QixVQUFXLFVBQVU7Ozs7SUFJckIsT0FBUSxPQUFPO0lBQ2YsT0FBUSxPQUFPO0lB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