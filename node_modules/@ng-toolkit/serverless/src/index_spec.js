"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const testing_1 = require("@angular-devkit/schematics/testing");
const testing_2 = require("@ng-toolkit/_utils/testing");
const schematics_1 = require("@angular-devkit/schematics");
const collectionPath = path.join(__dirname, '../collection.json');
describe('Serverless', () => {
    let appTree;
    const schematicRunner = new testing_1.SchematicTestRunner('@ng-toolkit/serverless', collectionPath);
    const defaultOptions = {
        project: 'foo',
        disableBugsnag: true,
        directory: '/foo'
    };
    const appOptions = {
        name: 'foo',
        version: '6.0.0',
    };
    beforeEach((done) => {
        appTree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        schematicRunner.runExternalSchematicAsync('@schematics/angular', 'ng-new', appOptions, appTree).subscribe(tree => {
            appTree = tree;
            done();
        });
    });
    describe('AWS Lambda', () => {
        beforeAll(() => defaultOptions['provider'] = 'aws');
        afterAll(() => delete defaultOptions['provider']);
        it('Should create serverless configuration for AWS', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/serverless.yml`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/lambda.js`);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/serverless.yml`, /provider:[\s\S]*name:\saws/);
                done();
            });
        });
        it('Should add proper scripts to package.json', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:serverless": "ng build --prod --base-href \/production\/"/);
                done();
            });
        });
    });
    describe('Firebase', () => {
        beforeAll(() => defaultOptions['provider'] = 'firebase');
        afterAll(() => delete defaultOptions['provider']);
        it('Should create files', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/functions/package.json`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/functions/index.js`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/.firebaserc`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/firebase.json`);
                done();
            });
        });
        it('Should add proper scripts to package.json', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:serverless": "ng build --prod --base-href \//);
                done();
            });
        });
    });
    describe('Google Cloud Functions', () => {
        beforeAll(() => defaultOptions['provider'] = 'gcloud');
        afterAll(() => delete defaultOptions['provider']);
        it('Should create serverless configuration and files', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/serverless.yml`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/index.js`);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/serverless.yml`, /provider:[\s\S]*name:\sgoogle/);
                done();
            });
        });
        it('Should add proper scripts to package.json', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:serverless": "ng build --prod --base-href \/http\/"/);
                done();
            });
        });
    });
    it('By default AWS should be choosen as provider', (done) => {
        schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
            testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/serverless.yml`);
            testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/lambda.js`);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/serverless.yml`, /provider:[\s\S]*name:\saws/);
            done();
        });
    });
    it('Should create all common files', (done) => {
        schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
            testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/local.js`);
            testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/server.ts`);
            testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/webpack.server.config.js`);
            testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/ng-toolkit.json`);
            done();
        });
    });
    it('Should add proper scripts to package.json', (done) => {
        schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:prod": "ng build --prod"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:prod": "npm run build:browser:prod && npm run build:server:prod"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"server": "node local.js"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:prod:deploy": "npm run build:prod && npm run deploy"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:server:prod": "webpack --config webpack.server.config.js --progress --colors"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:serverless": "npm run build:browser:serverless && npm run build:server:serverless"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:serverless:deploy": "npm run build:serverless && npm run deploy"/);
            testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:server:serverless": "webpack --config webpack.server.config.js --progress --colors"/);
            done();
        });
    });
    describe('After Universal', () => {
        beforeEach((done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                schematicRunner.runExternalSchematicAsync('@ng-toolkit/universal', 'ng-add', defaultOptions, tree).subscribe(tree => {
                    appTree = tree;
                    done();
                });
            });
        });
        describe('AWS Lambda', () => {
            beforeAll(() => defaultOptions['provider'] = 'aws');
            afterAll(() => delete defaultOptions['provider']);
            it('Should create serverless configuration for AWS', (done) => {
                schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/serverless.yml`);
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/lambda.js`);
                    testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/serverless.yml`, /provider:[\s\S]*name:\saws/);
                    done();
                });
            });
            it('Should add proper scripts to package.json', (done) => {
                schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                    testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:serverless": "ng build --prod --base-href \/production\/"/);
                    done();
                });
            });
        });
        fdescribe('Firebase', () => {
            beforeAll(() => defaultOptions['provider'] = 'firebase');
            afterAll(() => delete defaultOptions['provider']);
            it('Should create files', (done) => {
                schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/functions/package.json`);
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/functions/index.js`);
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/.firebaserc`);
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/firebase.json`);
                    done();
                });
            });
            it('Should add proper scripts to package.json', (done) => {
                schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                    testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:serverless": "ng build --prod --base-href \//);
                    done();
                });
            });
        });
        describe('Google Cloud Functions', () => {
            beforeAll(() => defaultOptions['provider'] = 'gcloud');
            afterAll(() => delete defaultOptions['provider']);
            it('Should create serverless configuration and files', (done) => {
                schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/serverless.yml`);
                    testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/index.js`);
                    testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/serverless.yml`, /provider:[\s\S]*name:\sgoogle/);
                    done();
                });
            });
            it('Should add proper scripts to package.json', (done) => {
                schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                    testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:serverless": "ng build --prod --base-href \/http\/"/);
                    done();
                });
            });
        });
        it('By default AWS should be choosen as provider', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/serverless.yml`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/lambda.js`);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/serverless.yml`, /provider:[\s\S]*name:\saws/);
                done();
            });
        });
        it('Should create all common files', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/local.js`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/server.ts`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/webpack.server.config.js`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/ng-toolkit.json`);
                testing_2.checkIfFileExists(tree, `${defaultOptions.directory}/src/environments/environment.serverless.ts`);
                done();
            });
        });
        it('Should add proper scripts to package.json', (done) => {
            schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:browser:prod": "ng build --prod"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:prod": "npm run build:browser:prod && npm run build:server:prod"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"server": "node local.js"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:prod:deploy": "npm run build:prod && npm run deploy"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:server:prod": "ng run foo:server && webpack --config webpack.server.config.js --progress --colors"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:serverless": "npm run build:browser:serverless && npm run build:server:serverless"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:serverless:deploy": "npm run build:serverless && npm run deploy"/);
                testing_2.shouldContainEntry(tree, `${defaultOptions.directory}/package.json`, /"build:server:serverless": "ng run foo:server:serverless && webpack --config webpack.server.config.js --progress --colors"/);
                done();
            });
        });
    });
});
//# sourceMappingURL=index_spec.js.map